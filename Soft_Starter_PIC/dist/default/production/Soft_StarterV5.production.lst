

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Dec 18 19:32:11 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  0030A8                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _contTimer0
    72  0030A8  FFB3               	dw	65459
    73                           
    74                           	psect	idataBANK0
    75  003094                     __pidataBANK0:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _TempoAceleracao
    79  003094  000A               	dw	10
    80                           
    81                           ;initializer for _TempoChaveamentoInicial
    82  003096  0037               	dw	55
    83                           
    84                           ;initializer for _TempoDesaceleracao
    85  003098  0005               	dw	5
    86                           
    87                           ;initializer for _contTimer3
    88  00309A  FFB3               	dw	65459
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	opt stack 0
    93  000800  00                 	db	0
    94  000801                     _dpowers:
    95                           	opt stack 0
    96  000801  0001               	dw	1
    97  000803  0000               	dw	0
    98  000805  000A               	dw	10
    99  000807  0000               	dw	0
   100  000809  0064               	dw	100
   101  00080B  0000               	dw	0
   102  00080D  03E8               	dw	1000
   103  00080F  0000               	dw	0
   104  000811  2710               	dw	10000
   105  000813  0000               	dw	0
   106  000815  86A0               	dw	34464
   107  000817  0001               	dw	1
   108  000819  4240               	dw	16960
   109  00081B  000F               	dw	15
   110  00081D  9680               	dw	38528
   111  00081F  0098               	dw	152
   112  000821  E100               	dw	57600
   113  000823  05F5               	dw	1525
   114  000825  CA00               	dw	51712
   115  000827  3B9A               	dw	15258
   116  000829                     __end_of_dpowers:
   117                           	opt stack 0
   118  000829                     __npowers_:
   119                           	opt stack 0
   120  000829  00                 	db	0
   121  00082A  80                 	db	128
   122  00082B  3F                 	db	63
   123  00082C  CD                 	db	205
   124  00082D  CC                 	db	204
   125  00082E  3D                 	db	61
   126  00082F  D7                 	db	215
   127  000830  23                 	db	35
   128  000831  3C                 	db	60
   129  000832  12                 	db	18
   130  000833  83                 	db	131
   131  000834  3A                 	db	58
   132  000835  B7                 	db	183
   133  000836  D1                 	db	209
   134  000837  38                 	db	56
   135  000838  C6                 	db	198
   136  000839  27                 	db	39
   137  00083A  37                 	db	55
   138  00083B  38                 	db	56
   139  00083C  86                 	db	134
   140  00083D  35                 	db	53
   141  00083E  C0                 	db	192
   142  00083F  D6                 	db	214
   143  000840  33                 	db	51
   144  000841  CC                 	db	204
   145  000842  2B                 	db	43
   146  000843  32                 	db	50
   147  000844  70                 	db	112
   148  000845  89                 	db	137
   149  000846  30                 	db	48
   150  000847  E7                 	db	231
   151  000848  DB                 	db	219
   152  000849  2E                 	db	46
   153  00084A  E5                 	db	229
   154  00084B  3C                 	db	60
   155  00084C  1E                 	db	30
   156  00084D  42                 	db	66
   157  00084E  A2                 	db	162
   158  00084F  0D                 	db	13
   159  000850                     __end_of__npowers_:
   160                           	opt stack 0
   161  000850                     __powers_:
   162                           	opt stack 0
   163  000850  00                 	db	0
   164  000851  80                 	db	128
   165  000852  3F                 	db	63
   166  000853  00                 	db	0
   167  000854  20                 	db	32
   168  000855  41                 	db	65
   169  000856  00                 	db	0
   170  000857  C8                 	db	200
   171  000858  42                 	db	66
   172  000859  00                 	db	0
   173  00085A  7A                 	db	122
   174  00085B  44                 	db	68
   175  00085C  40                 	db	64
   176  00085D  1C                 	db	28
   177  00085E  46                 	db	70
   178  00085F  50                 	db	80
   179  000860  C3                 	db	195
   180  000861  47                 	db	71
   181  000862  24                 	db	36
   182  000863  74                 	db	116
   183  000864  49                 	db	73
   184  000865  97                 	db	151
   185  000866  18                 	db	24
   186  000867  4B                 	db	75
   187  000868  BC                 	db	188
   188  000869  BE                 	db	190
   189  00086A  4C                 	db	76
   190  00086B  6B                 	db	107
   191  00086C  6E                 	db	110
   192  00086D  4E                 	db	78
   193  00086E  03                 	db	3
   194  00086F  15                 	db	21
   195  000870  50                 	db	80
   196  000871  79                 	db	121
   197  000872  AD                 	db	173
   198  000873  60                 	db	96
   199  000874  F3                 	db	243
   200  000875  49                 	db	73
   201  000876  71                 	db	113
   202  000877                     __end_of__powers_:
   203                           	opt stack 0
   204  000877                     STR_1:
   205                           
   206                           ; BSR set to: 0
   207  000877  20                 	db	32
   208  000878  20                 	db	32
   209  000879  20                 	db	32
   210  00087A  50                 	db	80	;'P'
   211  00087B  41                 	db	65	;'A'
   212  00087C  52                 	db	82	;'R'
   213  00087D  41                 	db	65	;'A'
   214  00087E  44                 	db	68	;'D'
   215  00087F  41                 	db	65	;'A'
   216  000880  20                 	db	32
   217  000881  50                 	db	80	;'P'
   218  000882  4F                 	db	79	;'O'
   219  000883  52                 	db	82	;'R'
   220  000884  20                 	db	32
   221  000885  20                 	db	32
   222  000886  20                 	db	32
   223  000887  00                 	db	0
   224  000888                     STR_2:
   225                           
   226                           ; BSR set to: 0
   227  000888  53                 	db	83	;'S'
   228  000889  4F                 	db	79	;'O'
   229  00088A  42                 	db	66	;'B'
   230  00088B  52                 	db	82	;'R'
   231  00088C  45                 	db	69	;'E'
   232  00088D  43                 	db	67	;'C'
   233  00088E  4F                 	db	79	;'O'
   234  00088F  52                 	db	82	;'R'
   235  000890  52                 	db	82	;'R'
   236  000891  45                 	db	69	;'E'
   237  000892  4E                 	db	78	;'N'
   238  000893  54                 	db	84	;'T'
   239  000894  45                 	db	69	;'E'
   240  000895  21                 	db	33
   241  000896  21                 	db	33
   242  000897  21                 	db	33
   243  000898  00                 	db	0
   244  000899                     STR_3:
   245                           
   246                           ; BSR set to: 0
   247  000899  43                 	db	67	;'C'
   248  00089A  6F                 	db	111	;'o'
   249  00089B  72                 	db	114	;'r'
   250  00089C  72                 	db	114	;'r'
   251  00089D  65                 	db	101	;'e'
   252  00089E  6E                 	db	110	;'n'
   253  00089F  74                 	db	116	;'t'
   254  0008A0  65                 	db	101	;'e'
   255  0008A1  3A                 	db	58	;':'
   256  0008A2  20                 	db	32
   257  0008A3  30                 	db	48	;'0'
   258  0008A4  2E                 	db	46
   259  0008A5  30                 	db	48	;'0'
   260  0008A6  30                 	db	48	;'0'
   261  0008A7  41                 	db	65	;'A'
   262  0008A8  00                 	db	0
   263  0008A9                     STR_8:
   264                           
   265                           ; BSR set to: 0
   266  0008A9  25                 	db	37
   267  0008AA  2E                 	db	46
   268  0008AB  32                 	db	50	;'2'
   269  0008AC  66                 	db	102	;'f'
   270  0008AD  41                 	db	65	;'A'
   271  0008AE  20                 	db	32
   272  0008AF  00                 	db	0
   273  0008B0                     STR_4:
   274                           
   275                           ; BSR set to: 0
   276  0008B0  41                 	db	65	;'A'
   277  0008B1  63                 	db	99	;'c'
   278  0008B2  6C                 	db	108	;'l'
   279  0008B3  3A                 	db	58	;':'
   280  0008B4  25                 	db	37
   281  0008B5  64                 	db	100	;'d'
   282  0008B6  00                 	db	0
   283  0008B7                     STR_6:
   284                           
   285                           ; BSR set to: 0
   286  0008B7  44                 	db	68	;'D'
   287  0008B8  65                 	db	101	;'e'
   288  0008B9  73                 	db	115	;'s'
   289  0008BA  3A                 	db	58	;':'
   290  0008BB  25                 	db	37
   291  0008BC  64                 	db	100	;'d'
   292  0008BD  00                 	db	0
   293  0008BE                     STR_10:
   294                           
   295                           ; BSR set to: 0
   296  0008BE  25                 	db	37
   297  0008BF  64                 	db	100	;'d'
   298  0008C0  73                 	db	115	;'s'
   299  0008C1  20                 	db	32
   300  0008C2  20                 	db	32
   301  0008C3  00                 	db	0
   302  0008C4                     STR_9:
   303                           
   304                           ; BSR set to: 0
   305  0008C4  25                 	db	37
   306  0008C5  64                 	db	100	;'d'
   307  0008C6  73                 	db	115	;'s'
   308  0008C7  20                 	db	32
   309  0008C8  00                 	db	0
   310  0000                     
   311                           ; #config settings
   312  0008C9  00                 	db	0	; dummy byte at the end
   313  0000                     
   314                           	psect	nvBANK0
   315  0000D0                     __pnvBANK0:
   316                           	opt stack 0
   317  0000D0                     _TempoAtual:
   318                           	opt stack 0
   319  0000D0                     	ds	2
   320  0000                     _TMR0	set	4054
   321  0000                     _TMR3	set	4018
   322  0000                     _ADCON0	set	4034
   323  0000                     _ADCON0bits	set	4034
   324  0000                     _ADCON1	set	4033
   325  0000                     _ADCON2	set	4032
   326  0000                     _ADRESH	set	4036
   327  0000                     _ADRESL	set	4035
   328  0000                     _INTCON	set	4082
   329  0000                     _INTCON2bits	set	4081
   330  0000                     _INTCONbits	set	4082
   331  0000                     _LATC	set	3979
   332  0000                     _LATDbits	set	3980
   333  0000                     _LATE	set	3981
   334  0000                     _OSCCON	set	4051
   335  0000                     _PIE1bits	set	3997
   336  0000                     _PIE2bits	set	4000
   337  0000                     _PIR1bits	set	3998
   338  0000                     _PIR2bits	set	4001
   339  0000                     _PORTAbits	set	3968
   340  0000                     _PORTCbits	set	3970
   341  0000                     _PORTD	set	3971
   342  0000                     _PORTEbits	set	3972
   343  0000                     _PR2	set	4043
   344  0000                     _T0CON	set	4053
   345  0000                     _T0CONbits	set	4053
   346  0000                     _T2CON	set	4042
   347  0000                     _T2CONbits	set	4042
   348  0000                     _T3CON	set	4017
   349  0000                     _T3CONbits	set	4017
   350  0000                     _TMR0H	set	4055
   351  0000                     _TMR0L	set	4054
   352  0000                     _TMR2	set	4044
   353  0000                     _TMR3H	set	4019
   354  0000                     _TMR3L	set	4018
   355  0000                     _TRISA	set	3986
   356  0000                     _TRISC	set	3988
   357  0000                     _TRISD	set	3989
   358  0000                     _TRISDbits	set	3989
   359  0000                     _TRISE	set	3990
   360  0000                     _TXSTAbits	set	4012
   361  0000                     _INT0IE	set	32660
   362  0000                     _INT0IF	set	32657
   363  0000                     _INT1IE	set	32643
   364  0000                     _INT1IF	set	32640
   365  0000                     _INT1IP	set	32646
   366  0000                     _INT2IE	set	32644
   367  0000                     _INT2IF	set	32641
   368  0000                     _INT2IP	set	32647
   369  0000                     _TMR0IE	set	32661
   370  0000                     _TMR0IF	set	32658
   371  0000                     _TMR1IE	set	31976
   372  0000                     _TMR1IP	set	31992
   373  0000                     _TMR2IE	set	31977
   374  0000                     _TMR2IF	set	31985
   375  0000                     _TMR2IP	set	31993
   376  0000                     _TMR3IE	set	32001
   377  0000                     _TMR3IF	set	32009
   378  0000                     _TMR3IP	set	32017
   379                           
   380                           	psect	cinit
   381  002B52                     __pcinit:
   382                           	opt stack 0
   383  002B52                     start_initialization:
   384                           	opt stack 0
   385  002B52                     __initialization:
   386                           	opt stack 0
   387                           
   388                           ; Initialize objects allocated to BANK0 (8 bytes)
   389                           ; load TBLPTR registers with __pidataBANK0
   390  002B52  0E94               	movlw	low __pidataBANK0
   391  002B54  6EF6               	movwf	tblptrl,c
   392  002B56  0E30               	movlw	high __pidataBANK0
   393  002B58  6EF7               	movwf	tblptrh,c
   394  002B5A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   395  002B5C  6EF8               	movwf	tblptru,c
   396  002B5E  EE00  F0C8         	lfsr	0,__pdataBANK0
   397  002B62  EE10 F008          	lfsr	1,8
   398  002B66                     copy_data0:
   399  002B66  0009               	tblrd		*+
   400  002B68  CFF5 FFEE          	movff	tablat,postinc0
   401  002B6C  50E5               	movf	postdec1,w,c
   402  002B6E  50E1               	movf	fsr1l,w,c
   403  002B70  E1FA               	bnz	copy_data0
   404                           
   405                           ; Initialize objects allocated to COMRAM (2 bytes)
   406                           ; load TBLPTR registers with __pidataCOMRAM
   407  002B72  0EA8               	movlw	low __pidataCOMRAM
   408  002B74  6EF6               	movwf	tblptrl,c
   409  002B76  0E30               	movlw	high __pidataCOMRAM
   410  002B78  6EF7               	movwf	tblptrh,c
   411  002B7A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   412  002B7C  6EF8               	movwf	tblptru,c
   413  002B7E  0009               	tblrd		*+	;fetch initializer
   414  002B80  CFF5 F04E          	movff	tablat,__pdataCOMRAM
   415  002B84  0009               	tblrd		*+	;fetch initializer
   416  002B86  CFF5 F04F          	movff	tablat,__pdataCOMRAM+1
   417                           
   418                           ; Clear objects allocated to BANK0 (18 bytes)
   419  002B8A  EE00  F0B6         	lfsr	0,__pbssBANK0
   420  002B8E  0E12               	movlw	18
   421  002B90                     clear_0:
   422  002B90  6AEE               	clrf	postinc0,c
   423  002B92  06E8               	decf	wreg,f,c
   424  002B94  E1FD               	bnz	clear_0
   425                           
   426                           ; Clear objects allocated to COMRAM (11 bytes)
   427  002B96  EE00  F043         	lfsr	0,__pbssCOMRAM
   428  002B9A  0E0B               	movlw	11
   429  002B9C                     clear_1:
   430  002B9C  6AEE               	clrf	postinc0,c
   431  002B9E  06E8               	decf	wreg,f,c
   432  002BA0  E1FD               	bnz	clear_1
   433  002BA2                     end_of_initialization:
   434                           	opt stack 0
   435  002BA2                     __end_of__initialization:
   436                           	opt stack 0
   437  002BA2  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   438  002BA4  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   439  002BA6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   440  002BA8  6EF8               	movwf	tblptru,c
   441  002BAA  0100               	movlb	0
   442  002BAC  EF09  F009         	goto	_main	;jump to C main() function
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssCOMRAM
   453  000043                     __pbssCOMRAM:
   454                           	opt stack 0
   455  000043                     _cont:
   456                           	opt stack 0
   457  000043                     	ds	2
   458  000045                     func_timer2@cont2:
   459                           	opt stack 0
   460  000045                     	ds	2
   461  000047                     func_timer3@cont3:
   462                           	opt stack 0
   463  000047                     	ds	2
   464  000049                     _auxBorda:
   465                           	opt stack 0
   466  000049                     	ds	1
   467  00004A                     _auxTimer:
   468                           	opt stack 0
   469  00004A                     	ds	1
   470  00004B                     _auxTriacAcionado:
   471                           	opt stack 0
   472  00004B                     	ds	1
   473  00004C                     func_timer2@auxTriac2Acionado:
   474                           	opt stack 0
   475  00004C                     	ds	1
   476  00004D                     func_timer3@auxTriac3Acionado:
   477                           	opt stack 0
   478  00004D                     	ds	1
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488                           	psect	dataCOMRAM
   489  00004E                     __pdataCOMRAM:
   490                           	opt stack 0
   491  00004E                     _contTimer0:
   492                           	opt stack 0
   493  00004E                     	ds	2
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	bssBANK0
   504  0000B6                     __pbssBANK0:
   505                           	opt stack 0
   506  0000B6                     _CorrenteRMS:
   507                           	opt stack 0
   508  0000B6                     	ds	3
   509  0000B9                     _picoCorrente:
   510                           	opt stack 0
   511  0000B9                     	ds	3
   512  0000BC                     _CiclosIncrementoAcel:
   513                           	opt stack 0
   514  0000BC                     	ds	2
   515  0000BE                     _CiclosIncrementoDesac:
   516                           	opt stack 0
   517  0000BE                     	ds	2
   518  0000C0                     _ContCiclosIncremento:
   519                           	opt stack 0
   520  0000C0                     	ds	2
   521  0000C2                     _contCorrente:
   522                           	opt stack 0
   523  0000C2                     	ds	2
   524  0000C4                     _IniciaAceleracao:
   525                           	opt stack 0
   526  0000C4                     	ds	1
   527  0000C5                     _IniciaDesaceleracao:
   528                           	opt stack 0
   529  0000C5                     	ds	1
   530  0000C6                     _MotorLigado:
   531                           	opt stack 0
   532  0000C6                     	ds	1
   533  0000C7                     _passagemZero:
   534                           	opt stack 0
   535  0000C7                     	ds	1
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	dataBANK0
   546  0000C8                     __pdataBANK0:
   547                           	opt stack 0
   548  0000C8                     _TempoAceleracao:
   549                           	opt stack 0
   550  0000C8                     	ds	2
   551  0000CA                     _TempoChaveamentoInicial:
   552                           	opt stack 0
   553  0000CA                     	ds	2
   554  0000CC                     _TempoDesaceleracao:
   555                           	opt stack 0
   556  0000CC                     	ds	2
   557  0000CE                     _contTimer3:
   558                           	opt stack 0
   559  0000CE                     	ds	2
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1l	equ	0xFE1
   568                           
   569                           	psect	cstackBANK0
   570  000060                     __pcstackBANK0:
   571                           	opt stack 0
   572  000060                     ??___ftadd:
   573  000060                     ?___fttol:
   574                           	opt stack 0
   575  000060                     ___fttol@f1:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x0
   579  000060                     	ds	3
   580  000063                     ___ftadd@sign:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x3
   584  000063                     	ds	1
   585  000064                     ??___fttol:
   586  000064                     ___ftadd@exp2:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x4
   590  000064                     	ds	1
   591  000065                     ___ftadd@exp1:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x5
   595  000065                     	ds	1
   596  000066                     ?___ftsub:
   597                           	opt stack 0
   598  000066                     ___ftsub@f1:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x6
   602  000066                     	ds	3
   603  000069                     ___fttol@sign1:
   604                           	opt stack 0
   605  000069                     ___ftsub@f2:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x9
   609  000069                     	ds	1
   610  00006A                     ___fttol@lval:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0xA
   614  00006A                     	ds	4
   615  00006E                     ___fttol@exp1:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0xE
   619  00006E                     	ds	1
   620  00006F                     ?_sprintf:
   621                           	opt stack 0
   622  00006F                     sprintf@sp:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0xF
   626  00006F                     	ds	2
   627  000071                     sprintf@f:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x11
   631  000071                     	ds	5
   632  000076                     ??_sprintf:
   633                           
   634                           ; 1 bytes @ 0x16
   635  000076                     	ds	6
   636  00007C                     _sprintf$2127:
   637                           	opt stack 0
   638                           
   639                           ; 3 bytes @ 0x1C
   640  00007C                     	ds	3
   641  00007F                     sprintf@ap:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x1F
   645  00007F                     	ds	2
   646  000081                     sprintf@flag:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x21
   650  000081                     	ds	2
   651  000083                     sprintf@exp:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x23
   655  000083                     	ds	2
   656  000085                     sprintf@tmpval:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x25
   660  000085                     	ds	4
   661  000089                     sprintf@val:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x29
   665  000089                     	ds	4
   666  00008D                     sprintf@prec:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2D
   670  00008D                     	ds	2
   671  00008F                     sprintf@fval:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x2F
   675  00008F                     	ds	3
   676  000092                     sprintf@c:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x32
   680  000092                     	ds	1
   681  000093                     main@StringCorrente:
   682                           	opt stack 0
   683                           
   684                           ; 10 bytes @ 0x33
   685  000093                     	ds	10
   686  00009D                     main@StringTempo:
   687                           	opt stack 0
   688                           
   689                           ; 10 bytes @ 0x3D
   690  00009D                     	ds	10
   691  0000A7                     main@AcelAnterior:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x47
   695  0000A7                     	ds	2
   696  0000A9                     main@DesacelAnterior:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x49
   700  0000A9                     	ds	2
   701  0000AB                     main@DelayBT1:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x4B
   705  0000AB                     	ds	1
   706  0000AC                     main@DelayBT2:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x4C
   710  0000AC                     	ds	1
   711  0000AD                     main@DelayBT3:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x4D
   715  0000AD                     	ds	1
   716  0000AE                     main@DelayBT4:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x4E
   720  0000AE                     	ds	1
   721  0000AF                     main@BloqBT1:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x4F
   725  0000AF                     	ds	1
   726  0000B0                     main@BloqBT2:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x50
   730  0000B0                     	ds	1
   731  0000B1                     main@BloqBT3:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x51
   735  0000B1                     	ds	1
   736  0000B2                     main@BloqBT4:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x52
   740  0000B2                     	ds	1
   741  0000B3                     main@LeituraAN0:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x53
   745  0000B3                     	ds	3
   746                           tblptru	equ	0xFF8
   747                           tblptrh	equ	0xFF7
   748                           tblptrl	equ	0xFF6
   749                           tablat	equ	0xFF5
   750                           postinc0	equ	0xFEE
   751                           wreg	equ	0xFE8
   752                           postdec1	equ	0xFE5
   753                           fsr1l	equ	0xFE1
   754                           
   755                           	psect	cstackCOMRAM
   756  000001                     __pcstackCOMRAM:
   757                           	opt stack 0
   758  000001                     ??_func_timer0_acel:
   759  000001                     ??_func_timer0_desacel:
   760  000001                     ??_func_timer2:
   761  000001                     ??_func_timer3:
   762  000001                     
   763                           ; 1 bytes @ 0x0
   764  000001                     	ds	1
   765  000002                     ??_altaPrioridade:
   766                           
   767                           ; 1 bytes @ 0x1
   768  000002                     	ds	14
   769  000010                     ??_SetDDRamAddr:
   770  000010                     ??_SetChanADC:
   771  000010                     ??_isdigit:
   772  000010                     ?_ReadADC:
   773                           	opt stack 0
   774  000010                     ?___awmod:
   775                           	opt stack 0
   776  000010                     ?___ftpack:
   777                           	opt stack 0
   778  000010                     ?___ftneg:
   779                           	opt stack 0
   780  000010                     ?__tdiv_to_l_:
   781                           	opt stack 0
   782  000010                     ?__div_to_l_:
   783                           	opt stack 0
   784  000010                     ?___lldiv:
   785                           	opt stack 0
   786  000010                     WriteCmdXLCD@cmd:
   787                           	opt stack 0
   788  000010                     WriteDataXLCD@data:
   789                           	opt stack 0
   790  000010                     OpenADC@config2:
   791                           	opt stack 0
   792  000010                     OpenTimer0@config:
   793                           	opt stack 0
   794  000010                     OpenTimer2@config:
   795                           	opt stack 0
   796  000010                     OpenTimer3@config:
   797                           	opt stack 0
   798  000010                     Delay1KTCYx@unit:
   799                           	opt stack 0
   800  000010                     ___awmod@dividend:
   801                           	opt stack 0
   802  000010                     __div_to_l_@f1:
   803                           	opt stack 0
   804  000010                     ___ftpack@arg:
   805                           	opt stack 0
   806  000010                     __tdiv_to_l_@f1:
   807                           	opt stack 0
   808  000010                     ___ftge@ff1:
   809                           	opt stack 0
   810  000010                     ___ftneg@f1:
   811                           	opt stack 0
   812  000010                     ___lldiv@dividend:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0xF
   816  000010                     	ds	1
   817  000011                     OpenADC@portconfig:
   818                           	opt stack 0
   819  000011                     SetChanADC@channel:
   820                           	opt stack 0
   821  000011                     _isdigit$1768:
   822                           	opt stack 0
   823  000011                     putsXLCD@buffer:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x10
   827  000011                     	ds	1
   828  000012                     ??_OpenADC:
   829  000012                     ??_ReadADC:
   830  000012                     isdigit@c:
   831                           	opt stack 0
   832  000012                     ___awmod@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x11
   836  000012                     	ds	1
   837  000013                     SetDDRamAddr@DDaddr:
   838                           	opt stack 0
   839  000013                     ___ftpack@exp:
   840                           	opt stack 0
   841  000013                     __div_to_l_@f2:
   842                           	opt stack 0
   843  000013                     __tdiv_to_l_@f2:
   844                           	opt stack 0
   845  000013                     ___ftge@ff2:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x12
   849  000013                     	ds	1
   850  000014                     ??_OpenXLCD:
   851  000014                     OpenADC@config:
   852                           	opt stack 0
   853  000014                     ___awmod@counter:
   854                           	opt stack 0
   855  000014                     ___ftpack@sign:
   856                           	opt stack 0
   857  000014                     ___lldiv@divisor:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x13
   861  000014                     	ds	1
   862  000015                     ??___ftpack:
   863  000015                     OpenXLCD@lcdtype:
   864                           	opt stack 0
   865  000015                     ___awmod@sign:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x14
   869  000015                     	ds	1
   870  000016                     ??__tdiv_to_l_:
   871  000016                     ??___ftge:
   872  000016                     ?___awdiv:
   873                           	opt stack 0
   874  000016                     ___awdiv@dividend:
   875                           	opt stack 0
   876  000016                     __div_to_l_@quot:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x15
   880  000016                     	ds	2
   881  000018                     ?___lltoft:
   882                           	opt stack 0
   883  000018                     ___awdiv@divisor:
   884                           	opt stack 0
   885  000018                     ___lldiv@quotient:
   886                           	opt stack 0
   887  000018                     ___lltoft@c:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x17
   891  000018                     	ds	1
   892  000019                     __tdiv_to_l_@quot:
   893                           	opt stack 0
   894                           
   895                           ; 4 bytes @ 0x18
   896  000019                     	ds	1
   897  00001A                     ___awdiv@counter:
   898                           	opt stack 0
   899  00001A                     __div_to_l_@cntr:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x19
   903  00001A                     	ds	1
   904  00001B                     ___awdiv@sign:
   905                           	opt stack 0
   906  00001B                     __div_to_l_@exp1:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1A
   910  00001B                     	ds	1
   911  00001C                     ??___lltoft:
   912  00001C                     ___lldiv@counter:
   913                           	opt stack 0
   914  00001C                     ___awdiv@quotient:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x1B
   918  00001C                     	ds	1
   919  00001D                     ?___llmod:
   920                           	opt stack 0
   921  00001D                     __tdiv_to_l_@cntr:
   922                           	opt stack 0
   923  00001D                     ___llmod@dividend:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x1C
   927  00001D                     	ds	1
   928  00001E                     ?___wmul:
   929                           	opt stack 0
   930  00001E                     __tdiv_to_l_@exp1:
   931                           	opt stack 0
   932  00001E                     ___wmul@multiplier:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x1D
   936  00001E                     	ds	2
   937  000020                     ___lltoft@exp:
   938                           	opt stack 0
   939  000020                     ___wmul@multiplicand:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x1F
   943  000020                     	ds	1
   944  000021                     ___llmod@divisor:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x20
   948  000021                     	ds	1
   949  000022                     ___wmul@product:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x21
   953  000022                     	ds	2
   954  000024                     ?___ftmul:
   955                           	opt stack 0
   956  000024                     ?___awtoft:
   957                           	opt stack 0
   958  000024                     ___awtoft@c:
   959                           	opt stack 0
   960  000024                     ___ftmul@f1:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x23
   964  000024                     	ds	1
   965  000025                     ___llmod@counter:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x24
   969  000025                     	ds	2
   970  000027                     ___awtoft@sign:
   971                           	opt stack 0
   972  000027                     ___ftmul@f2:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0x26
   976  000027                     	ds	3
   977  00002A                     ??___ftmul:
   978                           
   979                           ; 1 bytes @ 0x29
   980  00002A                     	ds	3
   981  00002D                     ___ftmul@exp:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x2C
   985  00002D                     	ds	1
   986  00002E                     ___ftmul@f3_as_product:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x2D
   990  00002E                     	ds	3
   991  000031                     ___ftmul@cntr:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x30
   995  000031                     	ds	1
   996  000032                     ___ftmul@sign:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x31
  1000  000032                     	ds	1
  1001  000033                     ?___ftdiv:
  1002                           	opt stack 0
  1003  000033                     ?_fround:
  1004                           	opt stack 0
  1005  000033                     ?_scale:
  1006                           	opt stack 0
  1007  000033                     ___ftdiv@f1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x32
  1011  000033                     	ds	3
  1012  000036                     ___ftdiv@f2:
  1013                           	opt stack 0
  1014  000036                     _fround$2125:
  1015                           	opt stack 0
  1016  000036                     _scale$2126:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x35
  1020  000036                     	ds	3
  1021  000039                     ??___ftdiv:
  1022  000039                     scale@scl:
  1023                           	opt stack 0
  1024  000039                     _fround$2124:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x38
  1028  000039                     	ds	3
  1029  00003C                     fround@prec:
  1030                           	opt stack 0
  1031  00003C                     ___ftdiv@cntr:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x3B
  1035  00003C                     	ds	1
  1036  00003D                     ?___ftadd:
  1037                           	opt stack 0
  1038  00003D                     ___ftadd@f1:
  1039                           	opt stack 0
  1040  00003D                     ___ftdiv@f3:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0x3C
  1044  00003D                     	ds	3
  1045  000040                     ___ftdiv@exp:
  1046                           	opt stack 0
  1047  000040                     ___ftadd@f2:
  1048                           	opt stack 0
  1049                           
  1050                           ; 3 bytes @ 0x3F
  1051  000040                     	ds	1
  1052  000041                     ___ftdiv@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x40
  1056  000041                     	ds	2
  1057  000043                     tblptru	equ	0xFF8
  1058                           tblptrh	equ	0xFF7
  1059                           tblptrl	equ	0xFF6
  1060                           tablat	equ	0xFF5
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           
  1066                           ; 1 bytes @ 0x42
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 312 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  StringTempo    10   61[BANK0 ] unsigned char [10]
  1077 ;;  StringCorren   10   51[BANK0 ] unsigned char [10]
  1078 ;;  LeituraAN0      3   83[BANK0 ] float 
  1079 ;;  DesacelAnter    2   73[BANK0 ] int 
  1080 ;;  AcelAnterior    2   71[BANK0 ] int 
  1081 ;;  BloqBT4         1   82[BANK0 ] unsigned char 
  1082 ;;  BloqBT3         1   81[BANK0 ] unsigned char 
  1083 ;;  BloqBT2         1   80[BANK0 ] unsigned char 
  1084 ;;  BloqBT1         1   79[BANK0 ] unsigned char 
  1085 ;;  DelayBT4        1   78[BANK0 ] unsigned char 
  1086 ;;  DelayBT3        1   77[BANK0 ] unsigned char 
  1087 ;;  DelayBT2        1   76[BANK0 ] unsigned char 
  1088 ;;  DelayBT1        1   75[BANK0 ] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1098 ;;      Params:         0       0       0       0       0       0       0       0       0
  1099 ;;      Locals:         0      35       0       0       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1101 ;;      Totals:         0      35       0       0       0       0       0       0       0
  1102 ;;Total ram usage:       35 bytes
  1103 ;; Hardware stack levels required when called:    6
  1104 ;; This function calls:
  1105 ;;		_BusyADC
  1106 ;;		_ConvertADC
  1107 ;;		_InicializaLCD
  1108 ;;		_OpenADC
  1109 ;;		_OpenTimer0
  1110 ;;		_OpenTimer2
  1111 ;;		_OpenTimer3
  1112 ;;		_ReadADC
  1113 ;;		_SetChanADC
  1114 ;;		_SetDDRamAddr
  1115 ;;		___awtoft
  1116 ;;		___ftdiv
  1117 ;;		___ftge
  1118 ;;		___ftmul
  1119 ;;		___fttol
  1120 ;;		___wmul
  1121 ;;		_parada_forcada
  1122 ;;		_putsXLCD
  1123 ;;		_sprintf
  1124 ;; This function is called by:
  1125 ;;		Startup code after reset
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text0
  1130  001212                     __ptext0:
  1131                           	opt stack 0
  1132  001212                     _main:
  1133                           	opt stack 25
  1134                           
  1135                           ;main.c: 313: OSCCON = 0b01110111;
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;incstack = 0
  1139  001212  0E77               	movlw	119
  1140  001214  6ED3               	movwf	4051,c	;volatile
  1141                           
  1142                           ;main.c: 314: TRISE = 0;
  1143  001216  0E00               	movlw	0
  1144  001218  6E96               	movwf	3990,c	;volatile
  1145                           
  1146                           ;main.c: 315: LATE = 0;
  1147  00121A  0E00               	movlw	0
  1148  00121C  6E8D               	movwf	3981,c	;volatile
  1149                           
  1150                           ;main.c: 316: TRISC = 0b00000010;
  1151  00121E  0E02               	movlw	2
  1152  001220  6E94               	movwf	3988,c	;volatile
  1153                           
  1154                           ;main.c: 317: LATC = 0;
  1155  001222  0E00               	movlw	0
  1156  001224  6E8B               	movwf	3979,c	;volatile
  1157                           
  1158                           ;main.c: 318: ADCON1 = 0x0F;
  1159  001226  0E0F               	movlw	15
  1160  001228  6EC1               	movwf	4033,c	;volatile
  1161                           
  1162                           ;main.c: 319: TRISA = 255;
  1163  00122A  6892               	setf	3986,c	;volatile
  1164                           
  1165                           ;main.c: 320: TempoAtual = TempoChaveamentoInicial;
  1166  00122C  C0CA  F0D0         	movff	_TempoChaveamentoInicial,_TempoAtual
  1167  001230  C0CB  F0D1         	movff	_TempoChaveamentoInicial+1,_TempoAtual+1
  1168                           
  1169                           ;main.c: 321: char StringTempo[10],StringCorrente[10];
  1170                           ;main.c: 322: float LeituraAN0;
  1171                           ;main.c: 323: char DelayBT1,DelayBT2,DelayBT3,DelayBT4;
  1172                           ;main.c: 324: char BloqBT1,BloqBT2,BloqBT3,BloqBT4;
  1173                           ;main.c: 325: int AcelAnterior,DesacelAnterior;
  1174                           ;main.c: 328: OpenTimer0 (0b11111111 & 0b10111111 & 0b11011111 & 0b11110000);
  1175  001234  0E90               	movlw	144
  1176  001236  ECF0  F017         	call	_OpenTimer0
  1177                           
  1178                           ;main.c: 330: OpenTimer2(0b11111111 & 0b11001111 & 0b11111101);
  1179  00123A  0ECD               	movlw	205
  1180  00123C  EC0F  F018         	call	_OpenTimer2
  1181                           
  1182                           ;main.c: 331: PR2 = 4;
  1183  001240  0E04               	movlw	4
  1184  001242  6ECB               	movwf	4043,c	;volatile
  1185                           
  1186                           ;main.c: 333: OpenTimer3(0b11111111 & 0b11111111 & 0b11111101 & 0b11111111 & 0b11011111)
      +                          ;
  1187  001244  0EDD               	movlw	221
  1188  001246  ECA2  F017         	call	_OpenTimer3
  1189                           
  1190                           ;main.c: 334: TMR3=contTimer3;
  1191  00124A  C0CE  FFB2         	movff	_contTimer3,4018	;volatile
  1192  00124E  C0CF  FFB3         	movff	_contTimer3+1,4019	;volatile
  1193                           
  1194                           ;main.c: 337: TMR1IE = 0;
  1195  001252  909D               	bcf	3997,0,c	;volatile
  1196                           
  1197                           ;main.c: 338: TMR2IE = 0;
  1198  001254  929D               	bcf	3997,1,c	;volatile
  1199                           
  1200                           ;main.c: 339: TMR3IE = 0;
  1201  001256  92A0               	bcf	4000,1,c	;volatile
  1202                           
  1203                           ;main.c: 342: TMR1IP = 1;
  1204  001258  809F               	bsf	3999,0,c	;volatile
  1205                           
  1206                           ;main.c: 343: TMR2IP = 1;
  1207  00125A  829F               	bsf	3999,1,c	;volatile
  1208                           
  1209                           ;main.c: 344: TMR3IP = 1;
  1210  00125C  82A2               	bsf	4002,1,c	;volatile
  1211                           
  1212                           ;main.c: 346: INTCON2bits.TMR0IP=1;
  1213  00125E  84F1               	bsf	intcon2,2,c	;volatile
  1214                           
  1215                           ;main.c: 350: INTCON2bits.INTEDG0=1;
  1216  001260  8CF1               	bsf	intcon2,6,c	;volatile
  1217                           
  1218                           ;main.c: 351: INTCON2bits.RBPU=1;
  1219  001262  8EF1               	bsf	intcon2,7,c	;volatile
  1220                           
  1221                           ;main.c: 352: INTCON2bits.INTEDG1=1;
  1222  001264  8AF1               	bsf	intcon2,5,c	;volatile
  1223                           
  1224                           ;main.c: 353: INTCON2bits.INTEDG2=1;
  1225  001266  88F1               	bsf	intcon2,4,c	;volatile
  1226                           
  1227                           ;main.c: 355: INT1IP=1;
  1228  001268  8CF0               	bsf	intcon3,6,c	;volatile
  1229                           
  1230                           ;main.c: 356: INT1IE=1;
  1231  00126A  86F0               	bsf	intcon3,3,c	;volatile
  1232                           
  1233                           ;main.c: 357: INT2IP=1;
  1234  00126C  8EF0               	bsf	intcon3,7,c	;volatile
  1235                           
  1236                           ;main.c: 358: INT2IE=1;
  1237  00126E  88F0               	bsf	intcon3,4,c	;volatile
  1238                           
  1239                           ;main.c: 361: INTCON = 0b01000000;
  1240  001270  0E40               	movlw	64
  1241  001272  6EF2               	movwf	intcon,c	;volatile
  1242                           
  1243                           ;main.c: 367: OpenADC(0b11101111 &
  1244                           ;main.c: 370: 0b11111111 &
  1245                           ;main.c: 372: 0b11111011,
  1246                           ;main.c: 374: 0b10000111 &
  1247                           ;main.c: 375: 0b01111111 &
  1248                           ;main.c: 376: 0b11111100,
  1249                           ;main.c: 378: 0b11111110);
  1250  001274  0E04               	movlw	4
  1251  001276  6E10               	movwf	OpenADC@config2,c
  1252  001278  0EFE               	movlw	254
  1253  00127A  6E11               	movwf	OpenADC@portconfig,c
  1254  00127C  0EEB               	movlw	235
  1255  00127E  ECD8  F015         	call	_OpenADC
  1256                           
  1257                           ;main.c: 381: InicializaLCD();
  1258  001282  ECB7  F017         	call	_InicializaLCD	;wreg free
  1259                           
  1260                           ;main.c: 382: SetDDRamAddr(0x00);
  1261  001286  0E00               	movlw	0
  1262  001288  ECBD  F016         	call	_SetDDRamAddr
  1263                           
  1264                           ;main.c: 383: putsXLCD("Corrente: 0.00A");
  1265  00128C  0E99               	movlw	low STR_3
  1266  00128E  6E11               	movwf	putsXLCD@buffer,c
  1267  001290  0E08               	movlw	high STR_3
  1268  001292  6E12               	movwf	putsXLCD@buffer+1,c
  1269  001294  EC35  F016         	call	_putsXLCD	;wreg free
  1270                           
  1271                           ;main.c: 384: SetDDRamAddr(0x40);
  1272  001298  0E40               	movlw	64
  1273  00129A  ECBD  F016         	call	_SetDDRamAddr
  1274                           
  1275                           ;main.c: 385: sprintf(StringTempo, "Acl:%d", TempoAceleracao);
  1276  00129E  0E9D               	movlw	low main@StringTempo
  1277  0012A0  0100               	movlb	0	; () banked
  1278  0012A2  6F6F               	movwf	sprintf@sp& (0+255),b
  1279  0012A4  0E00               	movlw	high main@StringTempo
  1280  0012A6  0100               	movlb	0	; () banked
  1281  0012A8  6F70               	movwf	(sprintf@sp+1)& (0+255),b
  1282  0012AA  0EB0               	movlw	low STR_4
  1283  0012AC  0100               	movlb	0	; () banked
  1284  0012AE  6F71               	movwf	sprintf@f& (0+255),b
  1285  0012B0  0E08               	movlw	high STR_4
  1286  0012B2  0100               	movlb	0	; () banked
  1287  0012B4  6F72               	movwf	(sprintf@f+1)& (0+255),b
  1288  0012B6  C0C8  F073         	movff	_TempoAceleracao,?_sprintf+4
  1289  0012BA  C0C9  F074         	movff	_TempoAceleracao+1,?_sprintf+5
  1290  0012BE  EC65  F004         	call	_sprintf	;wreg free
  1291                           
  1292                           ;main.c: 386: putsXLCD(StringTempo);
  1293  0012C2  0E9D               	movlw	low main@StringTempo
  1294  0012C4  6E11               	movwf	putsXLCD@buffer,c
  1295  0012C6  0E00               	movlw	high main@StringTempo
  1296  0012C8  6E12               	movwf	putsXLCD@buffer+1,c
  1297  0012CA  EC35  F016         	call	_putsXLCD	;wreg free
  1298                           
  1299                           ;main.c: 387: putsXLCD("s  ");
  1300  0012CE  0EC0               	movlw	low (STR_10+2)
  1301  0012D0  6E11               	movwf	putsXLCD@buffer,c
  1302  0012D2  0E08               	movlw	high (STR_10+2)
  1303  0012D4  6E12               	movwf	putsXLCD@buffer+1,c
  1304  0012D6  EC35  F016         	call	_putsXLCD	;wreg free
  1305                           
  1306                           ;main.c: 388: SetDDRamAddr(0x48);
  1307  0012DA  0E48               	movlw	72
  1308  0012DC  ECBD  F016         	call	_SetDDRamAddr
  1309                           
  1310                           ;main.c: 389: sprintf(StringTempo, "Des:%d", TempoDesaceleracao);
  1311  0012E0  0E9D               	movlw	low main@StringTempo
  1312  0012E2  0100               	movlb	0	; () banked
  1313  0012E4  6F6F               	movwf	sprintf@sp& (0+255),b
  1314  0012E6  0E00               	movlw	high main@StringTempo
  1315  0012E8  0100               	movlb	0	; () banked
  1316  0012EA  6F70               	movwf	(sprintf@sp+1)& (0+255),b
  1317  0012EC  0EB7               	movlw	low STR_6
  1318  0012EE  0100               	movlb	0	; () banked
  1319  0012F0  6F71               	movwf	sprintf@f& (0+255),b
  1320  0012F2  0E08               	movlw	high STR_6
  1321  0012F4  0100               	movlb	0	; () banked
  1322  0012F6  6F72               	movwf	(sprintf@f+1)& (0+255),b
  1323  0012F8  C0CC  F073         	movff	_TempoDesaceleracao,?_sprintf+4
  1324  0012FC  C0CD  F074         	movff	_TempoDesaceleracao+1,?_sprintf+5
  1325  001300  EC65  F004         	call	_sprintf	;wreg free
  1326                           
  1327                           ;main.c: 390: putsXLCD(StringTempo);
  1328  001304  0E9D               	movlw	low main@StringTempo
  1329  001306  6E11               	movwf	putsXLCD@buffer,c
  1330  001308  0E00               	movlw	high main@StringTempo
  1331  00130A  6E12               	movwf	putsXLCD@buffer+1,c
  1332  00130C  EC35  F016         	call	_putsXLCD	;wreg free
  1333                           
  1334                           ;main.c: 391: putsXLCD("s  ");
  1335  001310  0EC0               	movlw	low (STR_10+2)
  1336  001312  6E11               	movwf	putsXLCD@buffer,c
  1337  001314  0E08               	movlw	high (STR_10+2)
  1338  001316  6E12               	movwf	putsXLCD@buffer+1,c
  1339  001318  EC35  F016         	call	_putsXLCD	;wreg free
  1340  00131C                     l5040:
  1341                           
  1342                           ;main.c: 406: if (contCorrente>=10){
  1343  00131C  0100               	movlb	0	; () banked
  1344  00131E  BFC3               	btfsc	(_contCorrente+1)& (0+255),7,b
  1345  001320  D05F               	goto	l5054
  1346  001322  0100               	movlb	0	; () banked
  1347  001324  51C3               	movf	(_contCorrente+1)& (0+255),w,b
  1348  001326  E105               	bnz	u5560
  1349  001328  0E0A               	movlw	10
  1350  00132A  0100               	movlb	0	; () banked
  1351  00132C  5DC2               	subwf	_contCorrente& (0+255),w,b
  1352  00132E  A0D8               	btfss	status,0,c
  1353  001330  D057               	goto	l5054
  1354  001332                     u5560:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 407: contCorrente=0;
  1358  001332  0E00               	movlw	0
  1359  001334  0100               	movlb	0	; () banked
  1360  001336  6FC3               	movwf	(_contCorrente+1)& (0+255),b
  1361  001338  0E00               	movlw	0
  1362  00133A  6FC2               	movwf	_contCorrente& (0+255),b
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 408: SetChanADC(0b10000111);
  1366  00133C  0E87               	movlw	135
  1367  00133E  EC2A  F018         	call	_SetChanADC
  1368                           
  1369                           ;main.c: 409: ConvertADC();
  1370  001342  EC52  F018         	call	_ConvertADC	;wreg free
  1371  001346                     l5048:
  1372  001346  EC44  F018         	call	_BusyADC	;wreg free
  1373  00134A  0900               	iorlw	0
  1374  00134C  A4D8               	btfss	status,2,c
  1375  00134E  D7FB               	goto	l5048
  1376  001350                     l313:
  1377  001350  A2AC               	btfss	4012,1,c	;volatile
  1378  001352  D7FE               	goto	l313
  1379                           
  1380                           ;main.c: 412: LeituraAN0 = ReadADC();
  1381  001354  EC3D  F018         	call	_ReadADC	;wreg free
  1382  001358  C010  F024         	movff	?_ReadADC,___awtoft@c
  1383  00135C  C011  F025         	movff	?_ReadADC+1,___awtoft@c+1
  1384  001360  EC86  F017         	call	___awtoft	;wreg free
  1385  001364  C024  F0B3         	movff	?___awtoft,main@LeituraAN0
  1386  001368  C025  F0B4         	movff	?___awtoft+1,main@LeituraAN0+1
  1387  00136C  C026  F0B5         	movff	?___awtoft+2,main@LeituraAN0+2
  1388                           
  1389                           ;main.c: 413: LeituraAN0 = (LeituraAN0*5)/(3*1024);
  1390  001370  0E00               	movlw	0
  1391  001372  6E27               	movwf	___ftmul@f2,c
  1392  001374  0EA0               	movlw	160
  1393  001376  6E28               	movwf	___ftmul@f2+1,c
  1394  001378  0E40               	movlw	64
  1395  00137A  6E29               	movwf	___ftmul@f2+2,c
  1396  00137C  C0B3  F024         	movff	main@LeituraAN0,___ftmul@f1
  1397  001380  C0B4  F025         	movff	main@LeituraAN0+1,___ftmul@f1+1
  1398  001384  C0B5  F026         	movff	main@LeituraAN0+2,___ftmul@f1+2
  1399  001388  ECA5  F011         	call	___ftmul	;wreg free
  1400  00138C  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1401  001390  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1402  001394  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1403  001398  0E00               	movlw	0
  1404  00139A  6E36               	movwf	___ftdiv@f2,c
  1405  00139C  0E40               	movlw	64
  1406  00139E  6E37               	movwf	___ftdiv@f2+1,c
  1407  0013A0  0E45               	movlw	69
  1408  0013A2  6E38               	movwf	___ftdiv@f2+2,c
  1409  0013A4  EC1F  F012         	call	___ftdiv	;wreg free
  1410  0013A8  C033  F0B3         	movff	?___ftdiv,main@LeituraAN0
  1411  0013AC  C034  F0B4         	movff	?___ftdiv+1,main@LeituraAN0+1
  1412  0013B0  C035  F0B5         	movff	?___ftdiv+2,main@LeituraAN0+2
  1413                           
  1414                           ;main.c: 414: if (LeituraAN0>picoCorrente){
  1415  0013B4  C0B9  F010         	movff	_picoCorrente,___ftge@ff1
  1416  0013B8  C0BA  F011         	movff	_picoCorrente+1,___ftge@ff1+1
  1417  0013BC  C0BB  F012         	movff	_picoCorrente+2,___ftge@ff1+2
  1418  0013C0  C0B3  F013         	movff	main@LeituraAN0,___ftge@ff2
  1419  0013C4  C0B4  F014         	movff	main@LeituraAN0+1,___ftge@ff2+1
  1420  0013C8  C0B5  F015         	movff	main@LeituraAN0+2,___ftge@ff2+2
  1421  0013CC  EC73  F014         	call	___ftge	;wreg free
  1422  0013D0  B0D8               	btfsc	status,0,c
  1423  0013D2  D006               	goto	l5054
  1424                           
  1425                           ;main.c: 415: picoCorrente=LeituraAN0;
  1426  0013D4  C0B3  F0B9         	movff	main@LeituraAN0,_picoCorrente
  1427  0013D8  C0B4  F0BA         	movff	main@LeituraAN0+1,_picoCorrente+1
  1428  0013DC  C0B5  F0BB         	movff	main@LeituraAN0+2,_picoCorrente+2
  1429  0013E0                     l5054:
  1430                           
  1431                           ;main.c: 416: }
  1432                           ;main.c: 417: }
  1433                           ;main.c: 419: if (passagemZero>=50){
  1434  0013E0  0E31               	movlw	49
  1435  0013E2  0100               	movlb	0	; () banked
  1436  0013E4  65C7               	cpfsgt	_passagemZero& (0+255),b
  1437  0013E6  D054               	goto	l5074
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 420: passagemZero=0;
  1441  0013E8  0E00               	movlw	0
  1442  0013EA  0100               	movlb	0	; () banked
  1443  0013EC  6FC7               	movwf	_passagemZero& (0+255),b
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;main.c: 421: CorrenteRMS=picoCorrente/1.4142;
  1447  0013EE  C0B9  F033         	movff	_picoCorrente,___ftdiv@f1
  1448  0013F2  C0BA  F034         	movff	_picoCorrente+1,___ftdiv@f1+1
  1449  0013F6  C0BB  F035         	movff	_picoCorrente+2,___ftdiv@f1+2
  1450  0013FA  0E05               	movlw	5
  1451  0013FC  6E36               	movwf	___ftdiv@f2,c
  1452  0013FE  0EB5               	movlw	181
  1453  001400  6E37               	movwf	___ftdiv@f2+1,c
  1454  001402  0E3F               	movlw	63
  1455  001404  6E38               	movwf	___ftdiv@f2+2,c
  1456  001406  EC1F  F012         	call	___ftdiv	;wreg free
  1457  00140A  C033  F0B6         	movff	?___ftdiv,_CorrenteRMS
  1458  00140E  C034  F0B7         	movff	?___ftdiv+1,_CorrenteRMS+1
  1459  001412  C035  F0B8         	movff	?___ftdiv+2,_CorrenteRMS+2
  1460                           
  1461                           ;main.c: 422: SetDDRamAddr(0x0A);
  1462  001416  0E0A               	movlw	10
  1463  001418  ECBD  F016         	call	_SetDDRamAddr
  1464                           
  1465                           ;main.c: 423: sprintf(StringCorrente, "%.2fA ", CorrenteRMS);
  1466  00141C  0E93               	movlw	low main@StringCorrente
  1467  00141E  0100               	movlb	0	; () banked
  1468  001420  6F6F               	movwf	sprintf@sp& (0+255),b
  1469  001422  0E00               	movlw	high main@StringCorrente
  1470  001424  0100               	movlb	0	; () banked
  1471  001426  6F70               	movwf	(sprintf@sp+1)& (0+255),b
  1472  001428  0EA9               	movlw	low STR_8
  1473  00142A  0100               	movlb	0	; () banked
  1474  00142C  6F71               	movwf	sprintf@f& (0+255),b
  1475  00142E  0E08               	movlw	high STR_8
  1476  001430  0100               	movlb	0	; () banked
  1477  001432  6F72               	movwf	(sprintf@f+1)& (0+255),b
  1478  001434  C0B6  F073         	movff	_CorrenteRMS,?_sprintf+4
  1479  001438  C0B7  F074         	movff	_CorrenteRMS+1,?_sprintf+5
  1480  00143C  C0B8  F075         	movff	_CorrenteRMS+2,?_sprintf+6
  1481  001440  EC65  F004         	call	_sprintf	;wreg free
  1482                           
  1483                           ;main.c: 424: putsXLCD(StringCorrente);
  1484  001444  0E93               	movlw	low main@StringCorrente
  1485  001446  6E11               	movwf	putsXLCD@buffer,c
  1486  001448  0E00               	movlw	high main@StringCorrente
  1487  00144A  6E12               	movwf	putsXLCD@buffer+1,c
  1488  00144C  EC35  F016         	call	_putsXLCD	;wreg free
  1489                           
  1490                           ;main.c: 425: if (CorrenteRMS>1 && MotorLigado==1){
  1491  001450  0E00               	movlw	0
  1492  001452  6E10               	movwf	___ftge@ff1,c
  1493  001454  0E80               	movlw	128
  1494  001456  6E11               	movwf	___ftge@ff1+1,c
  1495  001458  0E3F               	movlw	63
  1496  00145A  6E12               	movwf	___ftge@ff1+2,c
  1497  00145C  C0B6  F013         	movff	_CorrenteRMS,___ftge@ff2
  1498  001460  C0B7  F014         	movff	_CorrenteRMS+1,___ftge@ff2+1
  1499  001464  C0B8  F015         	movff	_CorrenteRMS+2,___ftge@ff2+2
  1500  001468  EC73  F014         	call	___ftge	;wreg free
  1501  00146C  B0D8               	btfsc	status,0,c
  1502  00146E  D007               	goto	l5072
  1503  001470  0100               	movlb	0	; () banked
  1504  001472  05C6               	decf	_MotorLigado& (0+255),w,b
  1505  001474  A4D8               	btfss	status,2,c
  1506  001476  D003               	goto	l5072
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 426: parada_forcada();
  1510  001478  EC0C  F017         	call	_parada_forcada	;wreg free
  1511  00147C                     l319:
  1512  00147C  D7FF               	goto	l319
  1513  00147E                     l5072:
  1514                           
  1515                           ;main.c: 428: }
  1516                           ;main.c: 429: picoCorrente=0;
  1517  00147E  0E00               	movlw	0
  1518  001480  0100               	movlb	0	; () banked
  1519  001482  6FB9               	movwf	_picoCorrente& (0+255),b
  1520  001484  0E00               	movlw	0
  1521  001486  0100               	movlb	0	; () banked
  1522  001488  6FBA               	movwf	(_picoCorrente+1)& (0+255),b
  1523  00148A  0E00               	movlw	0
  1524  00148C  0100               	movlb	0	; () banked
  1525  00148E  6FBB               	movwf	(_picoCorrente+2)& (0+255),b
  1526  001490                     l5074:
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 430: }
  1530                           ;main.c: 433: CiclosIncrementoAcel = (TempoAceleracao*1000)/(8.3333333*24);
  1531  001490  0E00               	movlw	0
  1532  001492  6E36               	movwf	___ftdiv@f2,c
  1533  001494  0E48               	movlw	72
  1534  001496  6E37               	movwf	___ftdiv@f2+1,c
  1535  001498  0E43               	movlw	67
  1536  00149A  6E38               	movwf	___ftdiv@f2+2,c
  1537  00149C  C0C8  F01E         	movff	_TempoAceleracao,___wmul@multiplier
  1538  0014A0  C0C9  F01F         	movff	_TempoAceleracao+1,___wmul@multiplier+1
  1539  0014A4  0E03               	movlw	3
  1540  0014A6  6E21               	movwf	___wmul@multiplicand+1,c
  1541  0014A8  0EE8               	movlw	232
  1542  0014AA  6E20               	movwf	___wmul@multiplicand,c
  1543  0014AC  ECCB  F017         	call	___wmul	;wreg free
  1544  0014B0  C01E  F024         	movff	?___wmul,___awtoft@c
  1545  0014B4  C01F  F025         	movff	?___wmul+1,___awtoft@c+1
  1546  0014B8  EC86  F017         	call	___awtoft	;wreg free
  1547  0014BC  C024  F033         	movff	?___awtoft,___ftdiv@f1
  1548  0014C0  C025  F034         	movff	?___awtoft+1,___ftdiv@f1+1
  1549  0014C4  C026  F035         	movff	?___awtoft+2,___ftdiv@f1+2
  1550  0014C8  EC1F  F012         	call	___ftdiv	;wreg free
  1551  0014CC  C033  F060         	movff	?___ftdiv,___fttol@f1
  1552  0014D0  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1553  0014D4  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1554  0014D8  ECD6  F00F         	call	___fttol	;wreg free
  1555  0014DC  C060  F0BC         	movff	?___fttol,_CiclosIncrementoAcel
  1556  0014E0  C061  F0BD         	movff	?___fttol+1,_CiclosIncrementoAcel+1
  1557                           
  1558                           ;main.c: 434: CiclosIncrementoDesac = (TempoDesaceleracao*1000)/(8.3333333*39);
  1559  0014E4  0E80               	movlw	128
  1560  0014E6  6E36               	movwf	___ftdiv@f2,c
  1561  0014E8  0EA2               	movlw	162
  1562  0014EA  6E37               	movwf	___ftdiv@f2+1,c
  1563  0014EC  0E43               	movlw	67
  1564  0014EE  6E38               	movwf	___ftdiv@f2+2,c
  1565  0014F0  C0CC  F01E         	movff	_TempoDesaceleracao,___wmul@multiplier
  1566  0014F4  C0CD  F01F         	movff	_TempoDesaceleracao+1,___wmul@multiplier+1
  1567  0014F8  0E03               	movlw	3
  1568  0014FA  6E21               	movwf	___wmul@multiplicand+1,c
  1569  0014FC  0EE8               	movlw	232
  1570  0014FE  6E20               	movwf	___wmul@multiplicand,c
  1571  001500  ECCB  F017         	call	___wmul	;wreg free
  1572  001504  C01E  F024         	movff	?___wmul,___awtoft@c
  1573  001508  C01F  F025         	movff	?___wmul+1,___awtoft@c+1
  1574  00150C  EC86  F017         	call	___awtoft	;wreg free
  1575  001510  C024  F033         	movff	?___awtoft,___ftdiv@f1
  1576  001514  C025  F034         	movff	?___awtoft+1,___ftdiv@f1+1
  1577  001518  C026  F035         	movff	?___awtoft+2,___ftdiv@f1+2
  1578  00151C  EC1F  F012         	call	___ftdiv	;wreg free
  1579  001520  C033  F060         	movff	?___ftdiv,___fttol@f1
  1580  001524  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1581  001528  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1582  00152C  ECD6  F00F         	call	___fttol	;wreg free
  1583  001530  C060  F0BE         	movff	?___fttol,_CiclosIncrementoDesac
  1584  001534  C061  F0BF         	movff	?___fttol+1,_CiclosIncrementoDesac+1
  1585                           
  1586                           ;main.c: 437: if (PORTAbits.RA2==0){
  1587  001538  B480               	btfsc	3968,2,c	;volatile
  1588  00153A  D006               	goto	l5082
  1589                           
  1590                           ;main.c: 438: DelayBT1 = 0;
  1591  00153C  0E00               	movlw	0
  1592  00153E  0100               	movlb	0	; () banked
  1593  001540  6FAB               	movwf	main@DelayBT1& (0+255),b
  1594                           
  1595                           ;main.c: 439: BloqBT1 = 0;
  1596  001542  0E00               	movlw	0
  1597  001544  0100               	movlb	0	; () banked
  1598  001546  6FAF               	movwf	main@BloqBT1& (0+255),b
  1599  001548                     l5082:
  1600                           
  1601                           ;main.c: 440: }
  1602                           ;main.c: 441: if (PORTAbits.RA3==0){
  1603  001548  B680               	btfsc	3968,3,c	;volatile
  1604  00154A  D006               	goto	l5086
  1605                           
  1606                           ;main.c: 442: DelayBT2 = 0;
  1607  00154C  0E00               	movlw	0
  1608  00154E  0100               	movlb	0	; () banked
  1609  001550  6FAC               	movwf	main@DelayBT2& (0+255),b
  1610                           
  1611                           ;main.c: 443: BloqBT2 = 0;
  1612  001552  0E00               	movlw	0
  1613  001554  0100               	movlb	0	; () banked
  1614  001556  6FB0               	movwf	main@BloqBT2& (0+255),b
  1615  001558                     l5086:
  1616                           
  1617                           ;main.c: 444: }
  1618                           ;main.c: 445: if (PORTAbits.RA4==0){
  1619  001558  B880               	btfsc	3968,4,c	;volatile
  1620  00155A  D006               	goto	l5090
  1621                           
  1622                           ;main.c: 446: DelayBT3 = 0;
  1623  00155C  0E00               	movlw	0
  1624  00155E  0100               	movlb	0	; () banked
  1625  001560  6FAD               	movwf	main@DelayBT3& (0+255),b
  1626                           
  1627                           ;main.c: 447: BloqBT3 = 0;
  1628  001562  0E00               	movlw	0
  1629  001564  0100               	movlb	0	; () banked
  1630  001566  6FB1               	movwf	main@BloqBT3& (0+255),b
  1631  001568                     l5090:
  1632                           
  1633                           ;main.c: 448: }
  1634                           ;main.c: 449: if (PORTAbits.RA5==0){
  1635  001568  BA80               	btfsc	3968,5,c	;volatile
  1636  00156A  D006               	goto	l5094
  1637                           
  1638                           ;main.c: 450: DelayBT4 = 0;
  1639  00156C  0E00               	movlw	0
  1640  00156E  0100               	movlb	0	; () banked
  1641  001570  6FAE               	movwf	main@DelayBT4& (0+255),b
  1642                           
  1643                           ;main.c: 451: BloqBT4 = 0;
  1644  001572  0E00               	movlw	0
  1645  001574  0100               	movlb	0	; () banked
  1646  001576  6FB2               	movwf	main@BloqBT4& (0+255),b
  1647  001578                     l5094:
  1648                           
  1649                           ;main.c: 452: }
  1650                           ;main.c: 454: if (PORTAbits.RA2==1)
  1651  001578  A480               	btfss	3968,2,c	;volatile
  1652  00157A  D002               	goto	l5098
  1653                           
  1654                           ;main.c: 455: DelayBT1++;
  1655  00157C  0100               	movlb	0	; () banked
  1656  00157E  2BAB               	incf	main@DelayBT1& (0+255),f,b
  1657  001580                     l5098:
  1658                           
  1659                           ;main.c: 456: if (PORTAbits.RA3==1)
  1660  001580  A680               	btfss	3968,3,c	;volatile
  1661  001582  D002               	goto	l5102
  1662                           
  1663                           ;main.c: 457: DelayBT2++;
  1664  001584  0100               	movlb	0	; () banked
  1665  001586  2BAC               	incf	main@DelayBT2& (0+255),f,b
  1666  001588                     l5102:
  1667                           
  1668                           ;main.c: 458: if (PORTAbits.RA4==1)
  1669  001588  A880               	btfss	3968,4,c	;volatile
  1670  00158A  D002               	goto	l5106
  1671                           
  1672                           ;main.c: 459: DelayBT3++;
  1673  00158C  0100               	movlb	0	; () banked
  1674  00158E  2BAD               	incf	main@DelayBT3& (0+255),f,b
  1675  001590                     l5106:
  1676                           
  1677                           ;main.c: 460: if (PORTAbits.RA5==1)
  1678  001590  AA80               	btfss	3968,5,c	;volatile
  1679  001592  D002               	goto	l5110
  1680                           
  1681                           ;main.c: 461: DelayBT4++;
  1682  001594  0100               	movlb	0	; () banked
  1683  001596  2BAE               	incf	main@DelayBT4& (0+255),f,b
  1684  001598                     l5110:
  1685                           
  1686                           ;main.c: 463: if (DelayBT1>=10 && BloqBT1==0 && TempoAceleracao<99){
  1687  001598  0E09               	movlw	9
  1688  00159A  0100               	movlb	0	; () banked
  1689  00159C  65AB               	cpfsgt	main@DelayBT1& (0+255),b
  1690  00159E  D016               	goto	l5120
  1691                           
  1692                           ; BSR set to: 0
  1693  0015A0  0100               	movlb	0	; () banked
  1694  0015A2  51AF               	movf	main@BloqBT1& (0+255),w,b
  1695  0015A4  0100               	movlb	0	; () banked
  1696  0015A6  A4D8               	btfss	status,2,c
  1697  0015A8  D011               	goto	l5120
  1698                           
  1699                           ; BSR set to: 0
  1700  0015AA  0100               	movlb	0	; () banked
  1701  0015AC  BFC9               	btfsc	(_TempoAceleracao+1)& (0+255),7,b
  1702  0015AE  D008               	goto	l5116
  1703  0015B0  0100               	movlb	0	; () banked
  1704  0015B2  51C9               	movf	(_TempoAceleracao+1)& (0+255),w,b
  1705  0015B4  E10B               	bnz	l5120
  1706  0015B6  0E63               	movlw	99
  1707  0015B8  0100               	movlb	0	; () banked
  1708  0015BA  5DC8               	subwf	_TempoAceleracao& (0+255),w,b
  1709  0015BC  B0D8               	btfsc	status,0,c
  1710  0015BE  D006               	goto	l5120
  1711  0015C0                     l5116:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 464: TempoAceleracao++;
  1715  0015C0  0100               	movlb	0	; () banked
  1716  0015C2  4BC8               	infsnz	_TempoAceleracao& (0+255),f,b
  1717  0015C4  2BC9               	incf	(_TempoAceleracao+1)& (0+255),f,b
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 465: BloqBT1 = 1;
  1721  0015C6  0E01               	movlw	1
  1722  0015C8  0100               	movlb	0	; () banked
  1723  0015CA  6FAF               	movwf	main@BloqBT1& (0+255),b
  1724  0015CC                     l5120:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;main.c: 466: }
  1728                           ;main.c: 467: if (DelayBT2>=10 && BloqBT2==0 && TempoAceleracao>1){
  1729  0015CC  0E09               	movlw	9
  1730  0015CE  0100               	movlb	0	; () banked
  1731  0015D0  65AC               	cpfsgt	main@DelayBT2& (0+255),b
  1732  0015D2  D017               	goto	l5130
  1733                           
  1734                           ; BSR set to: 0
  1735  0015D4  0100               	movlb	0	; () banked
  1736  0015D6  51B0               	movf	main@BloqBT2& (0+255),w,b
  1737  0015D8  0100               	movlb	0	; () banked
  1738  0015DA  A4D8               	btfss	status,2,c
  1739  0015DC  D012               	goto	l5130
  1740                           
  1741                           ; BSR set to: 0
  1742  0015DE  0100               	movlb	0	; () banked
  1743  0015E0  BFC9               	btfsc	(_TempoAceleracao+1)& (0+255),7,b
  1744  0015E2  D00F               	goto	l5130
  1745  0015E4  0100               	movlb	0	; () banked
  1746  0015E6  51C9               	movf	(_TempoAceleracao+1)& (0+255),w,b
  1747  0015E8  E105               	bnz	u5760
  1748  0015EA  0E02               	movlw	2
  1749  0015EC  0100               	movlb	0	; () banked
  1750  0015EE  5DC8               	subwf	_TempoAceleracao& (0+255),w,b
  1751  0015F0  A0D8               	btfss	status,0,c
  1752  0015F2  D007               	goto	l5130
  1753  0015F4                     u5760:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 468: TempoAceleracao--;
  1757  0015F4  0100               	movlb	0	; () banked
  1758  0015F6  07C8               	decf	_TempoAceleracao& (0+255),f,b
  1759  0015F8  A0D8               	btfss	status,0,c
  1760  0015FA  07C9               	decf	(_TempoAceleracao+1)& (0+255),f,b
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 469: BloqBT2 = 1;
  1764  0015FC  0E01               	movlw	1
  1765  0015FE  0100               	movlb	0	; () banked
  1766  001600  6FB0               	movwf	main@BloqBT2& (0+255),b
  1767  001602                     l5130:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 470: }
  1771                           ;main.c: 471: if (DelayBT3>=10 && BloqBT3==0 && TempoDesaceleracao<99){
  1772  001602  0E09               	movlw	9
  1773  001604  0100               	movlb	0	; () banked
  1774  001606  65AD               	cpfsgt	main@DelayBT3& (0+255),b
  1775  001608  D016               	goto	l5140
  1776                           
  1777                           ; BSR set to: 0
  1778  00160A  0100               	movlb	0	; () banked
  1779  00160C  51B1               	movf	main@BloqBT3& (0+255),w,b
  1780  00160E  0100               	movlb	0	; () banked
  1781  001610  A4D8               	btfss	status,2,c
  1782  001612  D011               	goto	l5140
  1783                           
  1784                           ; BSR set to: 0
  1785  001614  0100               	movlb	0	; () banked
  1786  001616  BFCD               	btfsc	(_TempoDesaceleracao+1)& (0+255),7,b
  1787  001618  D008               	goto	l5136
  1788  00161A  0100               	movlb	0	; () banked
  1789  00161C  51CD               	movf	(_TempoDesaceleracao+1)& (0+255),w,b
  1790  00161E  E10B               	bnz	l5140
  1791  001620  0E63               	movlw	99
  1792  001622  0100               	movlb	0	; () banked
  1793  001624  5DCC               	subwf	_TempoDesaceleracao& (0+255),w,b
  1794  001626  B0D8               	btfsc	status,0,c
  1795  001628  D006               	goto	l5140
  1796  00162A                     l5136:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 472: TempoDesaceleracao++;
  1800  00162A  0100               	movlb	0	; () banked
  1801  00162C  4BCC               	infsnz	_TempoDesaceleracao& (0+255),f,b
  1802  00162E  2BCD               	incf	(_TempoDesaceleracao+1)& (0+255),f,b
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 473: BloqBT3 = 1;
  1806  001630  0E01               	movlw	1
  1807  001632  0100               	movlb	0	; () banked
  1808  001634  6FB1               	movwf	main@BloqBT3& (0+255),b
  1809  001636                     l5140:
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;main.c: 474: }
  1813                           ;main.c: 475: if (DelayBT4>=10 && BloqBT4==0 && TempoDesaceleracao>1){
  1814  001636  0E09               	movlw	9
  1815  001638  0100               	movlb	0	; () banked
  1816  00163A  65AE               	cpfsgt	main@DelayBT4& (0+255),b
  1817  00163C  D017               	goto	l5150
  1818                           
  1819                           ; BSR set to: 0
  1820  00163E  0100               	movlb	0	; () banked
  1821  001640  51B2               	movf	main@BloqBT4& (0+255),w,b
  1822  001642  0100               	movlb	0	; () banked
  1823  001644  A4D8               	btfss	status,2,c
  1824  001646  D012               	goto	l5150
  1825                           
  1826                           ; BSR set to: 0
  1827  001648  0100               	movlb	0	; () banked
  1828  00164A  BFCD               	btfsc	(_TempoDesaceleracao+1)& (0+255),7,b
  1829  00164C  D00F               	goto	l5150
  1830  00164E  0100               	movlb	0	; () banked
  1831  001650  51CD               	movf	(_TempoDesaceleracao+1)& (0+255),w,b
  1832  001652  E105               	bnz	u5820
  1833  001654  0E02               	movlw	2
  1834  001656  0100               	movlb	0	; () banked
  1835  001658  5DCC               	subwf	_TempoDesaceleracao& (0+255),w,b
  1836  00165A  A0D8               	btfss	status,0,c
  1837  00165C  D007               	goto	l5150
  1838  00165E                     u5820:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 476: TempoDesaceleracao--;
  1842  00165E  0100               	movlb	0	; () banked
  1843  001660  07CC               	decf	_TempoDesaceleracao& (0+255),f,b
  1844  001662  A0D8               	btfss	status,0,c
  1845  001664  07CD               	decf	(_TempoDesaceleracao+1)& (0+255),f,b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 477: BloqBT4 = 1;
  1849  001666  0E01               	movlw	1
  1850  001668  0100               	movlb	0	; () banked
  1851  00166A  6FB2               	movwf	main@BloqBT4& (0+255),b
  1852  00166C                     l5150:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 478: }
  1856                           ;main.c: 480: if (TempoAceleracao!=AcelAnterior){
  1857  00166C  0100               	movlb	0	; () banked
  1858  00166E  51A7               	movf	main@AcelAnterior& (0+255),w,b
  1859  001670  0100               	movlb	0	; () banked
  1860  001672  19C8               	xorwf	_TempoAceleracao& (0+255),w,b
  1861  001674  E106               	bnz	u5830
  1862  001676  0100               	movlb	0	; () banked
  1863  001678  51A8               	movf	(main@AcelAnterior+1)& (0+255),w,b
  1864  00167A  0100               	movlb	0	; () banked
  1865  00167C  19C9               	xorwf	(_TempoAceleracao+1)& (0+255),w,b
  1866  00167E  B4D8               	btfsc	status,2,c
  1867  001680  D01F               	goto	l5160
  1868  001682                     u5830:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;main.c: 481: AcelAnterior = TempoAceleracao;
  1872  001682  C0C8  F0A7         	movff	_TempoAceleracao,main@AcelAnterior
  1873  001686  C0C9  F0A8         	movff	_TempoAceleracao+1,main@AcelAnterior+1
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 482: SetDDRamAddr(0x44);
  1877  00168A  0E44               	movlw	68
  1878  00168C  ECBD  F016         	call	_SetDDRamAddr
  1879                           
  1880                           ;main.c: 483: sprintf(StringTempo, "%ds ", TempoAceleracao);
  1881  001690  0E9D               	movlw	low main@StringTempo
  1882  001692  0100               	movlb	0	; () banked
  1883  001694  6F6F               	movwf	sprintf@sp& (0+255),b
  1884  001696  0E00               	movlw	high main@StringTempo
  1885  001698  0100               	movlb	0	; () banked
  1886  00169A  6F70               	movwf	(sprintf@sp+1)& (0+255),b
  1887  00169C  0EC4               	movlw	low STR_9
  1888  00169E  0100               	movlb	0	; () banked
  1889  0016A0  6F71               	movwf	sprintf@f& (0+255),b
  1890  0016A2  0E08               	movlw	high STR_9
  1891  0016A4  0100               	movlb	0	; () banked
  1892  0016A6  6F72               	movwf	(sprintf@f+1)& (0+255),b
  1893  0016A8  C0C8  F073         	movff	_TempoAceleracao,?_sprintf+4
  1894  0016AC  C0C9  F074         	movff	_TempoAceleracao+1,?_sprintf+5
  1895  0016B0  EC65  F004         	call	_sprintf	;wreg free
  1896                           
  1897                           ;main.c: 484: putsXLCD(StringTempo);
  1898  0016B4  0E9D               	movlw	low main@StringTempo
  1899  0016B6  6E11               	movwf	putsXLCD@buffer,c
  1900  0016B8  0E00               	movlw	high main@StringTempo
  1901  0016BA  6E12               	movwf	putsXLCD@buffer+1,c
  1902  0016BC  EC35  F016         	call	_putsXLCD	;wreg free
  1903  0016C0                     l5160:
  1904                           
  1905                           ;main.c: 485: }
  1906                           ;main.c: 486: if (TempoDesaceleracao!=DesacelAnterior){
  1907  0016C0  0100               	movlb	0	; () banked
  1908  0016C2  51A9               	movf	main@DesacelAnterior& (0+255),w,b
  1909  0016C4  0100               	movlb	0	; () banked
  1910  0016C6  19CC               	xorwf	_TempoDesaceleracao& (0+255),w,b
  1911  0016C8  E106               	bnz	u5840
  1912  0016CA  0100               	movlb	0	; () banked
  1913  0016CC  51AA               	movf	(main@DesacelAnterior+1)& (0+255),w,b
  1914  0016CE  0100               	movlb	0	; () banked
  1915  0016D0  19CD               	xorwf	(_TempoDesaceleracao+1)& (0+255),w,b
  1916  0016D2  B4D8               	btfsc	status,2,c
  1917  0016D4  D01F               	goto	l5170
  1918  0016D6                     u5840:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 487: DesacelAnterior = TempoDesaceleracao;
  1922  0016D6  C0CC  F0A9         	movff	_TempoDesaceleracao,main@DesacelAnterior
  1923  0016DA  C0CD  F0AA         	movff	_TempoDesaceleracao+1,main@DesacelAnterior+1
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 488: SetDDRamAddr(0x4C);
  1927  0016DE  0E4C               	movlw	76
  1928  0016E0  ECBD  F016         	call	_SetDDRamAddr
  1929                           
  1930                           ;main.c: 489: sprintf(StringTempo, "%ds  ", TempoDesaceleracao);
  1931  0016E4  0E9D               	movlw	low main@StringTempo
  1932  0016E6  0100               	movlb	0	; () banked
  1933  0016E8  6F6F               	movwf	sprintf@sp& (0+255),b
  1934  0016EA  0E00               	movlw	high main@StringTempo
  1935  0016EC  0100               	movlb	0	; () banked
  1936  0016EE  6F70               	movwf	(sprintf@sp+1)& (0+255),b
  1937  0016F0  0EBE               	movlw	low STR_10
  1938  0016F2  0100               	movlb	0	; () banked
  1939  0016F4  6F71               	movwf	sprintf@f& (0+255),b
  1940  0016F6  0E08               	movlw	high STR_10
  1941  0016F8  0100               	movlb	0	; () banked
  1942  0016FA  6F72               	movwf	(sprintf@f+1)& (0+255),b
  1943  0016FC  C0CC  F073         	movff	_TempoDesaceleracao,?_sprintf+4
  1944  001700  C0CD  F074         	movff	_TempoDesaceleracao+1,?_sprintf+5
  1945  001704  EC65  F004         	call	_sprintf	;wreg free
  1946                           
  1947                           ;main.c: 490: putsXLCD(StringTempo);
  1948  001708  0E9D               	movlw	low main@StringTempo
  1949  00170A  6E11               	movwf	putsXLCD@buffer,c
  1950  00170C  0E00               	movlw	high main@StringTempo
  1951  00170E  6E12               	movwf	putsXLCD@buffer+1,c
  1952  001710  EC35  F016         	call	_putsXLCD	;wreg free
  1953  001714                     l5170:
  1954                           
  1955                           ;main.c: 491: }
  1956                           ;main.c: 494: if (MotorLigado==0 && PORTCbits.RC1==1){
  1957  001714  0100               	movlb	0	; () banked
  1958  001716  51C6               	movf	_MotorLigado& (0+255),w,b
  1959  001718  B4D8               	btfsc	status,2,c
  1960                           
  1961                           ; BSR set to: 0
  1962  00171A  A282               	btfss	3970,1,c	;volatile
  1963  00171C  D010               	goto	l5180
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;main.c: 495: ContCiclosIncremento = 0;
  1967  00171E  0E00               	movlw	0
  1968  001720  0100               	movlb	0	; () banked
  1969  001722  6FC1               	movwf	(_ContCiclosIncremento+1)& (0+255),b
  1970  001724  0E00               	movlw	0
  1971  001726  6FC0               	movwf	_ContCiclosIncremento& (0+255),b
  1972                           
  1973                           ;main.c: 496: IniciaAceleracao = 1;
  1974  001728  0E01               	movlw	1
  1975  00172A  0100               	movlb	0	; () banked
  1976  00172C  6FC4               	movwf	_IniciaAceleracao& (0+255),b
  1977                           
  1978                           ;main.c: 497: IniciaDesaceleracao = 0;
  1979  00172E  0E00               	movlw	0
  1980  001730  0100               	movlb	0	; () banked
  1981  001732  6FC5               	movwf	_IniciaDesaceleracao& (0+255),b
  1982                           
  1983                           ;main.c: 498: INTCON = 0b11010000;
  1984  001734  0ED0               	movlw	208
  1985  001736  6EF2               	movwf	intcon,c	;volatile
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 499: INT1IE = 1;
  1989  001738  86F0               	bsf	intcon3,3,c	;volatile
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 500: INT2IE = 1;
  1993  00173A  88F0               	bsf	intcon3,4,c	;volatile
  1994                           
  1995                           ;main.c: 501: }
  1996  00173C  D5EF               	goto	l5040
  1997  00173E                     l5180:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;main.c: 502: else if (MotorLigado==1 && PORTAbits.RA1==1){
  2001  00173E  0100               	movlb	0	; () banked
  2002  001740  05C6               	decf	_MotorLigado& (0+255),w,b
  2003  001742  B4D8               	btfsc	status,2,c
  2004                           
  2005                           ; BSR set to: 0
  2006  001744  A280               	btfss	3968,1,c	;volatile
  2007  001746  D5EA               	goto	l5040
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 503: ContCiclosIncremento = 0;
  2011  001748  0E00               	movlw	0
  2012  00174A  0100               	movlb	0	; () banked
  2013  00174C  6FC1               	movwf	(_ContCiclosIncremento+1)& (0+255),b
  2014  00174E  0E00               	movlw	0
  2015  001750  6FC0               	movwf	_ContCiclosIncremento& (0+255),b
  2016                           
  2017                           ;main.c: 504: IniciaAceleracao = 0;
  2018  001752  0E00               	movlw	0
  2019  001754  0100               	movlb	0	; () banked
  2020  001756  6FC4               	movwf	_IniciaAceleracao& (0+255),b
  2021                           
  2022                           ;main.c: 505: IniciaDesaceleracao = 1;
  2023  001758  0E01               	movlw	1
  2024  00175A  0100               	movlb	0	; () banked
  2025  00175C  6FC5               	movwf	_IniciaDesaceleracao& (0+255),b
  2026                           
  2027                           ; BSR set to: 0
  2028                           
  2029                           ; BSR set to: 0
  2030                           
  2031                           ; BSR set to: 0
  2032  00175E  D5DE               	goto	l5040
  2033  001760                     __end_of_main:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           intcon	equ	0xFF2
  2040                           intcon2	equ	0xFF1
  2041                           intcon3	equ	0xFF0
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           postdec1	equ	0xFE5
  2045                           fsr1l	equ	0xFE1
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _sprintf *****************
  2049 ;; Defined at:
  2050 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  sp              2   15[BANK0 ] PTR unsigned char 
  2053 ;;		 -> main@StringCorrente(10), main@StringTempo(10), 
  2054 ;;  f               2   17[BANK0 ] PTR const unsigned char 
  2055 ;;		 -> STR_10(6), STR_9(5), STR_8(7), STR_6(7), 
  2056 ;;		 -> STR_4(7), 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  val             4   41[BANK0 ] unsigned long 
  2059 ;;  tmpval          4   37[BANK0 ] struct .
  2060 ;;  fval            3   47[BANK0 ] struct .
  2061 ;;  cp              3    0        PTR const unsigned char 
  2062 ;;  prec            2   45[BANK0 ] int 
  2063 ;;  exp             2   35[BANK0 ] int 
  2064 ;;  flag            2   33[BANK0 ] unsigned short 
  2065 ;;  ap              2   31[BANK0 ] PTR void [1]
  2066 ;;		 -> ?_sprintf(2), 
  2067 ;;  len             2    0        unsigned int 
  2068 ;;  width           2    0        int 
  2069 ;;  c               1   50[BANK0 ] char 
  2070 ;;  d               1    0        unsigned char 
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  2   15[BANK0 ] int 
  2073 ;; Registers used:
  2074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2080 ;;      Params:         0       7       0       0       0       0       0       0       0
  2081 ;;      Locals:         0      23       0       0       0       0       0       0       0
  2082 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2083 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2084 ;;Total ram usage:       36 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    5
  2087 ;; This function calls:
  2088 ;;		___awdiv
  2089 ;;		___ftadd
  2090 ;;		___ftge
  2091 ;;		___ftmul
  2092 ;;		___ftneg
  2093 ;;		___ftsub
  2094 ;;		___fttol
  2095 ;;		___lldiv
  2096 ;;		___llmod
  2097 ;;		___lltoft
  2098 ;;		___wmul
  2099 ;;		__div_to_l_
  2100 ;;		__tdiv_to_l_
  2101 ;;		_fround
  2102 ;;		_isdigit
  2103 ;;		_scale
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text1
  2110  0008CA                     __ptext1:
  2111                           	opt stack 0
  2112  0008CA                     _sprintf:
  2113                           	opt stack 25
  2114                           
  2115                           ;doprnt.c: 494: va_list ap;
  2116                           ;doprnt.c: 499: signed char c;
  2117                           ;doprnt.c: 501: int width;
  2118                           ;doprnt.c: 504: int prec;
  2119                           ;doprnt.c: 508: unsigned short flag;
  2120                           ;doprnt.c: 515: char d;
  2121                           ;doprnt.c: 516: double fval;
  2122                           ;doprnt.c: 517: int exp;
  2123                           ;doprnt.c: 523: union {
  2124                           ;doprnt.c: 524: unsigned long vd;
  2125                           ;doprnt.c: 525: double integ;
  2126                           ;doprnt.c: 526: } tmpval;
  2127                           ;doprnt.c: 528: unsigned long val;
  2128                           ;doprnt.c: 529: unsigned len;
  2129                           ;doprnt.c: 530: const char * cp;
  2130                           ;doprnt.c: 533: *ap = __va_start();
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;incstack = 0
  2134  0008CA  0E73               	movlw	low (?_sprintf+4)
  2135  0008CC  0100               	movlb	0	; () banked
  2136  0008CE  6F7F               	movwf	sprintf@ap& (0+255),b
  2137  0008D0  0E00               	movlw	high (?_sprintf+4)
  2138  0008D2  0100               	movlb	0	; () banked
  2139  0008D4  6F80               	movwf	(sprintf@ap+1)& (0+255),b
  2140                           
  2141                           ;doprnt.c: 536: while(c = *f++) {
  2142  0008D6  EFF3  F008         	goto	l4912
  2143  0008DA                     l4682:
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;doprnt.c: 538: if(c != '%')
  2147  0008DA  0E25               	movlw	37
  2148  0008DC  0100               	movlb	0	; () banked
  2149  0008DE  1992               	xorwf	sprintf@c& (0+255),w,b
  2150  0008E0  B4D8               	btfsc	status,2,c
  2151  0008E2  D00B               	goto	l4688
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 540: {
  2155                           ;doprnt.c: 541: ((*sp++ = (c)));
  2156  0008E4  C06F  FFD9         	movff	sprintf@sp,fsr2l
  2157  0008E8  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  2158  0008EC  C092  FFDF         	movff	sprintf@c,indf2
  2159                           
  2160                           ; BSR set to: 0
  2161  0008F0  0100               	movlb	0	; () banked
  2162  0008F2  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  2163  0008F4  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  2164                           
  2165                           ;doprnt.c: 542: continue;
  2166  0008F6  EFF3  F008         	goto	l4912
  2167  0008FA                     l4688:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;doprnt.c: 543: }
  2171                           ;doprnt.c: 548: flag = 0;
  2172  0008FA  0E00               	movlw	0
  2173  0008FC  0100               	movlb	0	; () banked
  2174  0008FE  6F82               	movwf	(sprintf@flag+1)& (0+255),b
  2175  000900  0E00               	movlw	0
  2176  000902  6F81               	movwf	sprintf@flag& (0+255),b
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;doprnt.c: 611: if(*f == '.') {
  2180  000904  C071  FFF6         	movff	sprintf@f,tblptrl
  2181  000908  C072  FFF7         	movff	sprintf@f+1,tblptrh
  2182  00090C                     	if	0	;tblptru may be non-zero
  2183  00090C                     	endif
  2184  00090C                     	if	0	;tblptru may be non-zero
  2185  00090C                     	endif
  2186  00090C  0008               	tblrd		*
  2187  00090E  50F5               	movf	tablat,w,c
  2188  000910  0A2E               	xorlw	46
  2189  000912  A4D8               	btfss	status,2,c
  2190  000914  D034               	goto	l4702
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;doprnt.c: 612: flag |= 0x4000;
  2194  000916  0100               	movlb	0	; () banked
  2195  000918  8D82               	bsf	(sprintf@flag+1)& (0+255),6,b
  2196                           
  2197                           ;doprnt.c: 613: f++;
  2198  00091A  0100               	movlb	0	; () banked
  2199  00091C  4B71               	infsnz	sprintf@f& (0+255),f,b
  2200  00091E  2B72               	incf	(sprintf@f+1)& (0+255),f,b
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 620: {
  2204                           ;doprnt.c: 621: prec = 0;
  2205  000920  0E00               	movlw	0
  2206  000922  0100               	movlb	0	; () banked
  2207  000924  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  2208  000926  0E00               	movlw	0
  2209  000928  6F8D               	movwf	sprintf@prec& (0+255),b
  2210                           
  2211                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2212  00092A  D01E               	goto	l4700
  2213  00092C                     l4696:
  2214                           
  2215                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2216  00092C  C08D  F01E         	movff	sprintf@prec,___wmul@multiplier
  2217  000930  C08E  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2218  000934  0E00               	movlw	0
  2219  000936  6E21               	movwf	___wmul@multiplicand+1,c
  2220  000938  0E0A               	movlw	10
  2221  00093A  6E20               	movwf	___wmul@multiplicand,c
  2222  00093C  ECCB  F017         	call	___wmul	;wreg free
  2223  000940  C071  FFF6         	movff	sprintf@f,tblptrl
  2224  000944  C072  FFF7         	movff	sprintf@f+1,tblptrh
  2225  000948                     	if	0	;tblptru may be non-zero
  2226  000948                     	endif
  2227  000948                     	if	0	;tblptru may be non-zero
  2228  000948                     	endif
  2229  000948  0008               	tblrd		*
  2230  00094A  50F5               	movf	tablat,w,c
  2231  00094C  261E               	addwf	?___wmul,f,c
  2232  00094E  0E00               	movlw	0
  2233  000950  221F               	addwfc	?___wmul+1,f,c
  2234  000952  0ED0               	movlw	208
  2235  000954  241E               	addwf	?___wmul,w,c
  2236  000956  0100               	movlb	0	; () banked
  2237  000958  6F8D               	movwf	sprintf@prec& (0+255),b
  2238  00095A  0EFF               	movlw	255
  2239  00095C  201F               	addwfc	?___wmul+1,w,c
  2240  00095E  0100               	movlb	0	; () banked
  2241  000960  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244  000962  0100               	movlb	0	; () banked
  2245  000964  4B71               	infsnz	sprintf@f& (0+255),f,b
  2246  000966  2B72               	incf	(sprintf@f+1)& (0+255),f,b
  2247  000968                     l4700:
  2248                           
  2249                           ; BSR set to: 0
  2250  000968  C071  FFF6         	movff	sprintf@f,tblptrl
  2251  00096C  C072  FFF7         	movff	sprintf@f+1,tblptrh
  2252  000970                     	if	0	;tblptru may be non-zero
  2253  000970                     	endif
  2254  000970                     	if	0	;tblptru may be non-zero
  2255  000970                     	endif
  2256  000970  0008               	tblrd		*
  2257  000972  50F5               	movf	tablat,w,c
  2258  000974  EC00  F018         	call	_isdigit
  2259  000978  A0D8               	btfss	status,0,c
  2260  00097A  D00C               	goto	l4710
  2261  00097C  D7D7               	goto	l4696
  2262  00097E                     l4702:
  2263                           
  2264                           ;doprnt.c: 626: prec = 0;
  2265  00097E  0E00               	movlw	0
  2266  000980  0100               	movlb	0	; () banked
  2267  000982  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  2268  000984  0E00               	movlw	0
  2269  000986  6F8D               	movwf	sprintf@prec& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;doprnt.c: 628: flag |= 0x1000;
  2273  000988  0100               	movlb	0	; () banked
  2274  00098A  8982               	bsf	(sprintf@flag+1)& (0+255),4,b
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 630: }
  2278                           ;doprnt.c: 635: switch(c = *f++) {
  2279  00098C  D003               	goto	l4710
  2280  00098E                     l4706:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 663: flag |= 0x400;
  2284  00098E  0100               	movlb	0	; () banked
  2285  000990  8582               	bsf	(sprintf@flag+1)& (0+255),2,b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;doprnt.c: 698: case 'i':
  2289                           ;doprnt.c: 699: break;
  2290                           
  2291                           ; BSR set to: 0
  2292                           
  2293                           ;doprnt.c: 697: case 'd':
  2294                           
  2295                           ;doprnt.c: 664: break;
  2296  000992  D01A               	goto	l4712
  2297  000994                     l4710:
  2298  000994  C071  FFF6         	movff	sprintf@f,tblptrl
  2299  000998  C072  FFF7         	movff	sprintf@f+1,tblptrh
  2300  00099C  0100               	movlb	0	; () banked
  2301  00099E  4B71               	infsnz	sprintf@f& (0+255),f,b
  2302  0009A0  2B72               	incf	(sprintf@f+1)& (0+255),f,b
  2303  0009A2                     	if	0	;tblptru may be non-zero
  2304  0009A2                     	endif
  2305  0009A2                     	if	0	;tblptru may be non-zero
  2306  0009A2                     	endif
  2307  0009A2  0008               	tblrd		*
  2308  0009A4  CFF5 F092          	movff	tablat,sprintf@c
  2309  0009A8  0100               	movlb	0	; () banked
  2310  0009AA  5192               	movf	sprintf@c& (0+255),w,b
  2311                           
  2312                           ; Switch size 1, requested type "space"
  2313                           ; Number of cases is 4, Range of values is 0 to 105
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; simple_byte           13     7 (average)
  2317                           ;	Chosen strategy is simple_byte
  2318  0009AC  0A00               	xorlw	0	; case 0
  2319  0009AE  B4D8               	btfsc	status,2,c
  2320  0009B0  EF02  F009         	goto	l4914
  2321  0009B4  0A64               	xorlw	100	; case 100
  2322  0009B6  B4D8               	btfsc	status,2,c
  2323  0009B8  D007               	goto	l4712
  2324  0009BA  0A02               	xorlw	2	; case 102
  2325  0009BC  B4D8               	btfsc	status,2,c
  2326  0009BE  D7E7               	goto	l4706
  2327  0009C0  0A0F               	xorlw	15	; case 105
  2328  0009C2  A4D8               	btfss	status,2,c
  2329  0009C4  EFF3  F008         	goto	l4912
  2330  0009C8                     l4712:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 825: if(flag & (0x700)) {
  2334  0009C8  0E07               	movlw	7
  2335  0009CA  0100               	movlb	0	; () banked
  2336  0009CC  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  2337  0009CE  B4D8               	btfsc	status,2,c
  2338  0009D0  D319               	goto	l4860
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;doprnt.c: 827: if(flag & 0x1000)
  2342  0009D2  0100               	movlb	0	; () banked
  2343  0009D4  A982               	btfss	(sprintf@flag+1)& (0+255),4,b
  2344  0009D6  D005               	goto	l4718
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;doprnt.c: 829: prec = 6;
  2348  0009D8  0E00               	movlw	0
  2349  0009DA  0100               	movlb	0	; () banked
  2350  0009DC  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  2351  0009DE  0E06               	movlw	6
  2352  0009E0  6F8D               	movwf	sprintf@prec& (0+255),b
  2353  0009E2                     l4718:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2357  0009E2  C07F  FFD9         	movff	sprintf@ap,fsr2l
  2358  0009E6  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  2359  0009EA  CFDE F08F          	movff	postinc2,sprintf@fval
  2360  0009EE  CFDE F090          	movff	postinc2,sprintf@fval+1
  2361  0009F2  CFDD F091          	movff	postdec2,sprintf@fval+2
  2362                           
  2363                           ; BSR set to: 0
  2364  0009F6  0E03               	movlw	3
  2365  0009F8  0100               	movlb	0	; () banked
  2366  0009FA  277F               	addwf	sprintf@ap& (0+255),f,b
  2367  0009FC  0E00               	movlw	0
  2368  0009FE  2380               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 831: if(fval < 0.0) {
  2372  000A00  0100               	movlb	0	; () banked
  2373  000A02  AF91               	btfss	(sprintf@fval+2)& (0+255),7,b
  2374  000A04  D011               	goto	l4728
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 832: fval = -fval;
  2378  000A06  C08F  F010         	movff	sprintf@fval,___ftneg@f1
  2379  000A0A  C090  F011         	movff	sprintf@fval+1,___ftneg@f1+1
  2380  000A0E  C091  F012         	movff	sprintf@fval+2,___ftneg@f1+2
  2381  000A12  ECDE  F017         	call	___ftneg	;wreg free
  2382  000A16  C010  F08F         	movff	?___ftneg,sprintf@fval
  2383  000A1A  C011  F090         	movff	?___ftneg+1,sprintf@fval+1
  2384  000A1E  C012  F091         	movff	?___ftneg+2,sprintf@fval+2
  2385                           
  2386                           ;doprnt.c: 833: flag |= 0x03;
  2387  000A22  0E03               	movlw	3
  2388  000A24  0100               	movlb	0	; () banked
  2389  000A26  1381               	iorwf	sprintf@flag& (0+255),f,b
  2390  000A28                     l4728:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;doprnt.c: 834: }
  2394                           ;doprnt.c: 835: exp = 0;
  2395  000A28  0E00               	movlw	0
  2396  000A2A  0100               	movlb	0	; () banked
  2397  000A2C  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  2398  000A2E  0E00               	movlw	0
  2399  000A30  6F83               	movwf	sprintf@exp& (0+255),b
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 836: if( fval!=0) {
  2403  000A32  0100               	movlb	0	; () banked
  2404  000A34  518F               	movf	sprintf@fval& (0+255),w,b
  2405  000A36  0100               	movlb	0	; () banked
  2406  000A38  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2407  000A3A  0100               	movlb	0	; () banked
  2408  000A3C  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2409  000A3E  B4D8               	btfsc	status,2,c
  2410  000A40  D091               	goto	l4756
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2414  000A42  0E82               	movlw	130
  2415  000A44  0100               	movlb	0	; () banked
  2416  000A46  6F76               	movwf	??_sprintf& (0+255),b
  2417  000A48  0EFF               	movlw	255
  2418  000A4A  0100               	movlb	0	; () banked
  2419  000A4C  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2420  000A4E  C08F  F078         	movff	sprintf@fval,??_sprintf+2
  2421  000A52  C090  F079         	movff	sprintf@fval+1,??_sprintf+3
  2422  000A56  C091  F07A         	movff	sprintf@fval+2,??_sprintf+4
  2423  000A5A  C092  F07B         	movff	sprintf@fval+3,??_sprintf+5
  2424  000A5E  0E10               	movlw	16
  2425  000A60  D006               	goto	u5190
  2426  000A62                     u5195:
  2427  000A62  0100               	movlb	0	; () banked
  2428  000A64  90D8               	bcf	status,0,c
  2429  000A66  337B               	rrcf	(??_sprintf+5)& (0+255),f,b
  2430  000A68  337A               	rrcf	(??_sprintf+4)& (0+255),f,b
  2431  000A6A  3379               	rrcf	(??_sprintf+3)& (0+255),f,b
  2432  000A6C  3378               	rrcf	(??_sprintf+2)& (0+255),f,b
  2433  000A6E                     u5190:
  2434  000A6E  2EE8               	decfsz	wreg,f,c
  2435  000A70  D7F8               	goto	u5195
  2436  000A72  0100               	movlb	0	; () banked
  2437  000A74  5178               	movf	(??_sprintf+2)& (0+255),w,b
  2438  000A76  0100               	movlb	0	; () banked
  2439  000A78  2576               	addwf	??_sprintf& (0+255),w,b
  2440  000A7A  0100               	movlb	0	; () banked
  2441  000A7C  6F83               	movwf	sprintf@exp& (0+255),b
  2442  000A7E  0E00               	movlw	0
  2443  000A80  0100               	movlb	0	; () banked
  2444  000A82  2177               	addwfc	(??_sprintf+1)& (0+255),w,b
  2445  000A84  0100               	movlb	0	; () banked
  2446  000A86  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;doprnt.c: 838: exp--;
  2450  000A88  0100               	movlb	0	; () banked
  2451  000A8A  0783               	decf	sprintf@exp& (0+255),f,b
  2452  000A8C  A0D8               	btfss	status,0,c
  2453  000A8E  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 839: exp *= 3;
  2457  000A90  C083  F01E         	movff	sprintf@exp,___wmul@multiplier
  2458  000A94  C084  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2459  000A98  0E00               	movlw	0
  2460  000A9A  6E21               	movwf	___wmul@multiplicand+1,c
  2461  000A9C  0E03               	movlw	3
  2462  000A9E  6E20               	movwf	___wmul@multiplicand,c
  2463  000AA0  ECCB  F017         	call	___wmul	;wreg free
  2464  000AA4  C01E  F083         	movff	?___wmul,sprintf@exp
  2465  000AA8  C01F  F084         	movff	?___wmul+1,sprintf@exp+1
  2466                           
  2467                           ;doprnt.c: 840: exp /= 10;
  2468  000AAC  C083  F016         	movff	sprintf@exp,___awdiv@dividend
  2469  000AB0  C084  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  2470  000AB4  0E00               	movlw	0
  2471  000AB6  6E19               	movwf	___awdiv@divisor+1,c
  2472  000AB8  0E0A               	movlw	10
  2473  000ABA  6E18               	movwf	___awdiv@divisor,c
  2474  000ABC  ECBB  F014         	call	___awdiv	;wreg free
  2475  000AC0  C016  F083         	movff	?___awdiv,sprintf@exp
  2476  000AC4  C017  F084         	movff	?___awdiv+1,sprintf@exp+1
  2477                           
  2478                           ;doprnt.c: 841: if(exp < 0)
  2479  000AC8  0100               	movlb	0	; () banked
  2480  000ACA  AF84               	btfss	(sprintf@exp+1)& (0+255),7,b
  2481  000ACC  D004               	goto	l4744
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 842: exp--;
  2485  000ACE  0100               	movlb	0	; () banked
  2486  000AD0  0783               	decf	sprintf@exp& (0+255),f,b
  2487  000AD2  A0D8               	btfss	status,0,c
  2488  000AD4  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  2489  000AD6                     l4744:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2493  000AD6  0100               	movlb	0	; () banked
  2494  000AD8  5183               	movf	sprintf@exp& (0+255),w,b
  2495  000ADA  0800               	sublw	0
  2496  000ADC  ECB0  F00B         	call	_scale
  2497  000AE0  C033  F085         	movff	?_scale,sprintf@tmpval
  2498  000AE4  C034  F086         	movff	?_scale+1,sprintf@tmpval+1
  2499  000AE8  C035  F087         	movff	?_scale+2,sprintf@tmpval+2
  2500                           
  2501                           ;doprnt.c: 847: tmpval.integ *= fval;
  2502  000AEC  C085  F024         	movff	sprintf@tmpval,___ftmul@f1
  2503  000AF0  C086  F025         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2504  000AF4  C087  F026         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2505  000AF8  C08F  F027         	movff	sprintf@fval,___ftmul@f2
  2506  000AFC  C090  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  2507  000B00  C091  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  2508  000B04  ECA5  F011         	call	___ftmul	;wreg free
  2509  000B08  C024  F085         	movff	?___ftmul,sprintf@tmpval
  2510  000B0C  C025  F086         	movff	?___ftmul+1,sprintf@tmpval+1
  2511  000B10  C026  F087         	movff	?___ftmul+2,sprintf@tmpval+2
  2512                           
  2513                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2514  000B14  C085  F010         	movff	sprintf@tmpval,___ftge@ff1
  2515  000B18  C086  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2516  000B1C  C087  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2517  000B20  0E00               	movlw	0
  2518  000B22  6E13               	movwf	___ftge@ff2,c
  2519  000B24  0E80               	movlw	128
  2520  000B26  6E14               	movwf	___ftge@ff2+1,c
  2521  000B28  0E3F               	movlw	63
  2522  000B2A  6E15               	movwf	___ftge@ff2+2,c
  2523  000B2C  EC73  F014         	call	___ftge	;wreg free
  2524  000B30  B0D8               	btfsc	status,0,c
  2525  000B32  D005               	goto	l4752
  2526                           
  2527                           ;doprnt.c: 849: exp--;
  2528  000B34  0100               	movlb	0	; () banked
  2529  000B36  0783               	decf	sprintf@exp& (0+255),f,b
  2530  000B38  A0D8               	btfss	status,0,c
  2531  000B3A  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  2532  000B3C  D013               	goto	l4756
  2533  000B3E                     l4752:
  2534                           
  2535                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2536  000B3E  C085  F010         	movff	sprintf@tmpval,___ftge@ff1
  2537  000B42  C086  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2538  000B46  C087  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2539  000B4A  0E00               	movlw	0
  2540  000B4C  6E13               	movwf	___ftge@ff2,c
  2541  000B4E  0E20               	movlw	32
  2542  000B50  6E14               	movwf	___ftge@ff2+1,c
  2543  000B52  0E41               	movlw	65
  2544  000B54  6E15               	movwf	___ftge@ff2+2,c
  2545  000B56  EC73  F014         	call	___ftge	;wreg free
  2546  000B5A  A0D8               	btfss	status,0,c
  2547  000B5C  D003               	goto	l4756
  2548                           
  2549                           ;doprnt.c: 851: exp++;
  2550  000B5E  0100               	movlb	0	; () banked
  2551  000B60  4B83               	infsnz	sprintf@exp& (0+255),f,b
  2552  000B62  2B84               	incf	(sprintf@exp+1)& (0+255),f,b
  2553  000B64                     l4756:
  2554                           
  2555                           ;doprnt.c: 852: }
  2556                           ;doprnt.c: 1112: if(prec <= 12)
  2557  000B64  0100               	movlb	0	; () banked
  2558  000B66  BF8E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2559  000B68  D008               	goto	l4758
  2560  000B6A  0100               	movlb	0	; () banked
  2561  000B6C  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  2562  000B6E  E11D               	bnz	l4760
  2563  000B70  0E0D               	movlw	13
  2564  000B72  0100               	movlb	0	; () banked
  2565  000B74  5D8D               	subwf	sprintf@prec& (0+255),w,b
  2566  000B76  B0D8               	btfsc	status,0,c
  2567  000B78  D018               	goto	l4760
  2568  000B7A                     l4758:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1113: fval += fround(prec);
  2572  000B7A  C08F  F03D         	movff	sprintf@fval,___ftadd@f1
  2573  000B7E  C090  F03E         	movff	sprintf@fval+1,___ftadd@f1+1
  2574  000B82  C091  F03F         	movff	sprintf@fval+2,___ftadd@f1+2
  2575  000B86  0100               	movlb	0	; () banked
  2576  000B88  518D               	movf	sprintf@prec& (0+255),w,b
  2577  000B8A  ECA8  F00D         	call	_fround
  2578  000B8E  C033  F040         	movff	?_fround,___ftadd@f2
  2579  000B92  C034  F041         	movff	?_fround+1,___ftadd@f2+1
  2580  000B96  C035  F042         	movff	?_fround+2,___ftadd@f2+2
  2581  000B9A  ECCB  F00E         	call	___ftadd	;wreg free
  2582  000B9E  C03D  F08F         	movff	?___ftadd,sprintf@fval
  2583  000BA2  C03E  F090         	movff	?___ftadd+1,sprintf@fval+1
  2584  000BA6  C03F  F091         	movff	?___ftadd+2,sprintf@fval+2
  2585  000BAA                     l4760:
  2586                           
  2587                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2588  000BAA  0100               	movlb	0	; () banked
  2589  000BAC  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2590  000BAE  D008               	goto	l4762
  2591  000BB0  0100               	movlb	0	; () banked
  2592  000BB2  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  2593  000BB4  E12A               	bnz	l4768
  2594  000BB6  0E0A               	movlw	10
  2595  000BB8  0100               	movlb	0	; () banked
  2596  000BBA  5D83               	subwf	sprintf@exp& (0+255),w,b
  2597  000BBC  B0D8               	btfsc	status,0,c
  2598  000BBE  D025               	goto	l4768
  2599  000BC0                     l4762:
  2600                           
  2601                           ; BSR set to: 0
  2602  000BC0  0100               	movlb	0	; () banked
  2603  000BC2  518F               	movf	sprintf@fval& (0+255),w,b
  2604  000BC4  0100               	movlb	0	; () banked
  2605  000BC6  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2606  000BC8  0100               	movlb	0	; () banked
  2607  000BCA  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2608  000BCC  B4D8               	btfsc	status,2,c
  2609  000BCE  D05F               	goto	l4782
  2610                           
  2611                           ; BSR set to: 0
  2612  000BD0  C08F  F060         	movff	sprintf@fval,___fttol@f1
  2613  000BD4  C090  F061         	movff	sprintf@fval+1,___fttol@f1+1
  2614  000BD8  C091  F062         	movff	sprintf@fval+2,___fttol@f1+2
  2615  000BDC  ECD6  F00F         	call	___fttol	;wreg free
  2616  000BE0  0100               	movlb	0	; () banked
  2617  000BE2  5160               	movf	?___fttol& (0+255),w,b
  2618  000BE4  0100               	movlb	0	; () banked
  2619  000BE6  1161               	iorwf	(?___fttol+1)& (0+255),w,b
  2620  000BE8  0100               	movlb	0	; () banked
  2621  000BEA  1162               	iorwf	(?___fttol+2)& (0+255),w,b
  2622  000BEC  0100               	movlb	0	; () banked
  2623  000BEE  1163               	iorwf	(?___fttol+3)& (0+255),w,b
  2624  000BF0  A4D8               	btfss	status,2,c
  2625  000BF2  D04D               	goto	l4782
  2626                           
  2627                           ; BSR set to: 0
  2628  000BF4  0100               	movlb	0	; () banked
  2629  000BF6  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2630  000BF8  D04A               	goto	l4782
  2631  000BFA  0100               	movlb	0	; () banked
  2632  000BFC  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  2633  000BFE  E105               	bnz	l4768
  2634  000C00  0E02               	movlw	2
  2635  000C02  0100               	movlb	0	; () banked
  2636  000C04  5D83               	subwf	sprintf@exp& (0+255),w,b
  2637  000C06  A0D8               	btfss	status,0,c
  2638  000C08  D042               	goto	l4782
  2639  000C0A                     l4768:
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2643  000C0A  C085  F010         	movff	sprintf@tmpval,___ftge@ff1
  2644  000C0E  C086  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2645  000C12  C087  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2646  000C16  0E70               	movlw	112
  2647  000C18  6E13               	movwf	___ftge@ff2,c
  2648  000C1A  0E89               	movlw	137
  2649  000C1C  6E14               	movwf	___ftge@ff2+1,c
  2650  000C1E  0E40               	movlw	64
  2651  000C20  6E15               	movwf	___ftge@ff2+2,c
  2652  000C22  EC73  F014         	call	___ftge	;wreg free
  2653  000C26  B0D8               	btfsc	status,0,c
  2654  000C28  D003               	goto	l4772
  2655                           
  2656                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2657  000C2A  0100               	movlb	0	; () banked
  2658  000C2C  0EF7               	movlw	247
  2659  000C2E  D002               	goto	L1
  2660  000C30                     l4772:
  2661                           
  2662                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2663  000C30  0100               	movlb	0	; () banked
  2664  000C32  0EF8               	movlw	248
  2665  000C34                     L1:
  2666  000C34  2783               	addwf	sprintf@exp& (0+255),f,b
  2667  000C36  0EFF               	movlw	255
  2668  000C38  2384               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;doprnt.c: 1124: }
  2672                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2673                           
  2674                           ; BSR set to: 0
  2675  000C3A  0100               	movlb	0	; () banked
  2676  000C3C  5183               	movf	sprintf@exp& (0+255),w,b
  2677  000C3E  ECB0  F00B         	call	_scale
  2678  000C42  C033  F085         	movff	?_scale,sprintf@tmpval
  2679  000C46  C034  F086         	movff	?_scale+1,sprintf@tmpval+1
  2680  000C4A  C035  F087         	movff	?_scale+2,sprintf@tmpval+2
  2681                           
  2682                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2683  000C4E  C08F  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  2684  000C52  C090  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2685  000C56  C091  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2686  000C5A  C085  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2687  000C5E  C086  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2688  000C62  C087  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2689  000C66  EC78  F010         	call	__tdiv_to_l_	;wreg free
  2690  000C6A  C010  F089         	movff	?__tdiv_to_l_,sprintf@val
  2691  000C6E  C011  F08A         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2692  000C72  C012  F08B         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2693  000C76  C013  F08C         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2694                           
  2695                           ;doprnt.c: 1129: fval = 0.0;
  2696  000C7A  0E00               	movlw	0
  2697  000C7C  0100               	movlb	0	; () banked
  2698  000C7E  6F8F               	movwf	sprintf@fval& (0+255),b
  2699  000C80  0E00               	movlw	0
  2700  000C82  0100               	movlb	0	; () banked
  2701  000C84  6F90               	movwf	(sprintf@fval+1)& (0+255),b
  2702  000C86  0E00               	movlw	0
  2703  000C88  0100               	movlb	0	; () banked
  2704  000C8A  6F91               	movwf	(sprintf@fval+2)& (0+255),b
  2705                           
  2706                           ;doprnt.c: 1130: } else {
  2707  000C8C  D033               	goto	l4786
  2708  000C8E                     l4782:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2712  000C8E  C08F  F060         	movff	sprintf@fval,___fttol@f1
  2713  000C92  C090  F061         	movff	sprintf@fval+1,___fttol@f1+1
  2714  000C96  C091  F062         	movff	sprintf@fval+2,___fttol@f1+2
  2715  000C9A  ECD6  F00F         	call	___fttol	;wreg free
  2716  000C9E  C060  F089         	movff	?___fttol,sprintf@val
  2717  000CA2  C061  F08A         	movff	?___fttol+1,sprintf@val+1
  2718  000CA6  C062  F08B         	movff	?___fttol+2,sprintf@val+2
  2719  000CAA  C063  F08C         	movff	?___fttol+3,sprintf@val+3
  2720                           
  2721                           ;doprnt.c: 1132: fval -= (double)val;
  2722  000CAE  C08F  F066         	movff	sprintf@fval,___ftsub@f1
  2723  000CB2  C090  F067         	movff	sprintf@fval+1,___ftsub@f1+1
  2724  000CB6  C091  F068         	movff	sprintf@fval+2,___ftsub@f1+2
  2725  000CBA  C089  F018         	movff	sprintf@val,___lltoft@c
  2726  000CBE  C08A  F019         	movff	sprintf@val+1,___lltoft@c+1
  2727  000CC2  C08B  F01A         	movff	sprintf@val+2,___lltoft@c+2
  2728  000CC6  C08C  F01B         	movff	sprintf@val+3,___lltoft@c+3
  2729  000CCA  EC07  F016         	call	___lltoft	;wreg free
  2730  000CCE  C018  F069         	movff	?___lltoft,___ftsub@f2
  2731  000CD2  C019  F06A         	movff	?___lltoft+1,___ftsub@f2+1
  2732  000CD6  C01A  F06B         	movff	?___lltoft+2,___ftsub@f2+2
  2733  000CDA  ECE6  F016         	call	___ftsub	;wreg free
  2734  000CDE  C066  F08F         	movff	?___ftsub,sprintf@fval
  2735  000CE2  C067  F090         	movff	?___ftsub+1,sprintf@fval+1
  2736  000CE6  C068  F091         	movff	?___ftsub+2,sprintf@fval+2
  2737                           
  2738                           ;doprnt.c: 1133: exp = 0;
  2739  000CEA  0E00               	movlw	0
  2740  000CEC  0100               	movlb	0	; () banked
  2741  000CEE  6F84               	movwf	(sprintf@exp+1)& (0+255),b
  2742  000CF0  0E00               	movlw	0
  2743  000CF2  6F83               	movwf	sprintf@exp& (0+255),b
  2744  000CF4                     l4786:
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;doprnt.c: 1134: }
  2748                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2749  000CF4  0E01               	movlw	1
  2750  000CF6  0100               	movlb	0	; () banked
  2751  000CF8  6F92               	movwf	sprintf@c& (0+255),b
  2752  000CFA                     l4788:
  2753                           
  2754                           ; BSR set to: 0
  2755  000CFA  0E0A               	movlw	10
  2756  000CFC  0100               	movlb	0	; () banked
  2757  000CFE  1992               	xorwf	sprintf@c& (0+255),w,b
  2758  000D00  B4D8               	btfsc	status,2,c
  2759  000D02  D01E               	goto	l4800
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1137: if(val < dpowers[c])
  2763                           
  2764                           ; BSR set to: 0
  2765                           
  2766                           ; BSR set to: 0
  2767  000D04  0100               	movlb	0	; () banked
  2768  000D06  5192               	movf	sprintf@c& (0+255),w,b
  2769  000D08  0D04               	mullw	4
  2770  000D0A  0E01               	movlw	low _dpowers
  2771  000D0C  24F3               	addwf	prodl,w,c
  2772  000D0E  6EF6               	movwf	tblptrl,c
  2773  000D10  0E08               	movlw	high _dpowers
  2774  000D12  20F4               	addwfc	prodh,w,c
  2775  000D14  6EF7               	movwf	tblptrh,c
  2776  000D16                     	if	0	;There are less than 3 active tblptr bytes
  2777  000D16                     	endif
  2778  000D16  0009               	tblrd		*+
  2779  000D18  50F5               	movf	tablat,w,c
  2780  000D1A  0100               	movlb	0	; () banked
  2781  000D1C  5D89               	subwf	sprintf@val& (0+255),w,b
  2782  000D1E  0009               	tblrd		*+
  2783  000D20  50F5               	movf	tablat,w,c
  2784  000D22  0100               	movlb	0	; () banked
  2785  000D24  598A               	subwfb	(sprintf@val+1)& (0+255),w,b
  2786  000D26  0009               	tblrd		*+
  2787  000D28  50F5               	movf	tablat,w,c
  2788  000D2A  0100               	movlb	0	; () banked
  2789  000D2C  598B               	subwfb	(sprintf@val+2)& (0+255),w,b
  2790  000D2E  0009               	tblrd		*+
  2791  000D30  50F5               	movf	tablat,w,c
  2792  000D32  0100               	movlb	0	; () banked
  2793  000D34  598C               	subwfb	(sprintf@val+3)& (0+255),w,b
  2794  000D36  A0D8               	btfss	status,0,c
  2795  000D38  D003               	goto	l4800
  2796                           
  2797                           ; BSR set to: 0
  2798                           
  2799                           ; BSR set to: 0
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1138: break;
  2803  000D3A  0100               	movlb	0	; () banked
  2804  000D3C  2B92               	incf	sprintf@c& (0+255),f,b
  2805  000D3E  D7DD               	goto	l4788
  2806  000D40                     l4800:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1175: {
  2810                           ;doprnt.c: 1188: if(flag & 0x03)
  2811  000D40  0E03               	movlw	3
  2812  000D42  0100               	movlb	0	; () banked
  2813  000D44  1581               	andwf	sprintf@flag& (0+255),w,b
  2814  000D46  0100               	movlb	0	; () banked
  2815  000D48  6F76               	movwf	??_sprintf& (0+255),b
  2816  000D4A  0E00               	movlw	0
  2817  000D4C  0100               	movlb	0	; () banked
  2818  000D4E  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  2819  000D50  0100               	movlb	0	; () banked
  2820  000D52  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2821  000D54  0100               	movlb	0	; () banked
  2822  000D56  5176               	movf	??_sprintf& (0+255),w,b
  2823  000D58  0100               	movlb	0	; () banked
  2824  000D5A  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  2825  000D5C  B4D8               	btfsc	status,2,c
  2826  000D5E  D054               	goto	l4814
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2830  000D60  C06F  FFD9         	movff	sprintf@sp,fsr2l
  2831  000D64  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  2832  000D68  0E2D               	movlw	45
  2833  000D6A  D04C               	goto	L2
  2834  000D6C                     l4804:
  2835                           
  2836                           ; BSR set to: 0
  2837  000D6C  0100               	movlb	0	; () banked
  2838  000D6E  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  2839  000D70  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;doprnt.c: 1195: }
  2843                           ;doprnt.c: 1196: while(c--) {
  2844  000D72  D04A               	goto	l4814
  2845  000D74                     l4806:
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 1200: {
  2849                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2850  000D74  C089  F010         	movff	sprintf@val,___lldiv@dividend
  2851  000D78  C08A  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  2852  000D7C  C08B  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  2853  000D80  C08C  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  2854  000D84  0100               	movlb	0	; () banked
  2855  000D86  5192               	movf	sprintf@c& (0+255),w,b
  2856  000D88  0D04               	mullw	4
  2857  000D8A  0E01               	movlw	low _dpowers
  2858  000D8C  24F3               	addwf	prodl,w,c
  2859  000D8E  6EF6               	movwf	tblptrl,c
  2860  000D90  0E08               	movlw	high _dpowers
  2861  000D92  20F4               	addwfc	prodh,w,c
  2862  000D94  6EF7               	movwf	tblptrh,c
  2863  000D96                     	if	0	;There are less than 3 active tblptr bytes
  2864  000D96                     	endif
  2865  000D96  0009               	tblrd		*+
  2866  000D98  CFF5 F014          	movff	tablat,___lldiv@divisor
  2867  000D9C  0009               	tblrd		*+
  2868  000D9E  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  2869  000DA2  0009               	tblrd		*+
  2870  000DA4  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  2871  000DA8  000A               	tblrd		*-
  2872  000DAA  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  2873  000DAE  ECFD  F014         	call	___lldiv	;wreg free
  2874  000DB2  C010  F085         	movff	?___lldiv,sprintf@tmpval
  2875  000DB6  C011  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  2876  000DBA  C012  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  2877  000DBE  C013  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  2878                           
  2879                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2880  000DC2  C085  F01D         	movff	sprintf@tmpval,___llmod@dividend
  2881  000DC6  C086  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2882  000DCA  C087  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2883  000DCE  C088  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2884  000DD2  0E0A               	movlw	10
  2885  000DD4  6E21               	movwf	___llmod@divisor,c
  2886  000DD6  0E00               	movlw	0
  2887  000DD8  6E22               	movwf	___llmod@divisor+1,c
  2888  000DDA  0E00               	movlw	0
  2889  000DDC  6E23               	movwf	___llmod@divisor+2,c
  2890  000DDE  0E00               	movlw	0
  2891  000DE0  6E24               	movwf	___llmod@divisor+3,c
  2892  000DE2  EC76  F015         	call	___llmod	;wreg free
  2893  000DE6  C01D  F085         	movff	?___llmod,sprintf@tmpval
  2894  000DEA  C01E  F086         	movff	?___llmod+1,sprintf@tmpval+1
  2895  000DEE  C01F  F087         	movff	?___llmod+2,sprintf@tmpval+2
  2896  000DF2  C020  F088         	movff	?___llmod+3,sprintf@tmpval+3
  2897                           
  2898                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2899  000DF6  0100               	movlb	0	; () banked
  2900  000DF8  5185               	movf	sprintf@tmpval& (0+255),w,b
  2901  000DFA  0F30               	addlw	48
  2902  000DFC  C06F  FFD9         	movff	sprintf@sp,fsr2l
  2903  000E00  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  2904  000E04                     L2:
  2905  000E04  6EDF               	movwf	indf2,c
  2906  000E06  D7B2               	goto	l4804
  2907  000E08                     l4814:
  2908                           
  2909                           ; BSR set to: 0
  2910  000E08  0100               	movlb	0	; () banked
  2911  000E0A  0792               	decf	sprintf@c& (0+255),f,b
  2912  000E0C  0100               	movlb	0	; () banked
  2913  000E0E  2992               	incf	sprintf@c& (0+255),w,b
  2914  000E10  B4D8               	btfsc	status,2,c
  2915  000E12  D00E               	goto	l4822
  2916  000E14  D7AF               	goto	l4806
  2917  000E16                     l4816:
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2921  000E16  C06F  FFD9         	movff	sprintf@sp,fsr2l
  2922  000E1A  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  2923  000E1E  0E30               	movlw	48
  2924  000E20  6EDF               	movwf	indf2,c
  2925                           
  2926                           ; BSR set to: 0
  2927  000E22  0100               	movlb	0	; () banked
  2928  000E24  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  2929  000E26  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1209: exp--;
  2933  000E28  0100               	movlb	0	; () banked
  2934  000E2A  0783               	decf	sprintf@exp& (0+255),f,b
  2935  000E2C  A0D8               	btfss	status,0,c
  2936  000E2E  0784               	decf	(sprintf@exp+1)& (0+255),f,b
  2937  000E30                     l4822:
  2938                           
  2939                           ; BSR set to: 0
  2940  000E30  0100               	movlb	0	; () banked
  2941  000E32  BF84               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2942  000E34  D007               	goto	l4824
  2943  000E36  0100               	movlb	0	; () banked
  2944  000E38  5184               	movf	(sprintf@exp+1)& (0+255),w,b
  2945  000E3A  E1ED               	bnz	l4816
  2946  000E3C  0100               	movlb	0	; () banked
  2947  000E3E  0583               	decf	sprintf@exp& (0+255),w,b
  2948  000E40  B0D8               	btfsc	status,0,c
  2949  000E42  D7E9               	goto	l4816
  2950  000E44                     l4824:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;doprnt.c: 1210: }
  2954                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2955  000E44  0100               	movlb	0	; () banked
  2956  000E46  BF8E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2957  000E48  D00C               	goto	l421
  2958  000E4A  0100               	movlb	0	; () banked
  2959  000E4C  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  2960  000E4E  E105               	bnz	u5350
  2961  000E50  0E09               	movlw	9
  2962  000E52  0100               	movlb	0	; () banked
  2963  000E54  5D8D               	subwf	sprintf@prec& (0+255),w,b
  2964  000E56  A0D8               	btfss	status,0,c
  2965  000E58  D004               	goto	l421
  2966  000E5A                     u5350:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2970  000E5A  0E08               	movlw	8
  2971  000E5C  0100               	movlb	0	; () banked
  2972  000E5E  6F92               	movwf	sprintf@c& (0+255),b
  2973  000E60  D002               	goto	l4828
  2974  000E62                     l421:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;doprnt.c: 1213: else
  2978                           ;doprnt.c: 1214: c = prec;
  2979  000E62  C08D  F092         	movff	sprintf@prec,sprintf@c
  2980  000E66                     l4828:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1215: prec -= c;
  2984  000E66  0100               	movlb	0	; () banked
  2985  000E68  5192               	movf	sprintf@c& (0+255),w,b
  2986  000E6A  0100               	movlb	0	; () banked
  2987  000E6C  5F8D               	subwf	sprintf@prec& (0+255),f,b
  2988  000E6E  0E00               	movlw	0
  2989  000E70  0100               	movlb	0	; () banked
  2990  000E72  BF92               	btfsc	sprintf@c& (0+255),7,b
  2991  000E74  0EFF               	movlw	255
  2992  000E76  0100               	movlb	0	; () banked
  2993  000E78  5B8E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;doprnt.c: 1219: if(c)
  2997  000E7A  0100               	movlb	0	; () banked
  2998  000E7C  5192               	movf	sprintf@c& (0+255),w,b
  2999  000E7E  0100               	movlb	0	; () banked
  3000  000E80  B4D8               	btfsc	status,2,c
  3001  000E82  D009               	goto	l4836
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3005  000E84  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3006  000E88  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3007  000E8C  0E2E               	movlw	46
  3008  000E8E  6EDF               	movwf	indf2,c
  3009                           
  3010                           ; BSR set to: 0
  3011  000E90  0100               	movlb	0	; () banked
  3012  000E92  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  3013  000E94  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  3014  000E96                     l4836:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3018  000E96  0100               	movlb	0	; () banked
  3019  000E98  5192               	movf	sprintf@c& (0+255),w,b
  3020  000E9A  ECB0  F00B         	call	_scale
  3021  000E9E  C033  F07C         	movff	?_scale,_sprintf$2127
  3022  000EA2  C034  F07D         	movff	?_scale+1,_sprintf$2127+1
  3023  000EA6  C035  F07E         	movff	?_scale+2,_sprintf$2127+2
  3024                           
  3025                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3026  000EAA  C08F  F027         	movff	sprintf@fval,___ftmul@f2
  3027  000EAE  C090  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  3028  000EB2  C091  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  3029  000EB6  C07C  F024         	movff	_sprintf$2127,___ftmul@f1
  3030  000EBA  C07D  F025         	movff	_sprintf$2127+1,___ftmul@f1+1
  3031  000EBE  C07E  F026         	movff	_sprintf$2127+2,___ftmul@f1+2
  3032  000EC2  ECA5  F011         	call	___ftmul	;wreg free
  3033  000EC6  C024  F060         	movff	?___ftmul,___fttol@f1
  3034  000ECA  C025  F061         	movff	?___ftmul+1,___fttol@f1+1
  3035  000ECE  C026  F062         	movff	?___ftmul+2,___fttol@f1+2
  3036  000ED2  ECD6  F00F         	call	___fttol	;wreg free
  3037  000ED6  C060  F089         	movff	?___fttol,sprintf@val
  3038  000EDA  C061  F08A         	movff	?___fttol+1,sprintf@val+1
  3039  000EDE  C062  F08B         	movff	?___fttol+2,sprintf@val+2
  3040  000EE2  C063  F08C         	movff	?___fttol+3,sprintf@val+3
  3041                           
  3042                           ;doprnt.c: 1228: while(c--) {
  3043  000EE6  D073               	goto	l4850
  3044  000EE8                     l4840:
  3045                           
  3046                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3047  000EE8  C089  F010         	movff	sprintf@val,___lldiv@dividend
  3048  000EEC  C08A  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  3049  000EF0  C08B  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  3050  000EF4  C08C  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  3051  000EF8  0100               	movlb	0	; () banked
  3052  000EFA  5192               	movf	sprintf@c& (0+255),w,b
  3053  000EFC  0D04               	mullw	4
  3054  000EFE  0E01               	movlw	low _dpowers
  3055  000F00  24F3               	addwf	prodl,w,c
  3056  000F02  6EF6               	movwf	tblptrl,c
  3057  000F04  0E08               	movlw	high _dpowers
  3058  000F06  20F4               	addwfc	prodh,w,c
  3059  000F08  6EF7               	movwf	tblptrh,c
  3060  000F0A                     	if	0	;There are less than 3 active tblptr bytes
  3061  000F0A                     	endif
  3062  000F0A  0009               	tblrd		*+
  3063  000F0C  CFF5 F014          	movff	tablat,___lldiv@divisor
  3064  000F10  0009               	tblrd		*+
  3065  000F12  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  3066  000F16  0009               	tblrd		*+
  3067  000F18  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  3068  000F1C  000A               	tblrd		*-
  3069  000F1E  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  3070  000F22  ECFD  F014         	call	___lldiv	;wreg free
  3071  000F26  C010  F085         	movff	?___lldiv,sprintf@tmpval
  3072  000F2A  C011  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  3073  000F2E  C012  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  3074  000F32  C013  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  3075                           
  3076                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3077  000F36  C085  F01D         	movff	sprintf@tmpval,___llmod@dividend
  3078  000F3A  C086  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3079  000F3E  C087  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3080  000F42  C088  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3081  000F46  0E0A               	movlw	10
  3082  000F48  6E21               	movwf	___llmod@divisor,c
  3083  000F4A  0E00               	movlw	0
  3084  000F4C  6E22               	movwf	___llmod@divisor+1,c
  3085  000F4E  0E00               	movlw	0
  3086  000F50  6E23               	movwf	___llmod@divisor+2,c
  3087  000F52  0E00               	movlw	0
  3088  000F54  6E24               	movwf	___llmod@divisor+3,c
  3089  000F56  EC76  F015         	call	___llmod	;wreg free
  3090  000F5A  C01D  F085         	movff	?___llmod,sprintf@tmpval
  3091  000F5E  C01E  F086         	movff	?___llmod+1,sprintf@tmpval+1
  3092  000F62  C01F  F087         	movff	?___llmod+2,sprintf@tmpval+2
  3093  000F66  C020  F088         	movff	?___llmod+3,sprintf@tmpval+3
  3094                           
  3095                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3096  000F6A  0100               	movlb	0	; () banked
  3097  000F6C  5185               	movf	sprintf@tmpval& (0+255),w,b
  3098  000F6E  0F30               	addlw	48
  3099  000F70  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3100  000F74  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3101  000F78  6EDF               	movwf	indf2,c
  3102                           
  3103                           ; BSR set to: 0
  3104  000F7A  0100               	movlb	0	; () banked
  3105  000F7C  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  3106  000F7E  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 1232: val %= dpowers[c];
  3110  000F80  C089  F01D         	movff	sprintf@val,___llmod@dividend
  3111  000F84  C08A  F01E         	movff	sprintf@val+1,___llmod@dividend+1
  3112  000F88  C08B  F01F         	movff	sprintf@val+2,___llmod@dividend+2
  3113  000F8C  C08C  F020         	movff	sprintf@val+3,___llmod@dividend+3
  3114  000F90  0100               	movlb	0	; () banked
  3115  000F92  5192               	movf	sprintf@c& (0+255),w,b
  3116  000F94  0D04               	mullw	4
  3117  000F96  0E01               	movlw	low _dpowers
  3118  000F98  24F3               	addwf	prodl,w,c
  3119  000F9A  6EF6               	movwf	tblptrl,c
  3120  000F9C  0E08               	movlw	high _dpowers
  3121  000F9E  20F4               	addwfc	prodh,w,c
  3122  000FA0  6EF7               	movwf	tblptrh,c
  3123  000FA2                     	if	0	;There are less than 3 active tblptr bytes
  3124  000FA2                     	endif
  3125  000FA2  0009               	tblrd		*+
  3126  000FA4  CFF5 F021          	movff	tablat,___llmod@divisor
  3127  000FA8  0009               	tblrd		*+
  3128  000FAA  CFF5 F022          	movff	tablat,___llmod@divisor+1
  3129  000FAE  0009               	tblrd		*+
  3130  000FB0  CFF5 F023          	movff	tablat,___llmod@divisor+2
  3131  000FB4  000A               	tblrd		*-
  3132  000FB6  CFF5 F024          	movff	tablat,___llmod@divisor+3
  3133  000FBA  EC76  F015         	call	___llmod	;wreg free
  3134  000FBE  C01D  F089         	movff	?___llmod,sprintf@val
  3135  000FC2  C01E  F08A         	movff	?___llmod+1,sprintf@val+1
  3136  000FC6  C01F  F08B         	movff	?___llmod+2,sprintf@val+2
  3137  000FCA  C020  F08C         	movff	?___llmod+3,sprintf@val+3
  3138  000FCE                     l4850:
  3139  000FCE  0100               	movlb	0	; () banked
  3140  000FD0  0792               	decf	sprintf@c& (0+255),f,b
  3141  000FD2  0100               	movlb	0	; () banked
  3142  000FD4  2992               	incf	sprintf@c& (0+255),w,b
  3143  000FD6  B4D8               	btfsc	status,2,c
  3144  000FD8  D00E               	goto	l4858
  3145  000FDA  D786               	goto	l4840
  3146  000FDC                     l4852:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3150  000FDC  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3151  000FE0  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3152  000FE4  0E30               	movlw	48
  3153  000FE6  6EDF               	movwf	indf2,c
  3154                           
  3155                           ; BSR set to: 0
  3156  000FE8  0100               	movlb	0	; () banked
  3157  000FEA  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  3158  000FEC  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;doprnt.c: 1237: prec--;
  3162  000FEE  0100               	movlb	0	; () banked
  3163  000FF0  078D               	decf	sprintf@prec& (0+255),f,b
  3164  000FF2  A0D8               	btfss	status,0,c
  3165  000FF4  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  3166  000FF6                     l4858:
  3167                           
  3168                           ; BSR set to: 0
  3169  000FF6  0100               	movlb	0	; () banked
  3170  000FF8  518D               	movf	sprintf@prec& (0+255),w,b
  3171  000FFA  0100               	movlb	0	; () banked
  3172  000FFC  118E               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3173  000FFE  B4D8               	btfsc	status,2,c
  3174  001000  D0F2               	goto	l4912
  3175  001002  D7EC               	goto	l4852
  3176  001004                     l4860:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;doprnt.c: 1246: }
  3180                           ;doprnt.c: 1253: {
  3181                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3182  001004  C07F  FFD9         	movff	sprintf@ap,fsr2l
  3183  001008  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  3184  00100C  CFDE F089          	movff	postinc2,sprintf@val
  3185  001010  CFDD F08A          	movff	postdec2,sprintf@val+1
  3186  001014  0100               	movlb	0	; () banked
  3187  001016  0E00               	movlw	0
  3188  001018  BF8A               	btfsc	(sprintf@val+1)& (0+255),7,b
  3189  00101A  0EFF               	movlw	-1
  3190  00101C  6F8B               	movwf	(sprintf@val+2)& (0+255),b
  3191  00101E  6F8C               	movwf	(sprintf@val+3)& (0+255),b
  3192                           
  3193                           ; BSR set to: 0
  3194  001020  0E02               	movlw	2
  3195  001022  0100               	movlb	0	; () banked
  3196  001024  277F               	addwf	sprintf@ap& (0+255),f,b
  3197  001026  0E00               	movlw	0
  3198  001028  2380               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1261: if((long)val < 0) {
  3202  00102A  0100               	movlb	0	; () banked
  3203  00102C  AF8C               	btfss	(sprintf@val+3)& (0+255),7,b
  3204  00102E  D00C               	goto	l4870
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;doprnt.c: 1262: flag |= 0x03;
  3208  001030  0E03               	movlw	3
  3209  001032  0100               	movlb	0	; () banked
  3210  001034  1381               	iorwf	sprintf@flag& (0+255),f,b
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;doprnt.c: 1263: val = -val;
  3214  001036  0100               	movlb	0	; () banked
  3215  001038  1F8C               	comf	(sprintf@val+3)& (0+255),f,b
  3216  00103A  1F8B               	comf	(sprintf@val+2)& (0+255),f,b
  3217  00103C  1F8A               	comf	(sprintf@val+1)& (0+255),f,b
  3218  00103E  6D89               	negf	sprintf@val& (0+255),b
  3219  001040  0E00               	movlw	0
  3220  001042  238A               	addwfc	(sprintf@val+1)& (0+255),f,b
  3221  001044  238B               	addwfc	(sprintf@val+2)& (0+255),f,b
  3222  001046  238C               	addwfc	(sprintf@val+3)& (0+255),f,b
  3223  001048                     l4870:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;doprnt.c: 1264: }
  3227                           ;doprnt.c: 1266: }
  3228                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3229  001048  0100               	movlb	0	; () banked
  3230  00104A  518D               	movf	sprintf@prec& (0+255),w,b
  3231  00104C  0100               	movlb	0	; () banked
  3232  00104E  118E               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3233  001050  A4D8               	btfss	status,2,c
  3234  001052  D00D               	goto	l4876
  3235                           
  3236                           ; BSR set to: 0
  3237  001054  0100               	movlb	0	; () banked
  3238  001056  5189               	movf	sprintf@val& (0+255),w,b
  3239  001058  0100               	movlb	0	; () banked
  3240  00105A  118A               	iorwf	(sprintf@val+1)& (0+255),w,b
  3241  00105C  0100               	movlb	0	; () banked
  3242  00105E  118B               	iorwf	(sprintf@val+2)& (0+255),w,b
  3243  001060  0100               	movlb	0	; () banked
  3244  001062  118C               	iorwf	(sprintf@val+3)& (0+255),w,b
  3245  001064  A4D8               	btfss	status,2,c
  3246  001066  D003               	goto	l4876
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;doprnt.c: 1291: prec++;
  3250  001068  0100               	movlb	0	; () banked
  3251  00106A  4B8D               	infsnz	sprintf@prec& (0+255),f,b
  3252  00106C  2B8E               	incf	(sprintf@prec+1)& (0+255),f,b
  3253  00106E                     l4876:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3257  00106E  0E01               	movlw	1
  3258  001070  0100               	movlb	0	; () banked
  3259  001072  6F92               	movwf	sprintf@c& (0+255),b
  3260  001074                     l4878:
  3261                           
  3262                           ; BSR set to: 0
  3263  001074  0E0A               	movlw	10
  3264  001076  0100               	movlb	0	; () banked
  3265  001078  1992               	xorwf	sprintf@c& (0+255),w,b
  3266  00107A  B4D8               	btfsc	status,2,c
  3267  00107C  D01E               	goto	l4890
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;doprnt.c: 1306: if(val < dpowers[c])
  3271                           
  3272                           ; BSR set to: 0
  3273                           
  3274                           ; BSR set to: 0
  3275  00107E  0100               	movlb	0	; () banked
  3276  001080  5192               	movf	sprintf@c& (0+255),w,b
  3277  001082  0D04               	mullw	4
  3278  001084  0E01               	movlw	low _dpowers
  3279  001086  24F3               	addwf	prodl,w,c
  3280  001088  6EF6               	movwf	tblptrl,c
  3281  00108A  0E08               	movlw	high _dpowers
  3282  00108C  20F4               	addwfc	prodh,w,c
  3283  00108E  6EF7               	movwf	tblptrh,c
  3284  001090                     	if	0	;There are less than 3 active tblptr bytes
  3285  001090                     	endif
  3286  001090  0009               	tblrd		*+
  3287  001092  50F5               	movf	tablat,w,c
  3288  001094  0100               	movlb	0	; () banked
  3289  001096  5D89               	subwf	sprintf@val& (0+255),w,b
  3290  001098  0009               	tblrd		*+
  3291  00109A  50F5               	movf	tablat,w,c
  3292  00109C  0100               	movlb	0	; () banked
  3293  00109E  598A               	subwfb	(sprintf@val+1)& (0+255),w,b
  3294  0010A0  0009               	tblrd		*+
  3295  0010A2  50F5               	movf	tablat,w,c
  3296  0010A4  0100               	movlb	0	; () banked
  3297  0010A6  598B               	subwfb	(sprintf@val+2)& (0+255),w,b
  3298  0010A8  0009               	tblrd		*+
  3299  0010AA  50F5               	movf	tablat,w,c
  3300  0010AC  0100               	movlb	0	; () banked
  3301  0010AE  598C               	subwfb	(sprintf@val+3)& (0+255),w,b
  3302  0010B0  A0D8               	btfss	status,0,c
  3303  0010B2  D003               	goto	l4890
  3304                           
  3305                           ; BSR set to: 0
  3306                           
  3307                           ; BSR set to: 0
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;doprnt.c: 1307: break;
  3311  0010B4  0100               	movlb	0	; () banked
  3312  0010B6  2B92               	incf	sprintf@c& (0+255),f,b
  3313  0010B8  D7DD               	goto	l4878
  3314  0010BA                     l4890:
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;doprnt.c: 1339: if(c < prec)
  3318  0010BA  0E80               	movlw	128
  3319  0010BC  0100               	movlb	0	; () banked
  3320  0010BE  BF92               	btfsc	sprintf@c& (0+255),7,b
  3321  0010C0  0E7F               	movlw	127
  3322  0010C2  0100               	movlb	0	; () banked
  3323  0010C4  6F76               	movwf	??_sprintf& (0+255),b
  3324  0010C6  0100               	movlb	0	; () banked
  3325  0010C8  518D               	movf	sprintf@prec& (0+255),w,b
  3326  0010CA  0100               	movlb	0	; () banked
  3327  0010CC  5D92               	subwf	sprintf@c& (0+255),w,b
  3328  0010CE  0100               	movlb	0	; () banked
  3329  0010D0  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  3330  0010D2  0A80               	xorlw	128
  3331  0010D4  0100               	movlb	0	; () banked
  3332  0010D6  5976               	subwfb	??_sprintf& (0+255),w,b
  3333  0010D8  B0D8               	btfsc	status,0,c
  3334  0010DA  D003               	goto	l4894
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1340: c = prec;
  3338  0010DC  C08D  F092         	movff	sprintf@prec,sprintf@c
  3339  0010E0  D018               	goto	l4898
  3340  0010E2                     l4894:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;doprnt.c: 1341: else if(prec < c)
  3344  0010E2  0100               	movlb	0	; () banked
  3345  0010E4  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  3346  0010E6  0A80               	xorlw	128
  3347  0010E8  0100               	movlb	0	; () banked
  3348  0010EA  6F76               	movwf	??_sprintf& (0+255),b
  3349  0010EC  0100               	movlb	0	; () banked
  3350  0010EE  5192               	movf	sprintf@c& (0+255),w,b
  3351  0010F0  0100               	movlb	0	; () banked
  3352  0010F2  5D8D               	subwf	sprintf@prec& (0+255),w,b
  3353  0010F4  0E80               	movlw	128
  3354  0010F6  0100               	movlb	0	; () banked
  3355  0010F8  BF92               	btfsc	sprintf@c& (0+255),7,b
  3356  0010FA  0E7F               	movlw	127
  3357  0010FC  0100               	movlb	0	; () banked
  3358  0010FE  5976               	subwfb	??_sprintf& (0+255),w,b
  3359  001100  B0D8               	btfsc	status,0,c
  3360  001102  D007               	goto	l4898
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 1342: prec = c;
  3364  001104  0100               	movlb	0	; () banked
  3365  001106  5192               	movf	sprintf@c& (0+255),w,b
  3366  001108  0100               	movlb	0	; () banked
  3367  00110A  6F8D               	movwf	sprintf@prec& (0+255),b
  3368  00110C  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  3369  00110E  BF8D               	btfsc	sprintf@prec& (0+255),7,b
  3370  001110  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  3371  001112                     l4898:
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;doprnt.c: 1422: {
  3375                           ;doprnt.c: 1438: if(flag & 0x03)
  3376  001112  0E03               	movlw	3
  3377  001114  0100               	movlb	0	; () banked
  3378  001116  1581               	andwf	sprintf@flag& (0+255),w,b
  3379  001118  0100               	movlb	0	; () banked
  3380  00111A  6F76               	movwf	??_sprintf& (0+255),b
  3381  00111C  0E00               	movlw	0
  3382  00111E  0100               	movlb	0	; () banked
  3383  001120  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  3384  001122  0100               	movlb	0	; () banked
  3385  001124  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3386  001126  0100               	movlb	0	; () banked
  3387  001128  5176               	movf	??_sprintf& (0+255),w,b
  3388  00112A  0100               	movlb	0	; () banked
  3389  00112C  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  3390  00112E  B4D8               	btfsc	status,2,c
  3391  001130  D04F               	goto	l4910
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3395  001132  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3396  001136  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3397  00113A  0E2D               	movlw	45
  3398  00113C  6EDF               	movwf	indf2,c
  3399  00113E  D045               	goto	l4908
  3400  001140                     l4904:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;doprnt.c: 1478: {
  3404                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3405  001140  C08D  F076         	movff	sprintf@prec,??_sprintf
  3406  001144  C08E  F077         	movff	sprintf@prec+1,??_sprintf+1
  3407  001148  0100               	movlb	0	; () banked
  3408  00114A  90D8               	bcf	status,0,c
  3409  00114C  3776               	rlcf	??_sprintf& (0+255),f,b
  3410  00114E  3777               	rlcf	(??_sprintf+1)& (0+255),f,b
  3411  001150  0100               	movlb	0	; () banked
  3412  001152  90D8               	bcf	status,0,c
  3413  001154  3776               	rlcf	??_sprintf& (0+255),f,b
  3414  001156  3777               	rlcf	(??_sprintf+1)& (0+255),f,b
  3415  001158  0E01               	movlw	low _dpowers
  3416  00115A  0100               	movlb	0	; () banked
  3417  00115C  2576               	addwf	??_sprintf& (0+255),w,b
  3418  00115E  6EF6               	movwf	tblptrl,c
  3419  001160  0E08               	movlw	high _dpowers
  3420  001162  2177               	addwfc	(??_sprintf+1)& (0+255),w,b
  3421  001164  6EF7               	movwf	tblptrh,c
  3422  001166                     	if	0	;There are less than 3 active tblptr bytes
  3423  001166                     	endif
  3424  001166  0009               	tblrd		*+
  3425  001168  CFF5 F014          	movff	tablat,___lldiv@divisor
  3426  00116C  0009               	tblrd		*+
  3427  00116E  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  3428  001172  0009               	tblrd		*+
  3429  001174  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  3430  001178  000A               	tblrd		*-
  3431  00117A  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  3432  00117E  C089  F010         	movff	sprintf@val,___lldiv@dividend
  3433  001182  C08A  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  3434  001186  C08B  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  3435  00118A  C08C  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  3436  00118E  ECFD  F014         	call	___lldiv	;wreg free
  3437  001192  C010  F01D         	movff	?___lldiv,___llmod@dividend
  3438  001196  C011  F01E         	movff	?___lldiv+1,___llmod@dividend+1
  3439  00119A  C012  F01F         	movff	?___lldiv+2,___llmod@dividend+2
  3440  00119E  C013  F020         	movff	?___lldiv+3,___llmod@dividend+3
  3441  0011A2  0E0A               	movlw	10
  3442  0011A4  6E21               	movwf	___llmod@divisor,c
  3443  0011A6  0E00               	movlw	0
  3444  0011A8  6E22               	movwf	___llmod@divisor+1,c
  3445  0011AA  0E00               	movlw	0
  3446  0011AC  6E23               	movwf	___llmod@divisor+2,c
  3447  0011AE  0E00               	movlw	0
  3448  0011B0  6E24               	movwf	___llmod@divisor+3,c
  3449  0011B2  EC76  F015         	call	___llmod	;wreg free
  3450  0011B6  501D               	movf	?___llmod,w,c
  3451  0011B8  0F30               	addlw	48
  3452  0011BA  0100               	movlb	0	; () banked
  3453  0011BC  6F92               	movwf	sprintf@c& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;doprnt.c: 1523: }
  3457                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3458  0011BE  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3459  0011C2  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3460  0011C6  C092  FFDF         	movff	sprintf@c,indf2
  3461  0011CA                     l4908:
  3462                           
  3463                           ; BSR set to: 0
  3464  0011CA  0100               	movlb	0	; () banked
  3465  0011CC  4B6F               	infsnz	sprintf@sp& (0+255),f,b
  3466  0011CE  2B70               	incf	(sprintf@sp+1)& (0+255),f,b
  3467  0011D0                     l4910:
  3468                           
  3469                           ; BSR set to: 0
  3470  0011D0  0100               	movlb	0	; () banked
  3471  0011D2  078D               	decf	sprintf@prec& (0+255),f,b
  3472  0011D4  A0D8               	btfss	status,0,c
  3473  0011D6  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  3474  0011D8  0100               	movlb	0	; () banked
  3475  0011DA  298D               	incf	sprintf@prec& (0+255),w,b
  3476  0011DC  E1B1               	bnz	l4904
  3477  0011DE  0100               	movlb	0	; () banked
  3478  0011E0  298E               	incf	(sprintf@prec+1)& (0+255),w,b
  3479  0011E2  A4D8               	btfss	status,2,c
  3480  0011E4  D7AD               	goto	l4904
  3481  0011E6                     l4912:
  3482                           
  3483                           ; BSR set to: 0
  3484  0011E6  C071  FFF6         	movff	sprintf@f,tblptrl
  3485  0011EA  C072  FFF7         	movff	sprintf@f+1,tblptrh
  3486  0011EE  0100               	movlb	0	; () banked
  3487  0011F0  4B71               	infsnz	sprintf@f& (0+255),f,b
  3488  0011F2  2B72               	incf	(sprintf@f+1)& (0+255),f,b
  3489  0011F4                     	if	0	;tblptru may be non-zero
  3490  0011F4                     	endif
  3491  0011F4                     	if	0	;tblptru may be non-zero
  3492  0011F4                     	endif
  3493  0011F4  0008               	tblrd		*
  3494  0011F6  CFF5 F092          	movff	tablat,sprintf@c
  3495  0011FA  0100               	movlb	0	; () banked
  3496  0011FC  5192               	movf	sprintf@c& (0+255),w,b
  3497  0011FE  A4D8               	btfss	status,2,c
  3498  001200  EF6D  F004         	goto	l4682
  3499  001204                     l4914:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 1538: *sp = 0;
  3503  001204  C06F  FFD9         	movff	sprintf@sp,fsr2l
  3504  001208  C070  FFDA         	movff	sprintf@sp+1,fsr2h
  3505  00120C  0E00               	movlw	0
  3506  00120E  6EDF               	movwf	indf2,c
  3507  001210  0012               	return	
  3508  001212                     __end_of_sprintf:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           intcon	equ	0xFF2
  3517                           intcon2	equ	0xFF1
  3518                           intcon3	equ	0xFF0
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           postdec1	equ	0xFE5
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           postdec2	equ	0xFDD
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _scale *****************
  3531 ;; Defined at:
  3532 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  scl             1    wreg     char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  scl             1   56[COMRAM] char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  3   50[COMRAM] char 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3546 ;;      Params:         3       0       0       0       0       0       0       0       0
  3547 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3549 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3550 ;;Total ram usage:        7 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    4
  3553 ;; This function calls:
  3554 ;;		___awdiv
  3555 ;;		___awmod
  3556 ;;		___ftmul
  3557 ;;		___wmul
  3558 ;; This function is called by:
  3559 ;;		_sprintf
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text2
  3564  001760                     __ptext2:
  3565                           	opt stack 0
  3566  001760                     _scale:
  3567                           	opt stack 25
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;incstack = 0
  3571                           ;scale@scl stored from wreg
  3572  001760  6E39               	movwf	scale@scl,c
  3573                           
  3574                           ;doprnt.c: 428: if(scl < 0) {
  3575  001762  AE39               	btfss	scale@scl,7,c
  3576  001764  D0FB               	goto	l4598
  3577                           
  3578                           ;doprnt.c: 429: scl = -scl;
  3579  001766  6C39               	negf	scale@scl,c
  3580                           
  3581                           ;doprnt.c: 430: if(scl>=110)
  3582  001768  5039               	movf	scale@scl,w,c
  3583  00176A  0A80               	xorlw	128
  3584  00176C  0F12               	addlw	-238
  3585  00176E  A0D8               	btfss	status,0,c
  3586  001770  D091               	goto	l4588
  3587                           
  3588                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3589  001772  0E00               	movlw	0
  3590  001774  6E21               	movwf	___wmul@multiplicand+1,c
  3591  001776  0E03               	movlw	3
  3592  001778  6E20               	movwf	___wmul@multiplicand,c
  3593  00177A  0E00               	movlw	0
  3594  00177C  6E19               	movwf	___awdiv@divisor+1,c
  3595  00177E  0E0A               	movlw	10
  3596  001780  6E18               	movwf	___awdiv@divisor,c
  3597  001782  0E00               	movlw	0
  3598  001784  6E13               	movwf	___awmod@divisor+1,c
  3599  001786  0E64               	movlw	100
  3600  001788  6E12               	movwf	___awmod@divisor,c
  3601  00178A  5039               	movf	scale@scl,w,c
  3602  00178C  6E10               	movwf	___awmod@dividend,c
  3603  00178E  6A11               	clrf	___awmod@dividend+1,c
  3604  001790  BE10               	btfsc	___awmod@dividend,7,c
  3605  001792  0611               	decf	___awmod@dividend+1,f,c
  3606  001794  EC3E  F015         	call	___awmod	;wreg free
  3607  001798  C010  F016         	movff	?___awmod,___awdiv@dividend
  3608  00179C  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  3609  0017A0  ECBB  F014         	call	___awdiv	;wreg free
  3610  0017A4  0E09               	movlw	9
  3611  0017A6  2416               	addwf	?___awdiv,w,c
  3612  0017A8  6E1E               	movwf	___wmul@multiplier,c
  3613  0017AA  0E00               	movlw	0
  3614  0017AC  2017               	addwfc	?___awdiv+1,w,c
  3615  0017AE  6E1F               	movwf	___wmul@multiplier+1,c
  3616  0017B0  ECCB  F017         	call	___wmul	;wreg free
  3617  0017B4  0E29               	movlw	low __npowers_
  3618  0017B6  241E               	addwf	?___wmul,w,c
  3619  0017B8  6EF6               	movwf	tblptrl,c
  3620  0017BA  0E08               	movlw	high __npowers_
  3621  0017BC  201F               	addwfc	?___wmul+1,w,c
  3622  0017BE  6EF7               	movwf	tblptrh,c
  3623  0017C0                     	if	0	;There are less than 3 active tblptr bytes
  3624  0017C0                     	endif
  3625  0017C0  0009               	tblrd		*+
  3626  0017C2  CFF5 F027          	movff	tablat,___ftmul@f2
  3627  0017C6  0009               	tblrd		*+
  3628  0017C8  CFF5 F028          	movff	tablat,___ftmul@f2+1
  3629  0017CC  000A               	tblrd		*-
  3630  0017CE  CFF5 F029          	movff	tablat,___ftmul@f2+2
  3631  0017D2  0E00               	movlw	0
  3632  0017D4  6E19               	movwf	___awdiv@divisor+1,c
  3633  0017D6  0E64               	movlw	100
  3634  0017D8  6E18               	movwf	___awdiv@divisor,c
  3635  0017DA  5039               	movf	scale@scl,w,c
  3636  0017DC  6E16               	movwf	___awdiv@dividend,c
  3637  0017DE  6A17               	clrf	___awdiv@dividend+1,c
  3638  0017E0  BE16               	btfsc	___awdiv@dividend,7,c
  3639  0017E2  0617               	decf	___awdiv@dividend+1,f,c
  3640  0017E4  ECBB  F014         	call	___awdiv	;wreg free
  3641  0017E8  0E12               	movlw	18
  3642  0017EA  2416               	addwf	?___awdiv,w,c
  3643  0017EC  6E1E               	movwf	___wmul@multiplier,c
  3644  0017EE  0E00               	movlw	0
  3645  0017F0  2017               	addwfc	?___awdiv+1,w,c
  3646  0017F2  6E1F               	movwf	___wmul@multiplier+1,c
  3647  0017F4  0E00               	movlw	0
  3648  0017F6  6E21               	movwf	___wmul@multiplicand+1,c
  3649  0017F8  0E03               	movlw	3
  3650  0017FA  6E20               	movwf	___wmul@multiplicand,c
  3651  0017FC  ECCB  F017         	call	___wmul	;wreg free
  3652  001800  0E29               	movlw	low __npowers_
  3653  001802  241E               	addwf	?___wmul,w,c
  3654  001804  6EF6               	movwf	tblptrl,c
  3655  001806  0E08               	movlw	high __npowers_
  3656  001808  201F               	addwfc	?___wmul+1,w,c
  3657  00180A  6EF7               	movwf	tblptrh,c
  3658  00180C                     	if	0	;There are less than 3 active tblptr bytes
  3659  00180C                     	endif
  3660  00180C  0009               	tblrd		*+
  3661  00180E  CFF5 F024          	movff	tablat,___ftmul@f1
  3662  001812  0009               	tblrd		*+
  3663  001814  CFF5 F025          	movff	tablat,___ftmul@f1+1
  3664  001818  000A               	tblrd		*-
  3665  00181A  CFF5 F026          	movff	tablat,___ftmul@f1+2
  3666  00181E  ECA5  F011         	call	___ftmul	;wreg free
  3667  001822  C024  F036         	movff	?___ftmul,_scale$2126
  3668  001826  C025  F037         	movff	?___ftmul+1,_scale$2126+1
  3669  00182A  C026  F038         	movff	?___ftmul+2,_scale$2126+2
  3670                           
  3671                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3672  00182E  C036  F024         	movff	_scale$2126,___ftmul@f1
  3673  001832  C037  F025         	movff	_scale$2126+1,___ftmul@f1+1
  3674  001836  C038  F026         	movff	_scale$2126+2,___ftmul@f1+2
  3675  00183A  0E00               	movlw	0
  3676  00183C  6E21               	movwf	___wmul@multiplicand+1,c
  3677  00183E  0E03               	movlw	3
  3678  001840  6E20               	movwf	___wmul@multiplicand,c
  3679  001842  0E00               	movlw	0
  3680  001844  6E13               	movwf	___awmod@divisor+1,c
  3681  001846  0E0A               	movlw	10
  3682  001848  6E12               	movwf	___awmod@divisor,c
  3683  00184A  5039               	movf	scale@scl,w,c
  3684  00184C  6E10               	movwf	___awmod@dividend,c
  3685  00184E  6A11               	clrf	___awmod@dividend+1,c
  3686  001850  BE10               	btfsc	___awmod@dividend,7,c
  3687  001852  0611               	decf	___awmod@dividend+1,f,c
  3688  001854  EC3E  F015         	call	___awmod	;wreg free
  3689  001858  C010  F01E         	movff	?___awmod,___wmul@multiplier
  3690  00185C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  3691  001860  ECCB  F017         	call	___wmul	;wreg free
  3692  001864  0E29               	movlw	low __npowers_
  3693  001866  241E               	addwf	?___wmul,w,c
  3694  001868  6EF6               	movwf	tblptrl,c
  3695  00186A  0E08               	movlw	high __npowers_
  3696  00186C  201F               	addwfc	?___wmul+1,w,c
  3697  00186E  6EF7               	movwf	tblptrh,c
  3698  001870                     	if	0	;There are less than 3 active tblptr bytes
  3699  001870                     	endif
  3700  001870  0009               	tblrd		*+
  3701  001872  CFF5 F027          	movff	tablat,___ftmul@f2
  3702  001876  0009               	tblrd		*+
  3703  001878  CFF5 F028          	movff	tablat,___ftmul@f2+1
  3704  00187C  000A               	tblrd		*-
  3705  00187E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  3706  001882  ECA5  F011         	call	___ftmul	;wreg free
  3707  001886  C024  F033         	movff	?___ftmul,?_scale
  3708  00188A  C025  F034         	movff	?___ftmul+1,?_scale+1
  3709  00188E  C026  F035         	movff	?___ftmul+2,?_scale+2
  3710  001892  0012               	return	
  3711  001894                     l4588:
  3712                           
  3713                           ;doprnt.c: 432: else if(scl > 10)
  3714  001894  5039               	movf	scale@scl,w,c
  3715  001896  0A80               	xorlw	128
  3716  001898  0F75               	addlw	-139
  3717  00189A  A0D8               	btfss	status,0,c
  3718  00189C  D04D               	goto	l4594
  3719                           
  3720                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3721  00189E  0E00               	movlw	0
  3722  0018A0  6E19               	movwf	___awdiv@divisor+1,c
  3723  0018A2  0E0A               	movlw	10
  3724  0018A4  6E18               	movwf	___awdiv@divisor,c
  3725  0018A6  5039               	movf	scale@scl,w,c
  3726  0018A8  6E16               	movwf	___awdiv@dividend,c
  3727  0018AA  6A17               	clrf	___awdiv@dividend+1,c
  3728  0018AC  BE16               	btfsc	___awdiv@dividend,7,c
  3729  0018AE  0617               	decf	___awdiv@dividend+1,f,c
  3730  0018B0  ECBB  F014         	call	___awdiv	;wreg free
  3731  0018B4  0E09               	movlw	9
  3732  0018B6  2416               	addwf	?___awdiv,w,c
  3733  0018B8  6E1E               	movwf	___wmul@multiplier,c
  3734  0018BA  0E00               	movlw	0
  3735  0018BC  2017               	addwfc	?___awdiv+1,w,c
  3736  0018BE  6E1F               	movwf	___wmul@multiplier+1,c
  3737  0018C0  0E00               	movlw	0
  3738  0018C2  6E21               	movwf	___wmul@multiplicand+1,c
  3739  0018C4  0E03               	movlw	3
  3740  0018C6  6E20               	movwf	___wmul@multiplicand,c
  3741  0018C8  ECCB  F017         	call	___wmul	;wreg free
  3742  0018CC  0E29               	movlw	low __npowers_
  3743  0018CE  241E               	addwf	?___wmul,w,c
  3744  0018D0  6EF6               	movwf	tblptrl,c
  3745  0018D2  0E08               	movlw	high __npowers_
  3746  0018D4  201F               	addwfc	?___wmul+1,w,c
  3747  0018D6  6EF7               	movwf	tblptrh,c
  3748  0018D8                     	if	0	;There are less than 3 active tblptr bytes
  3749  0018D8                     	endif
  3750  0018D8  0009               	tblrd		*+
  3751  0018DA  CFF5 F024          	movff	tablat,___ftmul@f1
  3752  0018DE  0009               	tblrd		*+
  3753  0018E0  CFF5 F025          	movff	tablat,___ftmul@f1+1
  3754  0018E4  000A               	tblrd		*-
  3755  0018E6  CFF5 F026          	movff	tablat,___ftmul@f1+2
  3756  0018EA  0E00               	movlw	0
  3757  0018EC  6E21               	movwf	___wmul@multiplicand+1,c
  3758  0018EE  0E03               	movlw	3
  3759  0018F0  6E20               	movwf	___wmul@multiplicand,c
  3760  0018F2  0E00               	movlw	0
  3761  0018F4  6E13               	movwf	___awmod@divisor+1,c
  3762  0018F6  0E0A               	movlw	10
  3763  0018F8  6E12               	movwf	___awmod@divisor,c
  3764  0018FA  5039               	movf	scale@scl,w,c
  3765  0018FC  6E10               	movwf	___awmod@dividend,c
  3766  0018FE  6A11               	clrf	___awmod@dividend+1,c
  3767  001900  BE10               	btfsc	___awmod@dividend,7,c
  3768  001902  0611               	decf	___awmod@dividend+1,f,c
  3769  001904  EC3E  F015         	call	___awmod	;wreg free
  3770  001908  C010  F01E         	movff	?___awmod,___wmul@multiplier
  3771  00190C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  3772  001910  ECCB  F017         	call	___wmul	;wreg free
  3773  001914  0E29               	movlw	low __npowers_
  3774  001916  241E               	addwf	?___wmul,w,c
  3775  001918  6EF6               	movwf	tblptrl,c
  3776  00191A  0E08               	movlw	high __npowers_
  3777  00191C  201F               	addwfc	?___wmul+1,w,c
  3778  00191E  6EF7               	movwf	tblptrh,c
  3779  001920                     	if	0	;There are less than 3 active tblptr bytes
  3780  001920                     	endif
  3781  001920  0009               	tblrd		*+
  3782  001922  CFF5 F027          	movff	tablat,___ftmul@f2
  3783  001926  0009               	tblrd		*+
  3784  001928  CFF5 F028          	movff	tablat,___ftmul@f2+1
  3785  00192C  000A               	tblrd		*-
  3786  00192E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  3787  001932  ECA5  F011         	call	___ftmul	;wreg free
  3788  001936  D7A7               	goto	L3
  3789  001938                     l4594:
  3790                           
  3791                           ;doprnt.c: 434: return _npowers_[scl];
  3792  001938  5039               	movf	scale@scl,w,c
  3793  00193A  0D03               	mullw	3
  3794  00193C  0E29               	movlw	low __npowers_
  3795  00193E  24F3               	addwf	prodl,w,c
  3796  001940  6EF6               	movwf	tblptrl,c
  3797  001942  0E08               	movlw	high __npowers_
  3798  001944  20F4               	addwfc	prodh,w,c
  3799  001946  6EF7               	movwf	tblptrh,c
  3800  001948                     	if	0	;There are less than 3 active tblptr bytes
  3801  001948                     	endif
  3802  001948  0009               	tblrd		*+
  3803  00194A  CFF5 F033          	movff	tablat,?_scale
  3804  00194E  0009               	tblrd		*+
  3805  001950  CFF5 F034          	movff	tablat,?_scale+1
  3806  001954  000A               	tblrd		*-
  3807  001956  CFF5 F035          	movff	tablat,?_scale+2
  3808  00195A  0012               	return	
  3809  00195C                     l4598:
  3810                           
  3811                           ;doprnt.c: 435: }
  3812                           ;doprnt.c: 436: if(scl>=110)
  3813  00195C  5039               	movf	scale@scl,w,c
  3814  00195E  0A80               	xorlw	128
  3815  001960  0F12               	addlw	-238
  3816  001962  A0D8               	btfss	status,0,c
  3817  001964  D091               	goto	l4606
  3818                           
  3819                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3820  001966  0E00               	movlw	0
  3821  001968  6E21               	movwf	___wmul@multiplicand+1,c
  3822  00196A  0E03               	movlw	3
  3823  00196C  6E20               	movwf	___wmul@multiplicand,c
  3824  00196E  0E00               	movlw	0
  3825  001970  6E19               	movwf	___awdiv@divisor+1,c
  3826  001972  0E0A               	movlw	10
  3827  001974  6E18               	movwf	___awdiv@divisor,c
  3828  001976  0E00               	movlw	0
  3829  001978  6E13               	movwf	___awmod@divisor+1,c
  3830  00197A  0E64               	movlw	100
  3831  00197C  6E12               	movwf	___awmod@divisor,c
  3832  00197E  5039               	movf	scale@scl,w,c
  3833  001980  6E10               	movwf	___awmod@dividend,c
  3834  001982  6A11               	clrf	___awmod@dividend+1,c
  3835  001984  BE10               	btfsc	___awmod@dividend,7,c
  3836  001986  0611               	decf	___awmod@dividend+1,f,c
  3837  001988  EC3E  F015         	call	___awmod	;wreg free
  3838  00198C  C010  F016         	movff	?___awmod,___awdiv@dividend
  3839  001990  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  3840  001994  ECBB  F014         	call	___awdiv	;wreg free
  3841  001998  0E09               	movlw	9
  3842  00199A  2416               	addwf	?___awdiv,w,c
  3843  00199C  6E1E               	movwf	___wmul@multiplier,c
  3844  00199E  0E00               	movlw	0
  3845  0019A0  2017               	addwfc	?___awdiv+1,w,c
  3846  0019A2  6E1F               	movwf	___wmul@multiplier+1,c
  3847  0019A4  ECCB  F017         	call	___wmul	;wreg free
  3848  0019A8  0E50               	movlw	low __powers_
  3849  0019AA  241E               	addwf	?___wmul,w,c
  3850  0019AC  6EF6               	movwf	tblptrl,c
  3851  0019AE  0E08               	movlw	high __powers_
  3852  0019B0  201F               	addwfc	?___wmul+1,w,c
  3853  0019B2  6EF7               	movwf	tblptrh,c
  3854  0019B4                     	if	0	;There are less than 3 active tblptr bytes
  3855  0019B4                     	endif
  3856  0019B4  0009               	tblrd		*+
  3857  0019B6  CFF5 F027          	movff	tablat,___ftmul@f2
  3858  0019BA  0009               	tblrd		*+
  3859  0019BC  CFF5 F028          	movff	tablat,___ftmul@f2+1
  3860  0019C0  000A               	tblrd		*-
  3861  0019C2  CFF5 F029          	movff	tablat,___ftmul@f2+2
  3862  0019C6  0E00               	movlw	0
  3863  0019C8  6E19               	movwf	___awdiv@divisor+1,c
  3864  0019CA  0E64               	movlw	100
  3865  0019CC  6E18               	movwf	___awdiv@divisor,c
  3866  0019CE  5039               	movf	scale@scl,w,c
  3867  0019D0  6E16               	movwf	___awdiv@dividend,c
  3868  0019D2  6A17               	clrf	___awdiv@dividend+1,c
  3869  0019D4  BE16               	btfsc	___awdiv@dividend,7,c
  3870  0019D6  0617               	decf	___awdiv@dividend+1,f,c
  3871  0019D8  ECBB  F014         	call	___awdiv	;wreg free
  3872  0019DC  0E12               	movlw	18
  3873  0019DE  2416               	addwf	?___awdiv,w,c
  3874  0019E0  6E1E               	movwf	___wmul@multiplier,c
  3875  0019E2  0E00               	movlw	0
  3876  0019E4  2017               	addwfc	?___awdiv+1,w,c
  3877  0019E6  6E1F               	movwf	___wmul@multiplier+1,c
  3878  0019E8  0E00               	movlw	0
  3879  0019EA  6E21               	movwf	___wmul@multiplicand+1,c
  3880  0019EC  0E03               	movlw	3
  3881  0019EE  6E20               	movwf	___wmul@multiplicand,c
  3882  0019F0  ECCB  F017         	call	___wmul	;wreg free
  3883  0019F4  0E50               	movlw	low __powers_
  3884  0019F6  241E               	addwf	?___wmul,w,c
  3885  0019F8  6EF6               	movwf	tblptrl,c
  3886  0019FA  0E08               	movlw	high __powers_
  3887  0019FC  201F               	addwfc	?___wmul+1,w,c
  3888  0019FE  6EF7               	movwf	tblptrh,c
  3889  001A00                     	if	0	;There are less than 3 active tblptr bytes
  3890  001A00                     	endif
  3891  001A00  0009               	tblrd		*+
  3892  001A02  CFF5 F024          	movff	tablat,___ftmul@f1
  3893  001A06  0009               	tblrd		*+
  3894  001A08  CFF5 F025          	movff	tablat,___ftmul@f1+1
  3895  001A0C  000A               	tblrd		*-
  3896  001A0E  CFF5 F026          	movff	tablat,___ftmul@f1+2
  3897  001A12  ECA5  F011         	call	___ftmul	;wreg free
  3898  001A16  C024  F036         	movff	?___ftmul,_scale$2126
  3899  001A1A  C025  F037         	movff	?___ftmul+1,_scale$2126+1
  3900  001A1E  C026  F038         	movff	?___ftmul+2,_scale$2126+2
  3901                           
  3902                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3903  001A22  C036  F024         	movff	_scale$2126,___ftmul@f1
  3904  001A26  C037  F025         	movff	_scale$2126+1,___ftmul@f1+1
  3905  001A2A  C038  F026         	movff	_scale$2126+2,___ftmul@f1+2
  3906  001A2E  0E00               	movlw	0
  3907  001A30  6E21               	movwf	___wmul@multiplicand+1,c
  3908  001A32  0E03               	movlw	3
  3909  001A34  6E20               	movwf	___wmul@multiplicand,c
  3910  001A36  0E00               	movlw	0
  3911  001A38  6E13               	movwf	___awmod@divisor+1,c
  3912  001A3A  0E0A               	movlw	10
  3913  001A3C  6E12               	movwf	___awmod@divisor,c
  3914  001A3E  5039               	movf	scale@scl,w,c
  3915  001A40  6E10               	movwf	___awmod@dividend,c
  3916  001A42  6A11               	clrf	___awmod@dividend+1,c
  3917  001A44  BE10               	btfsc	___awmod@dividend,7,c
  3918  001A46  0611               	decf	___awmod@dividend+1,f,c
  3919  001A48  EC3E  F015         	call	___awmod	;wreg free
  3920  001A4C  C010  F01E         	movff	?___awmod,___wmul@multiplier
  3921  001A50  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  3922  001A54  ECCB  F017         	call	___wmul	;wreg free
  3923  001A58  0E50               	movlw	low __powers_
  3924  001A5A  241E               	addwf	?___wmul,w,c
  3925  001A5C  6EF6               	movwf	tblptrl,c
  3926  001A5E  0E08               	movlw	high __powers_
  3927  001A60  201F               	addwfc	?___wmul+1,w,c
  3928  001A62  6EF7               	movwf	tblptrh,c
  3929  001A64                     	if	0	;There are less than 3 active tblptr bytes
  3930  001A64                     	endif
  3931  001A64  0009               	tblrd		*+
  3932  001A66  CFF5 F027          	movff	tablat,___ftmul@f2
  3933  001A6A  0009               	tblrd		*+
  3934  001A6C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  3935  001A70  000A               	tblrd		*-
  3936  001A72  CFF5 F029          	movff	tablat,___ftmul@f2+2
  3937  001A76  ECA5  F011         	call	___ftmul	;wreg free
  3938  001A7A  C024  F033         	movff	?___ftmul,?_scale
  3939  001A7E  C025  F034         	movff	?___ftmul+1,?_scale+1
  3940  001A82  C026  F035         	movff	?___ftmul+2,?_scale+2
  3941  001A86  0012               	return	
  3942  001A88                     l4606:
  3943                           
  3944                           ;doprnt.c: 438: else if(scl > 10)
  3945  001A88  5039               	movf	scale@scl,w,c
  3946  001A8A  0A80               	xorlw	128
  3947  001A8C  0F75               	addlw	-139
  3948  001A8E  A0D8               	btfss	status,0,c
  3949  001A90  D04D               	goto	l4612
  3950                           
  3951                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3952  001A92  0E00               	movlw	0
  3953  001A94  6E19               	movwf	___awdiv@divisor+1,c
  3954  001A96  0E0A               	movlw	10
  3955  001A98  6E18               	movwf	___awdiv@divisor,c
  3956  001A9A  5039               	movf	scale@scl,w,c
  3957  001A9C  6E16               	movwf	___awdiv@dividend,c
  3958  001A9E  6A17               	clrf	___awdiv@dividend+1,c
  3959  001AA0  BE16               	btfsc	___awdiv@dividend,7,c
  3960  001AA2  0617               	decf	___awdiv@dividend+1,f,c
  3961  001AA4  ECBB  F014         	call	___awdiv	;wreg free
  3962  001AA8  0E09               	movlw	9
  3963  001AAA  2416               	addwf	?___awdiv,w,c
  3964  001AAC  6E1E               	movwf	___wmul@multiplier,c
  3965  001AAE  0E00               	movlw	0
  3966  001AB0  2017               	addwfc	?___awdiv+1,w,c
  3967  001AB2  6E1F               	movwf	___wmul@multiplier+1,c
  3968  001AB4  0E00               	movlw	0
  3969  001AB6  6E21               	movwf	___wmul@multiplicand+1,c
  3970  001AB8  0E03               	movlw	3
  3971  001ABA  6E20               	movwf	___wmul@multiplicand,c
  3972  001ABC  ECCB  F017         	call	___wmul	;wreg free
  3973  001AC0  0E50               	movlw	low __powers_
  3974  001AC2  241E               	addwf	?___wmul,w,c
  3975  001AC4  6EF6               	movwf	tblptrl,c
  3976  001AC6  0E08               	movlw	high __powers_
  3977  001AC8  201F               	addwfc	?___wmul+1,w,c
  3978  001ACA  6EF7               	movwf	tblptrh,c
  3979  001ACC                     	if	0	;There are less than 3 active tblptr bytes
  3980  001ACC                     	endif
  3981  001ACC  0009               	tblrd		*+
  3982  001ACE  CFF5 F024          	movff	tablat,___ftmul@f1
  3983  001AD2  0009               	tblrd		*+
  3984  001AD4  CFF5 F025          	movff	tablat,___ftmul@f1+1
  3985  001AD8  000A               	tblrd		*-
  3986  001ADA  CFF5 F026          	movff	tablat,___ftmul@f1+2
  3987  001ADE  0E00               	movlw	0
  3988  001AE0  6E21               	movwf	___wmul@multiplicand+1,c
  3989  001AE2  0E03               	movlw	3
  3990  001AE4  6E20               	movwf	___wmul@multiplicand,c
  3991  001AE6  0E00               	movlw	0
  3992  001AE8  6E13               	movwf	___awmod@divisor+1,c
  3993  001AEA  0E0A               	movlw	10
  3994  001AEC  6E12               	movwf	___awmod@divisor,c
  3995  001AEE  5039               	movf	scale@scl,w,c
  3996  001AF0  6E10               	movwf	___awmod@dividend,c
  3997  001AF2  6A11               	clrf	___awmod@dividend+1,c
  3998  001AF4  BE10               	btfsc	___awmod@dividend,7,c
  3999  001AF6  0611               	decf	___awmod@dividend+1,f,c
  4000  001AF8  EC3E  F015         	call	___awmod	;wreg free
  4001  001AFC  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4002  001B00  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4003  001B04  ECCB  F017         	call	___wmul	;wreg free
  4004  001B08  0E50               	movlw	low __powers_
  4005  001B0A  241E               	addwf	?___wmul,w,c
  4006  001B0C  6EF6               	movwf	tblptrl,c
  4007  001B0E  0E08               	movlw	high __powers_
  4008  001B10  201F               	addwfc	?___wmul+1,w,c
  4009  001B12  6EF7               	movwf	tblptrh,c
  4010  001B14                     	if	0	;There are less than 3 active tblptr bytes
  4011  001B14                     	endif
  4012  001B14  0009               	tblrd		*+
  4013  001B16  CFF5 F027          	movff	tablat,___ftmul@f2
  4014  001B1A  0009               	tblrd		*+
  4015  001B1C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4016  001B20  000A               	tblrd		*-
  4017  001B22  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4018  001B26  ECA5  F011         	call	___ftmul	;wreg free
  4019  001B2A  D7A7               	goto	L4
  4020  001B2C                     l4612:
  4021                           
  4022                           ;doprnt.c: 440: return _powers_[scl];
  4023  001B2C  5039               	movf	scale@scl,w,c
  4024  001B2E  0D03               	mullw	3
  4025  001B30  0E50               	movlw	low __powers_
  4026  001B32  24F3               	addwf	prodl,w,c
  4027  001B34  6EF6               	movwf	tblptrl,c
  4028  001B36  0E08               	movlw	high __powers_
  4029  001B38  20F4               	addwfc	prodh,w,c
  4030  001B3A  6EF7               	movwf	tblptrh,c
  4031  001B3C                     	if	0	;There are less than 3 active tblptr bytes
  4032  001B3C                     	endif
  4033  001B3C  0009               	tblrd		*+
  4034  001B3E  CFF5 F033          	movff	tablat,?_scale
  4035  001B42  0009               	tblrd		*+
  4036  001B44  CFF5 F034          	movff	tablat,?_scale+1
  4037  001B48  000A               	tblrd		*-
  4038  001B4A  CFF5 F035          	movff	tablat,?_scale+2
  4039  001B4E  0012               	return	
  4040  001B50                     __end_of_scale:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           intcon2	equ	0xFF1
  4050                           intcon3	equ	0xFF0
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _isdigit *****************
  4063 ;; Defined at:
  4064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  c               1    wreg     unsigned char 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  c               1   17[COMRAM] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;		None               void
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0
  4079 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4080 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4081 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4082 ;;Total ram usage:        3 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    2
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_sprintf
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text3
  4093  003000                     __ptext3:
  4094                           	opt stack 0
  4095  003000                     _isdigit:
  4096                           	opt stack 27
  4097                           
  4098                           ;incstack = 0
  4099                           ;isdigit@c stored from wreg
  4100  003000  6E12               	movwf	isdigit@c,c
  4101  003002  0E00               	movlw	0
  4102  003004  6E11               	movwf	_isdigit$1768,c
  4103  003006  0E3A               	movlw	58
  4104  003008  6012               	cpfslt	isdigit@c,c
  4105  00300A  D005               	goto	l3296
  4106  00300C  0E2F               	movlw	47
  4107  00300E  6412               	cpfsgt	isdigit@c,c
  4108  003010  D002               	goto	l3296
  4109  003012  0E01               	movlw	1
  4110  003014  6E11               	movwf	_isdigit$1768,c
  4111  003016                     l3296:
  4112  003016  C011  F010         	movff	_isdigit$1768,??_isdigit
  4113  00301A  3010               	rrcf	??_isdigit,w,c
  4114  00301C  0012               	return	
  4115  00301E                     __end_of_isdigit:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           intcon2	equ	0xFF1
  4125                           intcon3	equ	0xFF0
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           postdec2	equ	0xFDD
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function _fround *****************
  4138 ;; Defined at:
  4139 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  prec            1    wreg     unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  prec            1   59[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  3   50[COMRAM] unsigned char 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4153 ;;      Params:         3       0       0       0       0       0       0       0       0
  4154 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4156 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4157 ;;Total ram usage:       10 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    4
  4160 ;; This function calls:
  4161 ;;		___awdiv
  4162 ;;		___awmod
  4163 ;;		___ftmul
  4164 ;;		___wmul
  4165 ;; This function is called by:
  4166 ;;		_sprintf
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text4
  4171  001B50                     __ptext4:
  4172                           	opt stack 0
  4173  001B50                     _fround:
  4174                           	opt stack 25
  4175                           
  4176                           ;incstack = 0
  4177                           ;fround@prec stored from wreg
  4178  001B50  6E3C               	movwf	fround@prec,c
  4179                           
  4180                           ;doprnt.c: 413: if(prec>=110)
  4181  001B52  0E6D               	movlw	109
  4182  001B54  643C               	cpfsgt	fround@prec,c
  4183  001B56  D09F               	goto	l4566
  4184                           
  4185                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4186  001B58  0E00               	movlw	0
  4187  001B5A  6E21               	movwf	___wmul@multiplicand+1,c
  4188  001B5C  0E03               	movlw	3
  4189  001B5E  6E20               	movwf	___wmul@multiplicand,c
  4190  001B60  0E00               	movlw	0
  4191  001B62  6E19               	movwf	___awdiv@divisor+1,c
  4192  001B64  0E0A               	movlw	10
  4193  001B66  6E18               	movwf	___awdiv@divisor,c
  4194  001B68  0E00               	movlw	0
  4195  001B6A  6E13               	movwf	___awmod@divisor+1,c
  4196  001B6C  0E64               	movlw	100
  4197  001B6E  6E12               	movwf	___awmod@divisor,c
  4198  001B70  C03C  F010         	movff	fround@prec,___awmod@dividend
  4199  001B74  6A11               	clrf	___awmod@dividend+1,c
  4200  001B76  EC3E  F015         	call	___awmod	;wreg free
  4201  001B7A  C010  F016         	movff	?___awmod,___awdiv@dividend
  4202  001B7E  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4203  001B82  ECBB  F014         	call	___awdiv	;wreg free
  4204  001B86  0E09               	movlw	9
  4205  001B88  2416               	addwf	?___awdiv,w,c
  4206  001B8A  6E1E               	movwf	___wmul@multiplier,c
  4207  001B8C  0E00               	movlw	0
  4208  001B8E  2017               	addwfc	?___awdiv+1,w,c
  4209  001B90  6E1F               	movwf	___wmul@multiplier+1,c
  4210  001B92  ECCB  F017         	call	___wmul	;wreg free
  4211  001B96  0E29               	movlw	low __npowers_
  4212  001B98  241E               	addwf	?___wmul,w,c
  4213  001B9A  6EF6               	movwf	tblptrl,c
  4214  001B9C  0E08               	movlw	high __npowers_
  4215  001B9E  201F               	addwfc	?___wmul+1,w,c
  4216  001BA0  6EF7               	movwf	tblptrh,c
  4217  001BA2                     	if	0	;There are less than 3 active tblptr bytes
  4218  001BA2                     	endif
  4219  001BA2  0009               	tblrd		*+
  4220  001BA4  CFF5 F027          	movff	tablat,___ftmul@f2
  4221  001BA8  0009               	tblrd		*+
  4222  001BAA  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4223  001BAE  000A               	tblrd		*-
  4224  001BB0  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4225  001BB4  0E00               	movlw	0
  4226  001BB6  6E19               	movwf	___awdiv@divisor+1,c
  4227  001BB8  0E64               	movlw	100
  4228  001BBA  6E18               	movwf	___awdiv@divisor,c
  4229  001BBC  C03C  F016         	movff	fround@prec,___awdiv@dividend
  4230  001BC0  6A17               	clrf	___awdiv@dividend+1,c
  4231  001BC2  ECBB  F014         	call	___awdiv	;wreg free
  4232  001BC6  0E12               	movlw	18
  4233  001BC8  2416               	addwf	?___awdiv,w,c
  4234  001BCA  6E1E               	movwf	___wmul@multiplier,c
  4235  001BCC  0E00               	movlw	0
  4236  001BCE  2017               	addwfc	?___awdiv+1,w,c
  4237  001BD0  6E1F               	movwf	___wmul@multiplier+1,c
  4238  001BD2  0E00               	movlw	0
  4239  001BD4  6E21               	movwf	___wmul@multiplicand+1,c
  4240  001BD6  0E03               	movlw	3
  4241  001BD8  6E20               	movwf	___wmul@multiplicand,c
  4242  001BDA  ECCB  F017         	call	___wmul	;wreg free
  4243  001BDE  0E29               	movlw	low __npowers_
  4244  001BE0  241E               	addwf	?___wmul,w,c
  4245  001BE2  6EF6               	movwf	tblptrl,c
  4246  001BE4  0E08               	movlw	high __npowers_
  4247  001BE6  201F               	addwfc	?___wmul+1,w,c
  4248  001BE8  6EF7               	movwf	tblptrh,c
  4249  001BEA                     	if	0	;There are less than 3 active tblptr bytes
  4250  001BEA                     	endif
  4251  001BEA  0009               	tblrd		*+
  4252  001BEC  CFF5 F024          	movff	tablat,___ftmul@f1
  4253  001BF0  0009               	tblrd		*+
  4254  001BF2  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4255  001BF6  000A               	tblrd		*-
  4256  001BF8  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4257  001BFC  ECA5  F011         	call	___ftmul	;wreg free
  4258  001C00  C024  F039         	movff	?___ftmul,_fround$2124
  4259  001C04  C025  F03A         	movff	?___ftmul+1,_fround$2124+1
  4260  001C08  C026  F03B         	movff	?___ftmul+2,_fround$2124+2
  4261                           
  4262                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4263  001C0C  0E00               	movlw	0
  4264  001C0E  6E21               	movwf	___wmul@multiplicand+1,c
  4265  001C10  0E03               	movlw	3
  4266  001C12  6E20               	movwf	___wmul@multiplicand,c
  4267  001C14  0E00               	movlw	0
  4268  001C16  6E13               	movwf	___awmod@divisor+1,c
  4269  001C18  0E0A               	movlw	10
  4270  001C1A  6E12               	movwf	___awmod@divisor,c
  4271  001C1C  C03C  F010         	movff	fround@prec,___awmod@dividend
  4272  001C20  6A11               	clrf	___awmod@dividend+1,c
  4273  001C22  EC3E  F015         	call	___awmod	;wreg free
  4274  001C26  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4275  001C2A  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4276  001C2E  ECCB  F017         	call	___wmul	;wreg free
  4277  001C32  0E29               	movlw	low __npowers_
  4278  001C34  241E               	addwf	?___wmul,w,c
  4279  001C36  6EF6               	movwf	tblptrl,c
  4280  001C38  0E08               	movlw	high __npowers_
  4281  001C3A  201F               	addwfc	?___wmul+1,w,c
  4282  001C3C  6EF7               	movwf	tblptrh,c
  4283  001C3E                     	if	0	;There are less than 3 active tblptr bytes
  4284  001C3E                     	endif
  4285  001C3E  0009               	tblrd		*+
  4286  001C40  CFF5 F027          	movff	tablat,___ftmul@f2
  4287  001C44  0009               	tblrd		*+
  4288  001C46  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4289  001C4A  000A               	tblrd		*-
  4290  001C4C  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4291  001C50  C039  F024         	movff	_fround$2124,___ftmul@f1
  4292  001C54  C03A  F025         	movff	_fround$2124+1,___ftmul@f1+1
  4293  001C58  C03B  F026         	movff	_fround$2124+2,___ftmul@f1+2
  4294  001C5C  ECA5  F011         	call	___ftmul	;wreg free
  4295  001C60  C024  F036         	movff	?___ftmul,_fround$2125
  4296  001C64  C025  F037         	movff	?___ftmul+1,_fround$2125+1
  4297  001C68  C026  F038         	movff	?___ftmul+2,_fround$2125+2
  4298                           
  4299                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4300  001C6C  C036  F024         	movff	_fround$2125,___ftmul@f1
  4301  001C70  C037  F025         	movff	_fround$2125+1,___ftmul@f1+1
  4302  001C74  C038  F026         	movff	_fround$2125+2,___ftmul@f1+2
  4303  001C78  0E00               	movlw	0
  4304  001C7A  6E27               	movwf	___ftmul@f2,c
  4305  001C7C  0E00               	movlw	0
  4306  001C7E  6E28               	movwf	___ftmul@f2+1,c
  4307  001C80  0E3F               	movlw	63
  4308  001C82  6E29               	movwf	___ftmul@f2+2,c
  4309  001C84  ECA5  F011         	call	___ftmul	;wreg free
  4310  001C88  C024  F033         	movff	?___ftmul,?_fround
  4311  001C8C  C025  F034         	movff	?___ftmul+1,?_fround+1
  4312  001C90  C026  F035         	movff	?___ftmul+2,?_fround+2
  4313  001C94  0012               	return	
  4314  001C96                     l4566:
  4315                           
  4316                           ;doprnt.c: 415: else if(prec > 10)
  4317  001C96  0E0A               	movlw	10
  4318  001C98  643C               	cpfsgt	fround@prec,c
  4319  001C9A  D05D               	goto	l4574
  4320                           
  4321                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4322  001C9C  0E00               	movlw	0
  4323  001C9E  6E21               	movwf	___wmul@multiplicand+1,c
  4324  001CA0  0E03               	movlw	3
  4325  001CA2  6E20               	movwf	___wmul@multiplicand,c
  4326  001CA4  0E00               	movlw	0
  4327  001CA6  6E13               	movwf	___awmod@divisor+1,c
  4328  001CA8  0E0A               	movlw	10
  4329  001CAA  6E12               	movwf	___awmod@divisor,c
  4330  001CAC  C03C  F010         	movff	fround@prec,___awmod@dividend
  4331  001CB0  6A11               	clrf	___awmod@dividend+1,c
  4332  001CB2  EC3E  F015         	call	___awmod	;wreg free
  4333  001CB6  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4334  001CBA  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4335  001CBE  ECCB  F017         	call	___wmul	;wreg free
  4336  001CC2  0E29               	movlw	low __npowers_
  4337  001CC4  241E               	addwf	?___wmul,w,c
  4338  001CC6  6EF6               	movwf	tblptrl,c
  4339  001CC8  0E08               	movlw	high __npowers_
  4340  001CCA  201F               	addwfc	?___wmul+1,w,c
  4341  001CCC  6EF7               	movwf	tblptrh,c
  4342  001CCE                     	if	0	;There are less than 3 active tblptr bytes
  4343  001CCE                     	endif
  4344  001CCE  0009               	tblrd		*+
  4345  001CD0  CFF5 F027          	movff	tablat,___ftmul@f2
  4346  001CD4  0009               	tblrd		*+
  4347  001CD6  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4348  001CDA  000A               	tblrd		*-
  4349  001CDC  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4350  001CE0  0E00               	movlw	0
  4351  001CE2  6E19               	movwf	___awdiv@divisor+1,c
  4352  001CE4  0E0A               	movlw	10
  4353  001CE6  6E18               	movwf	___awdiv@divisor,c
  4354  001CE8  C03C  F016         	movff	fround@prec,___awdiv@dividend
  4355  001CEC  6A17               	clrf	___awdiv@dividend+1,c
  4356  001CEE  ECBB  F014         	call	___awdiv	;wreg free
  4357  001CF2  0E09               	movlw	9
  4358  001CF4  2416               	addwf	?___awdiv,w,c
  4359  001CF6  6E1E               	movwf	___wmul@multiplier,c
  4360  001CF8  0E00               	movlw	0
  4361  001CFA  2017               	addwfc	?___awdiv+1,w,c
  4362  001CFC  6E1F               	movwf	___wmul@multiplier+1,c
  4363  001CFE  0E00               	movlw	0
  4364  001D00  6E21               	movwf	___wmul@multiplicand+1,c
  4365  001D02  0E03               	movlw	3
  4366  001D04  6E20               	movwf	___wmul@multiplicand,c
  4367  001D06  ECCB  F017         	call	___wmul	;wreg free
  4368  001D0A  0E29               	movlw	low __npowers_
  4369  001D0C  241E               	addwf	?___wmul,w,c
  4370  001D0E  6EF6               	movwf	tblptrl,c
  4371  001D10  0E08               	movlw	high __npowers_
  4372  001D12  201F               	addwfc	?___wmul+1,w,c
  4373  001D14  6EF7               	movwf	tblptrh,c
  4374  001D16                     	if	0	;There are less than 3 active tblptr bytes
  4375  001D16                     	endif
  4376  001D16  0009               	tblrd		*+
  4377  001D18  CFF5 F024          	movff	tablat,___ftmul@f1
  4378  001D1C  0009               	tblrd		*+
  4379  001D1E  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4380  001D22  000A               	tblrd		*-
  4381  001D24  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4382  001D28  ECA5  F011         	call	___ftmul	;wreg free
  4383  001D2C  C024  F039         	movff	?___ftmul,_fround$2124
  4384  001D30  C025  F03A         	movff	?___ftmul+1,_fround$2124+1
  4385  001D34  C026  F03B         	movff	?___ftmul+2,_fround$2124+2
  4386                           
  4387                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4388  001D38  C039  F024         	movff	_fround$2124,___ftmul@f1
  4389  001D3C  C03A  F025         	movff	_fround$2124+1,___ftmul@f1+1
  4390  001D40  C03B  F026         	movff	_fround$2124+2,___ftmul@f1+2
  4391  001D44  0E00               	movlw	0
  4392  001D46  6E27               	movwf	___ftmul@f2,c
  4393  001D48  0E00               	movlw	0
  4394  001D4A  6E28               	movwf	___ftmul@f2+1,c
  4395  001D4C  0E3F               	movlw	63
  4396  001D4E  6E29               	movwf	___ftmul@f2+2,c
  4397  001D50  ECA5  F011         	call	___ftmul	;wreg free
  4398  001D54  D799               	goto	L5
  4399  001D56                     l4574:
  4400                           
  4401                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4402  001D56  503C               	movf	fround@prec,w,c
  4403  001D58  0D03               	mullw	3
  4404  001D5A  0E29               	movlw	low __npowers_
  4405  001D5C  24F3               	addwf	prodl,w,c
  4406  001D5E  6EF6               	movwf	tblptrl,c
  4407  001D60  0E08               	movlw	high __npowers_
  4408  001D62  20F4               	addwfc	prodh,w,c
  4409  001D64  6EF7               	movwf	tblptrh,c
  4410  001D66                     	if	0	;There are less than 3 active tblptr bytes
  4411  001D66                     	endif
  4412  001D66  0009               	tblrd		*+
  4413  001D68  CFF5 F024          	movff	tablat,___ftmul@f1
  4414  001D6C  0009               	tblrd		*+
  4415  001D6E  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4416  001D72  000A               	tblrd		*-
  4417  001D74  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4418  001D78  0E00               	movlw	0
  4419  001D7A  6E27               	movwf	___ftmul@f2,c
  4420  001D7C  0E00               	movlw	0
  4421  001D7E  6E28               	movwf	___ftmul@f2+1,c
  4422  001D80  0E3F               	movlw	63
  4423  001D82  6E29               	movwf	___ftmul@f2+2,c
  4424  001D84  ECA5  F011         	call	___ftmul	;wreg free
  4425  001D88  C024  F033         	movff	?___ftmul,?_fround
  4426  001D8C  C025  F034         	movff	?___ftmul+1,?_fround+1
  4427  001D90  C026  F035         	movff	?___ftmul+2,?_fround+2
  4428  001D94  0012               	return	
  4429  001D96                     __end_of_fround:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           intcon	equ	0xFF2
  4438                           intcon2	equ	0xFF1
  4439                           intcon3	equ	0xFF0
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function ___wmul *****************
  4452 ;; Defined at:
  4453 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  multiplier      2   29[COMRAM] unsigned int 
  4456 ;;  multiplicand    2   31[COMRAM] unsigned int 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  product         2   33[COMRAM] unsigned int 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  2   29[COMRAM] unsigned int 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, prodl, prodh
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4468 ;;      Params:         4       0       0       0       0       0       0       0       0
  4469 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4471 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4472 ;;Total ram usage:        6 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    2
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;;		_fround
  4480 ;;		_scale
  4481 ;;		_sprintf
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text5
  4486  002F96                     __ptext5:
  4487                           	opt stack 0
  4488  002F96                     ___wmul:
  4489                           	opt stack 26
  4490                           
  4491                           ;incstack = 0
  4492  002F96  501E               	movf	___wmul@multiplier,w,c
  4493  002F98  0220               	mulwf	___wmul@multiplicand,c
  4494  002F9A  CFF3 F022          	movff	prodl,___wmul@product
  4495  002F9E  CFF4 F023          	movff	prodh,___wmul@product+1
  4496  002FA2  501E               	movf	___wmul@multiplier,w,c
  4497  002FA4  0221               	mulwf	___wmul@multiplicand+1,c
  4498  002FA6  50F3               	movf	prodl,w,c
  4499  002FA8  2623               	addwf	___wmul@product+1,f,c
  4500  002FAA  501F               	movf	___wmul@multiplier+1,w,c
  4501  002FAC  0220               	mulwf	___wmul@multiplicand,c
  4502  002FAE  50F3               	movf	prodl,w,c
  4503  002FB0  2623               	addwf	___wmul@product+1,f,c
  4504  002FB2  C022  F01E         	movff	___wmul@product,?___wmul
  4505  002FB6  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  4506  002FBA  0012               	return	
  4507  002FBC                     __end_of___wmul:
  4508                           	opt stack 0
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           intcon2	equ	0xFF1
  4517                           intcon3	equ	0xFF0
  4518                           postinc0	equ	0xFEE
  4519                           wreg	equ	0xFE8
  4520                           postdec1	equ	0xFE5
  4521                           fsr1l	equ	0xFE1
  4522                           indf2	equ	0xFDF
  4523                           postinc2	equ	0xFDE
  4524                           postdec2	equ	0xFDD
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function ___ftmul *****************
  4530 ;; Defined at:
  4531 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  f1              3   35[COMRAM] float 
  4534 ;;  f2              3   38[COMRAM] float 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  4537 ;;  sign            1   49[COMRAM] unsigned char 
  4538 ;;  cntr            1   48[COMRAM] unsigned char 
  4539 ;;  exp             1   44[COMRAM] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  3   35[COMRAM] float 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4549 ;;      Params:         6       0       0       0       0       0       0       0       0
  4550 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4551 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4552 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4553 ;;Total ram usage:       15 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    3
  4556 ;; This function calls:
  4557 ;;		___ftpack
  4558 ;; This function is called by:
  4559 ;;		_main
  4560 ;;		_fround
  4561 ;;		_scale
  4562 ;;		_sprintf
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text6
  4567  00234A                     __ptext6:
  4568                           	opt stack 0
  4569  00234A                     ___ftmul:
  4570                           	opt stack 25
  4571                           
  4572                           ;incstack = 0
  4573  00234A  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  4574  00234E  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4575  002350  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4576  002352  3425               	rlcf	___ftmul@f1+1,w,c
  4577  002354  362A               	rlcf	??___ftmul& (0+255),f,c
  4578  002356  E301               	bnc	u4891
  4579  002358  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4580  00235A                     u4891:
  4581  00235A  502A               	movf	??___ftmul,w,c
  4582  00235C  6E2D               	movwf	___ftmul@exp,c
  4583  00235E  502D               	movf	___ftmul@exp,w,c
  4584  002360  A4D8               	btfss	status,2,c
  4585  002362  D007               	goto	l4514
  4586  002364  0E00               	movlw	0
  4587  002366  6E24               	movwf	?___ftmul,c
  4588  002368  0E00               	movlw	0
  4589  00236A  6E25               	movwf	?___ftmul+1,c
  4590  00236C  0E00               	movlw	0
  4591  00236E  6E26               	movwf	?___ftmul+2,c
  4592  002370  0012               	return	
  4593  002372                     l4514:
  4594  002372  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  4595  002376  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4596  002378  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4597  00237A  3428               	rlcf	___ftmul@f2+1,w,c
  4598  00237C  362A               	rlcf	??___ftmul& (0+255),f,c
  4599  00237E  E301               	bnc	u4911
  4600  002380  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4601  002382                     u4911:
  4602  002382  502A               	movf	??___ftmul,w,c
  4603  002384  6E32               	movwf	___ftmul@sign,c
  4604  002386  5032               	movf	___ftmul@sign,w,c
  4605  002388  A4D8               	btfss	status,2,c
  4606  00238A  D007               	goto	l4520
  4607  00238C  0E00               	movlw	0
  4608  00238E  6E24               	movwf	?___ftmul,c
  4609  002390  0E00               	movlw	0
  4610  002392  6E25               	movwf	?___ftmul+1,c
  4611  002394  0E00               	movlw	0
  4612  002396  6E26               	movwf	?___ftmul+2,c
  4613  002398  0012               	return	
  4614  00239A                     l4520:
  4615  00239A  5032               	movf	___ftmul@sign,w,c
  4616  00239C  0F7B               	addlw	123
  4617  00239E  262D               	addwf	___ftmul@exp,f,c
  4618  0023A0  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  4619  0023A4  5029               	movf	___ftmul@f2+2,w,c
  4620  0023A6  1A32               	xorwf	___ftmul@sign,f,c
  4621  0023A8  0E80               	movlw	128
  4622  0023AA  1632               	andwf	___ftmul@sign,f,c
  4623  0023AC  8E25               	bsf	___ftmul@f1+1,7,c
  4624  0023AE  8E28               	bsf	___ftmul@f2+1,7,c
  4625  0023B0  0EFF               	movlw	255
  4626  0023B2  1627               	andwf	___ftmul@f2,f,c
  4627  0023B4  0EFF               	movlw	255
  4628  0023B6  1628               	andwf	___ftmul@f2+1,f,c
  4629  0023B8  0E00               	movlw	0
  4630  0023BA  1629               	andwf	___ftmul@f2+2,f,c
  4631  0023BC  0E00               	movlw	0
  4632  0023BE  6E2E               	movwf	___ftmul@f3_as_product,c
  4633  0023C0  0E00               	movlw	0
  4634  0023C2  6E2F               	movwf	___ftmul@f3_as_product+1,c
  4635  0023C4  0E00               	movlw	0
  4636  0023C6  6E30               	movwf	___ftmul@f3_as_product+2,c
  4637  0023C8  0E07               	movlw	7
  4638  0023CA  6E31               	movwf	___ftmul@cntr,c
  4639  0023CC                     l4534:
  4640  0023CC  A024               	btfss	___ftmul@f1,0,c
  4641  0023CE  D006               	goto	l4538
  4642  0023D0  5027               	movf	___ftmul@f2,w,c
  4643  0023D2  262E               	addwf	___ftmul@f3_as_product,f,c
  4644  0023D4  5028               	movf	___ftmul@f2+1,w,c
  4645  0023D6  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4646  0023D8  5029               	movf	___ftmul@f2+2,w,c
  4647  0023DA  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4648  0023DC                     l4538:
  4649  0023DC  90D8               	bcf	status,0,c
  4650  0023DE  3226               	rrcf	___ftmul@f1+2,f,c
  4651  0023E0  3225               	rrcf	___ftmul@f1+1,f,c
  4652  0023E2  3224               	rrcf	___ftmul@f1,f,c
  4653  0023E4  90D8               	bcf	status,0,c
  4654  0023E6  3627               	rlcf	___ftmul@f2,f,c
  4655  0023E8  3628               	rlcf	___ftmul@f2+1,f,c
  4656  0023EA  3629               	rlcf	___ftmul@f2+2,f,c
  4657  0023EC  2E31               	decfsz	___ftmul@cntr,f,c
  4658  0023EE  D7EE               	goto	l4534
  4659  0023F0  0E09               	movlw	9
  4660  0023F2  6E31               	movwf	___ftmul@cntr,c
  4661  0023F4                     l4544:
  4662  0023F4  A024               	btfss	___ftmul@f1,0,c
  4663  0023F6  D006               	goto	l4548
  4664  0023F8  5027               	movf	___ftmul@f2,w,c
  4665  0023FA  262E               	addwf	___ftmul@f3_as_product,f,c
  4666  0023FC  5028               	movf	___ftmul@f2+1,w,c
  4667  0023FE  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4668  002400  5029               	movf	___ftmul@f2+2,w,c
  4669  002402  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4670  002404                     l4548:
  4671  002404  90D8               	bcf	status,0,c
  4672  002406  3226               	rrcf	___ftmul@f1+2,f,c
  4673  002408  3225               	rrcf	___ftmul@f1+1,f,c
  4674  00240A  3224               	rrcf	___ftmul@f1,f,c
  4675  00240C  90D8               	bcf	status,0,c
  4676  00240E  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  4677  002410  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  4678  002412  322E               	rrcf	___ftmul@f3_as_product,f,c
  4679  002414  2E31               	decfsz	___ftmul@cntr,f,c
  4680  002416  D7EE               	goto	l4544
  4681  002418  C02E  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  4682  00241C  C02F  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4683  002420  C030  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4684  002424  C02D  F013         	movff	___ftmul@exp,___ftpack@exp
  4685  002428  C032  F014         	movff	___ftmul@sign,___ftpack@sign
  4686  00242C  EC1C  F014         	call	___ftpack	;wreg free
  4687  002430  C010  F024         	movff	?___ftpack,?___ftmul
  4688  002434  C011  F025         	movff	?___ftpack+1,?___ftmul+1
  4689  002438  C012  F026         	movff	?___ftpack+2,?___ftmul+2
  4690  00243C  0012               	return	
  4691  00243E                     __end_of___ftmul:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           intcon2	equ	0xFF1
  4701                           intcon3	equ	0xFF0
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           postdec1	equ	0xFE5
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function ___awmod *****************
  4714 ;; Defined at:
  4715 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  dividend        2   15[COMRAM] int 
  4718 ;;  divisor         2   17[COMRAM] int 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  sign            1   20[COMRAM] unsigned char 
  4721 ;;  counter         1   19[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  2   15[COMRAM] int 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4731 ;;      Params:         4       0       0       0       0       0       0       0       0
  4732 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4734 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4735 ;;Total ram usage:        6 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    2
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_fround
  4742 ;;		_scale
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text7
  4747  002A7C                     __ptext7:
  4748                           	opt stack 0
  4749  002A7C                     ___awmod:
  4750                           	opt stack 26
  4751                           
  4752                           ;incstack = 0
  4753  002A7C  0E00               	movlw	0
  4754  002A7E  6E15               	movwf	___awmod@sign,c
  4755  002A80  AE11               	btfss	___awmod@dividend+1,7,c
  4756  002A82  D006               	goto	l3140
  4757  002A84  6C10               	negf	___awmod@dividend,c
  4758  002A86  1E11               	comf	___awmod@dividend+1,f,c
  4759  002A88  B0D8               	btfsc	status,0,c
  4760  002A8A  2A11               	incf	___awmod@dividend+1,f,c
  4761  002A8C  0E01               	movlw	1
  4762  002A8E  6E15               	movwf	___awmod@sign,c
  4763  002A90                     l3140:
  4764  002A90  AE13               	btfss	___awmod@divisor+1,7,c
  4765  002A92  D004               	goto	l3144
  4766  002A94  6C12               	negf	___awmod@divisor,c
  4767  002A96  1E13               	comf	___awmod@divisor+1,f,c
  4768  002A98  B0D8               	btfsc	status,0,c
  4769  002A9A  2A13               	incf	___awmod@divisor+1,f,c
  4770  002A9C                     l3144:
  4771  002A9C  5012               	movf	___awmod@divisor,w,c
  4772  002A9E  1013               	iorwf	___awmod@divisor+1,w,c
  4773  002AA0  B4D8               	btfsc	status,2,c
  4774  002AA2  D018               	goto	l3160
  4775  002AA4  0E01               	movlw	1
  4776  002AA6  6E14               	movwf	___awmod@counter,c
  4777  002AA8  D004               	goto	l3150
  4778  002AAA                     l3148:
  4779  002AAA  90D8               	bcf	status,0,c
  4780  002AAC  3612               	rlcf	___awmod@divisor,f,c
  4781  002AAE  3613               	rlcf	___awmod@divisor+1,f,c
  4782  002AB0  2A14               	incf	___awmod@counter,f,c
  4783  002AB2                     l3150:
  4784  002AB2  AE13               	btfss	___awmod@divisor+1,7,c
  4785  002AB4  D7FA               	goto	l3148
  4786  002AB6                     l3152:
  4787  002AB6  5012               	movf	___awmod@divisor,w,c
  4788  002AB8  5C10               	subwf	___awmod@dividend,w,c
  4789  002ABA  5013               	movf	___awmod@divisor+1,w,c
  4790  002ABC  5811               	subwfb	___awmod@dividend+1,w,c
  4791  002ABE  A0D8               	btfss	status,0,c
  4792  002AC0  D004               	goto	l3156
  4793  002AC2  5012               	movf	___awmod@divisor,w,c
  4794  002AC4  5E10               	subwf	___awmod@dividend,f,c
  4795  002AC6  5013               	movf	___awmod@divisor+1,w,c
  4796  002AC8  5A11               	subwfb	___awmod@dividend+1,f,c
  4797  002ACA                     l3156:
  4798  002ACA  90D8               	bcf	status,0,c
  4799  002ACC  3213               	rrcf	___awmod@divisor+1,f,c
  4800  002ACE  3212               	rrcf	___awmod@divisor,f,c
  4801  002AD0  2E14               	decfsz	___awmod@counter,f,c
  4802  002AD2  D7F1               	goto	l3152
  4803  002AD4                     l3160:
  4804  002AD4  5015               	movf	___awmod@sign,w,c
  4805  002AD6  B4D8               	btfsc	status,2,c
  4806  002AD8  D004               	goto	l3164
  4807  002ADA  6C10               	negf	___awmod@dividend,c
  4808  002ADC  1E11               	comf	___awmod@dividend+1,f,c
  4809  002ADE  B0D8               	btfsc	status,0,c
  4810  002AE0  2A11               	incf	___awmod@dividend+1,f,c
  4811  002AE2                     l3164:
  4812  002AE2  C010  F010         	movff	___awmod@dividend,?___awmod
  4813  002AE6  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  4814  002AEA  0012               	return	
  4815  002AEC                     __end_of___awmod:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           intcon	equ	0xFF2
  4824                           intcon2	equ	0xFF1
  4825                           intcon3	equ	0xFF0
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           postdec1	equ	0xFE5
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           fsr2h	equ	0xFDA
  4834                           fsr2l	equ	0xFD9
  4835                           status	equ	0xFD8
  4836                           
  4837 ;; *************** function ___awdiv *****************
  4838 ;; Defined at:
  4839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  dividend        2   21[COMRAM] int 
  4842 ;;  divisor         2   23[COMRAM] int 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  quotient        2   27[COMRAM] int 
  4845 ;;  sign            1   26[COMRAM] unsigned char 
  4846 ;;  counter         1   25[COMRAM] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  2   21[COMRAM] int 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4856 ;;      Params:         4       0       0       0       0       0       0       0       0
  4857 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4859 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4860 ;;Total ram usage:        8 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; Hardware stack levels required when called:    2
  4863 ;; This function calls:
  4864 ;;		Nothing
  4865 ;; This function is called by:
  4866 ;;		_fround
  4867 ;;		_scale
  4868 ;;		_sprintf
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text8
  4873  002976                     __ptext8:
  4874                           	opt stack 0
  4875  002976                     ___awdiv:
  4876                           	opt stack 26
  4877                           
  4878                           ;incstack = 0
  4879  002976  0E00               	movlw	0
  4880  002978  6E1B               	movwf	___awdiv@sign,c
  4881  00297A  AE19               	btfss	___awdiv@divisor+1,7,c
  4882  00297C  D006               	goto	l3096
  4883  00297E  6C18               	negf	___awdiv@divisor,c
  4884  002980  1E19               	comf	___awdiv@divisor+1,f,c
  4885  002982  B0D8               	btfsc	status,0,c
  4886  002984  2A19               	incf	___awdiv@divisor+1,f,c
  4887  002986  0E01               	movlw	1
  4888  002988  6E1B               	movwf	___awdiv@sign,c
  4889  00298A                     l3096:
  4890  00298A  AE17               	btfss	___awdiv@dividend+1,7,c
  4891  00298C  D006               	goto	l3102
  4892  00298E  6C16               	negf	___awdiv@dividend,c
  4893  002990  1E17               	comf	___awdiv@dividend+1,f,c
  4894  002992  B0D8               	btfsc	status,0,c
  4895  002994  2A17               	incf	___awdiv@dividend+1,f,c
  4896  002996  0E01               	movlw	1
  4897  002998  1A1B               	xorwf	___awdiv@sign,f,c
  4898  00299A                     l3102:
  4899  00299A  0E00               	movlw	0
  4900  00299C  6E1D               	movwf	___awdiv@quotient+1,c
  4901  00299E  0E00               	movlw	0
  4902  0029A0  6E1C               	movwf	___awdiv@quotient,c
  4903  0029A2  5018               	movf	___awdiv@divisor,w,c
  4904  0029A4  1019               	iorwf	___awdiv@divisor+1,w,c
  4905  0029A6  B4D8               	btfsc	status,2,c
  4906  0029A8  D01C               	goto	l3124
  4907  0029AA  0E01               	movlw	1
  4908  0029AC  6E1A               	movwf	___awdiv@counter,c
  4909  0029AE  D004               	goto	l3110
  4910  0029B0                     l3108:
  4911  0029B0  90D8               	bcf	status,0,c
  4912  0029B2  3618               	rlcf	___awdiv@divisor,f,c
  4913  0029B4  3619               	rlcf	___awdiv@divisor+1,f,c
  4914  0029B6  2A1A               	incf	___awdiv@counter,f,c
  4915  0029B8                     l3110:
  4916  0029B8  AE19               	btfss	___awdiv@divisor+1,7,c
  4917  0029BA  D7FA               	goto	l3108
  4918  0029BC                     l3112:
  4919  0029BC  90D8               	bcf	status,0,c
  4920  0029BE  361C               	rlcf	___awdiv@quotient,f,c
  4921  0029C0  361D               	rlcf	___awdiv@quotient+1,f,c
  4922  0029C2  5018               	movf	___awdiv@divisor,w,c
  4923  0029C4  5C16               	subwf	___awdiv@dividend,w,c
  4924  0029C6  5019               	movf	___awdiv@divisor+1,w,c
  4925  0029C8  5817               	subwfb	___awdiv@dividend+1,w,c
  4926  0029CA  A0D8               	btfss	status,0,c
  4927  0029CC  D005               	goto	l3120
  4928  0029CE  5018               	movf	___awdiv@divisor,w,c
  4929  0029D0  5E16               	subwf	___awdiv@dividend,f,c
  4930  0029D2  5019               	movf	___awdiv@divisor+1,w,c
  4931  0029D4  5A17               	subwfb	___awdiv@dividend+1,f,c
  4932  0029D6  801C               	bsf	___awdiv@quotient,0,c
  4933  0029D8                     l3120:
  4934  0029D8  90D8               	bcf	status,0,c
  4935  0029DA  3219               	rrcf	___awdiv@divisor+1,f,c
  4936  0029DC  3218               	rrcf	___awdiv@divisor,f,c
  4937  0029DE  2E1A               	decfsz	___awdiv@counter,f,c
  4938  0029E0  D7ED               	goto	l3112
  4939  0029E2                     l3124:
  4940  0029E2  501B               	movf	___awdiv@sign,w,c
  4941  0029E4  B4D8               	btfsc	status,2,c
  4942  0029E6  D004               	goto	l3128
  4943  0029E8  6C1C               	negf	___awdiv@quotient,c
  4944  0029EA  1E1D               	comf	___awdiv@quotient+1,f,c
  4945  0029EC  B0D8               	btfsc	status,0,c
  4946  0029EE  2A1D               	incf	___awdiv@quotient+1,f,c
  4947  0029F0                     l3128:
  4948  0029F0  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  4949  0029F4  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  4950  0029F8  0012               	return	
  4951  0029FA                     __end_of___awdiv:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon2	equ	0xFF1
  4961                           intcon3	equ	0xFF0
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           postdec1	equ	0xFE5
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function __tdiv_to_l_ *****************
  4974 ;; Defined at:
  4975 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  f1              3   15[COMRAM] float 
  4978 ;;  f2              3   18[COMRAM] float 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  quot            4   24[COMRAM] unsigned long 
  4981 ;;  exp1            1   29[COMRAM] unsigned char 
  4982 ;;  cntr            1   28[COMRAM] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  4   15[COMRAM] unsigned long 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4992 ;;      Params:         6       0       0       0       0       0       0       0       0
  4993 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4994 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4995 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4996 ;;Total ram usage:       15 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    2
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_sprintf
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text9
  5007  0020F0                     __ptext9:
  5008                           	opt stack 0
  5009  0020F0                     __tdiv_to_l_:
  5010                           	opt stack 27
  5011                           
  5012                           ;incstack = 0
  5013  0020F0  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5014  0020F4  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5015  0020F6  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5016  0020F8  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  5017  0020FA  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5018  0020FC  E301               	bnc	u3001
  5019  0020FE  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5020  002100                     u3001:
  5021  002100  5016               	movf	??__tdiv_to_l_,w,c
  5022  002102  6E1E               	movwf	__tdiv_to_l_@exp1,c
  5023  002104  501E               	movf	__tdiv_to_l_@exp1,w,c
  5024  002106  A4D8               	btfss	status,2,c
  5025  002108  D009               	goto	l3306
  5026  00210A  0E00               	movlw	0
  5027  00210C  6E10               	movwf	?__tdiv_to_l_,c
  5028  00210E  0E00               	movlw	0
  5029  002110  6E11               	movwf	?__tdiv_to_l_+1,c
  5030  002112  0E00               	movlw	0
  5031  002114  6E12               	movwf	?__tdiv_to_l_+2,c
  5032  002116  0E00               	movlw	0
  5033  002118  6E13               	movwf	?__tdiv_to_l_+3,c
  5034  00211A  0012               	return	
  5035  00211C                     l3306:
  5036  00211C  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5037  002120  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5038  002122  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5039  002124  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  5040  002126  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5041  002128  E301               	bnc	u3021
  5042  00212A  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5043  00212C                     u3021:
  5044  00212C  5016               	movf	??__tdiv_to_l_,w,c
  5045  00212E  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5046  002130  501D               	movf	__tdiv_to_l_@cntr,w,c
  5047  002132  A4D8               	btfss	status,2,c
  5048  002134  D009               	goto	l3312
  5049  002136  0E00               	movlw	0
  5050  002138  6E10               	movwf	?__tdiv_to_l_,c
  5051  00213A  0E00               	movlw	0
  5052  00213C  6E11               	movwf	?__tdiv_to_l_+1,c
  5053  00213E  0E00               	movlw	0
  5054  002140  6E12               	movwf	?__tdiv_to_l_+2,c
  5055  002142  0E00               	movlw	0
  5056  002144  6E13               	movwf	?__tdiv_to_l_+3,c
  5057  002146  0012               	return	
  5058  002148                     l3312:
  5059  002148  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  5060  00214A  0EFF               	movlw	255
  5061  00214C  1610               	andwf	__tdiv_to_l_@f1,f,c
  5062  00214E  0EFF               	movlw	255
  5063  002150  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  5064  002152  0E00               	movlw	0
  5065  002154  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  5066  002156  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  5067  002158  0EFF               	movlw	255
  5068  00215A  1613               	andwf	__tdiv_to_l_@f2,f,c
  5069  00215C  0EFF               	movlw	255
  5070  00215E  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  5071  002160  0E00               	movlw	0
  5072  002162  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  5073  002164  0E00               	movlw	0
  5074  002166  6E19               	movwf	__tdiv_to_l_@quot,c
  5075  002168  0E00               	movlw	0
  5076  00216A  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  5077  00216C  0E00               	movlw	0
  5078  00216E  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  5079  002170  0E00               	movlw	0
  5080  002172  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  5081  002174  0E7F               	movlw	127
  5082  002176  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5083  002178  501D               	movf	__tdiv_to_l_@cntr,w,c
  5084  00217A  0F98               	addlw	152
  5085  00217C  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5086  00217E  0E18               	movlw	24
  5087  002180  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5088  002182                     l846:
  5089  002182  90D8               	bcf	status,0,c
  5090  002184  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5091  002186  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5092  002188  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5093  00218A  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5094  00218C  5013               	movf	__tdiv_to_l_@f2,w,c
  5095  00218E  5C10               	subwf	__tdiv_to_l_@f1,w,c
  5096  002190  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5097  002192  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  5098  002194  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5099  002196  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  5100  002198  A0D8               	btfss	status,0,c
  5101  00219A  D007               	goto	l847
  5102  00219C  5013               	movf	__tdiv_to_l_@f2,w,c
  5103  00219E  5E10               	subwf	__tdiv_to_l_@f1,f,c
  5104  0021A0  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5105  0021A2  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  5106  0021A4  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5107  0021A6  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  5108  0021A8  8019               	bsf	__tdiv_to_l_@quot,0,c
  5109  0021AA                     l847:
  5110  0021AA  90D8               	bcf	status,0,c
  5111  0021AC  3610               	rlcf	__tdiv_to_l_@f1,f,c
  5112  0021AE  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  5113  0021B0  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  5114  0021B2  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  5115  0021B4  D7E6               	goto	l846
  5116  0021B6  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  5117  0021B8  D016               	goto	l3346
  5118  0021BA  501E               	movf	__tdiv_to_l_@exp1,w,c
  5119  0021BC  0A80               	xorlw	128
  5120  0021BE  0F97               	addlw	151
  5121  0021C0  B0D8               	btfsc	status,0,c
  5122  0021C2  D009               	goto	l3342
  5123  0021C4  0E00               	movlw	0
  5124  0021C6  6E10               	movwf	?__tdiv_to_l_,c
  5125  0021C8  0E00               	movlw	0
  5126  0021CA  6E11               	movwf	?__tdiv_to_l_+1,c
  5127  0021CC  0E00               	movlw	0
  5128  0021CE  6E12               	movwf	?__tdiv_to_l_+2,c
  5129  0021D0  0E00               	movlw	0
  5130  0021D2  6E13               	movwf	?__tdiv_to_l_+3,c
  5131  0021D4  0012               	return	
  5132  0021D6                     l3342:
  5133  0021D6  90D8               	bcf	status,0,c
  5134  0021D8  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  5135  0021DA  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  5136  0021DC  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  5137  0021DE  3219               	rrcf	__tdiv_to_l_@quot,f,c
  5138  0021E0  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  5139  0021E2  D7F9               	goto	l3342
  5140  0021E4  D015               	goto	l853
  5141  0021E6                     l3346:
  5142  0021E6  0E17               	movlw	23
  5143  0021E8  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  5144  0021EA  D00F               	goto	l3354
  5145  0021EC  0E00               	movlw	0
  5146  0021EE  6E10               	movwf	?__tdiv_to_l_,c
  5147  0021F0  0E00               	movlw	0
  5148  0021F2  6E11               	movwf	?__tdiv_to_l_+1,c
  5149  0021F4  0E00               	movlw	0
  5150  0021F6  6E12               	movwf	?__tdiv_to_l_+2,c
  5151  0021F8  0E00               	movlw	0
  5152  0021FA  6E13               	movwf	?__tdiv_to_l_+3,c
  5153  0021FC  0012               	return	
  5154  0021FE                     l3352:
  5155  0021FE  90D8               	bcf	status,0,c
  5156  002200  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5157  002202  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5158  002204  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5159  002206  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5160  002208  061E               	decf	__tdiv_to_l_@exp1,f,c
  5161  00220A                     l3354:
  5162  00220A  501E               	movf	__tdiv_to_l_@exp1,w,c
  5163  00220C  A4D8               	btfss	status,2,c
  5164  00220E  D7F7               	goto	l3352
  5165  002210                     l853:
  5166  002210  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5167  002214  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5168  002218  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5169  00221C  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5170  002220  0012               	return		;funcret
  5171  002222                     __end_of__tdiv_to_l_:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           intcon3	equ	0xFF0
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           postdec1	equ	0xFE5
  5185                           fsr1l	equ	0xFE1
  5186                           indf2	equ	0xFDF
  5187                           postinc2	equ	0xFDE
  5188                           postdec2	equ	0xFDD
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function __div_to_l_ *****************
  5194 ;; Defined at:
  5195 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  f1              3   15[COMRAM] unsigned long 
  5198 ;;  f2              3   18[COMRAM] unsigned long 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  quot            4   21[COMRAM] unsigned long 
  5201 ;;  exp1            1   26[COMRAM] unsigned char 
  5202 ;;  cntr            1   25[COMRAM] unsigned char 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  4   15[COMRAM] unsigned long 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2, status,0
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5212 ;;      Params:         6       0       0       0       0       0       0       0       0
  5213 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5215 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5216 ;;Total ram usage:       12 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    2
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_sprintf
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text10
  5227  002222                     __ptext10:
  5228                           	opt stack 0
  5229  002222                     __div_to_l_:
  5230                           	opt stack 27
  5231                           
  5232                           ;incstack = 0
  5233  002222  3412               	rlcf	__div_to_l_@f1+2,w,c
  5234  002224  3413               	rlcf	__div_to_l_@f1+3,w,c
  5235  002226  6E1B               	movwf	__div_to_l_@exp1,c
  5236  002228  501B               	movf	__div_to_l_@exp1,w,c
  5237  00222A  A4D8               	btfss	status,2,c
  5238  00222C  D009               	goto	l3362
  5239  00222E  0E00               	movlw	0
  5240  002230  6E10               	movwf	?__div_to_l_,c
  5241  002232  0E00               	movlw	0
  5242  002234  6E11               	movwf	?__div_to_l_+1,c
  5243  002236  0E00               	movlw	0
  5244  002238  6E12               	movwf	?__div_to_l_+2,c
  5245  00223A  0E00               	movlw	0
  5246  00223C  6E13               	movwf	?__div_to_l_+3,c
  5247  00223E  0012               	return	
  5248  002240                     l3362:
  5249  002240  3415               	rlcf	__div_to_l_@f2+2,w,c
  5250  002242  3416               	rlcf	__div_to_l_@f2+3,w,c
  5251  002244  6E1A               	movwf	__div_to_l_@cntr,c
  5252  002246  501A               	movf	__div_to_l_@cntr,w,c
  5253  002248  A4D8               	btfss	status,2,c
  5254  00224A  D009               	goto	l3368
  5255  00224C  0E00               	movlw	0
  5256  00224E  6E10               	movwf	?__div_to_l_,c
  5257  002250  0E00               	movlw	0
  5258  002252  6E11               	movwf	?__div_to_l_+1,c
  5259  002254  0E00               	movlw	0
  5260  002256  6E12               	movwf	?__div_to_l_+2,c
  5261  002258  0E00               	movlw	0
  5262  00225A  6E13               	movwf	?__div_to_l_+3,c
  5263  00225C  0012               	return	
  5264  00225E                     l3368:
  5265  00225E  8E12               	bsf	__div_to_l_@f1+2,7,c
  5266  002260  0EFF               	movlw	255
  5267  002262  1610               	andwf	__div_to_l_@f1,f,c
  5268  002264  0EFF               	movlw	255
  5269  002266  1611               	andwf	__div_to_l_@f1+1,f,c
  5270  002268  0EFF               	movlw	255
  5271  00226A  1612               	andwf	__div_to_l_@f1+2,f,c
  5272  00226C  0E00               	movlw	0
  5273  00226E  1613               	andwf	__div_to_l_@f1+3,f,c
  5274  002270  8E15               	bsf	__div_to_l_@f2+2,7,c
  5275  002272  0EFF               	movlw	255
  5276  002274  1613               	andwf	__div_to_l_@f2,f,c
  5277  002276  0EFF               	movlw	255
  5278  002278  1614               	andwf	__div_to_l_@f2+1,f,c
  5279  00227A  0EFF               	movlw	255
  5280  00227C  1615               	andwf	__div_to_l_@f2+2,f,c
  5281  00227E  0E00               	movlw	0
  5282  002280  1616               	andwf	__div_to_l_@f2+3,f,c
  5283  002282  0E00               	movlw	0
  5284  002284  6E16               	movwf	__div_to_l_@quot,c
  5285  002286  0E00               	movlw	0
  5286  002288  6E17               	movwf	__div_to_l_@quot+1,c
  5287  00228A  0E00               	movlw	0
  5288  00228C  6E18               	movwf	__div_to_l_@quot+2,c
  5289  00228E  0E00               	movlw	0
  5290  002290  6E19               	movwf	__div_to_l_@quot+3,c
  5291  002292  0E7F               	movlw	127
  5292  002294  5E1B               	subwf	__div_to_l_@exp1,f,c
  5293  002296  501A               	movf	__div_to_l_@cntr,w,c
  5294  002298  0FA0               	addlw	160
  5295  00229A  5E1B               	subwf	__div_to_l_@exp1,f,c
  5296  00229C  0E20               	movlw	32
  5297  00229E  6E1A               	movwf	__div_to_l_@cntr,c
  5298  0022A0                     l3382:
  5299  0022A0  90D8               	bcf	status,0,c
  5300  0022A2  3616               	rlcf	__div_to_l_@quot,f,c
  5301  0022A4  3617               	rlcf	__div_to_l_@quot+1,f,c
  5302  0022A6  3618               	rlcf	__div_to_l_@quot+2,f,c
  5303  0022A8  3619               	rlcf	__div_to_l_@quot+3,f,c
  5304  0022AA  5013               	movf	__div_to_l_@f2,w,c
  5305  0022AC  5C10               	subwf	__div_to_l_@f1,w,c
  5306  0022AE  5014               	movf	__div_to_l_@f2+1,w,c
  5307  0022B0  5811               	subwfb	__div_to_l_@f1+1,w,c
  5308  0022B2  5015               	movf	__div_to_l_@f2+2,w,c
  5309  0022B4  5812               	subwfb	__div_to_l_@f1+2,w,c
  5310  0022B6  5016               	movf	__div_to_l_@f2+3,w,c
  5311  0022B8  5813               	subwfb	__div_to_l_@f1+3,w,c
  5312  0022BA  A0D8               	btfss	status,0,c
  5313  0022BC  D009               	goto	l3390
  5314  0022BE  5013               	movf	__div_to_l_@f2,w,c
  5315  0022C0  5E10               	subwf	__div_to_l_@f1,f,c
  5316  0022C2  5014               	movf	__div_to_l_@f2+1,w,c
  5317  0022C4  5A11               	subwfb	__div_to_l_@f1+1,f,c
  5318  0022C6  5015               	movf	__div_to_l_@f2+2,w,c
  5319  0022C8  5A12               	subwfb	__div_to_l_@f1+2,f,c
  5320  0022CA  5016               	movf	__div_to_l_@f2+3,w,c
  5321  0022CC  5A13               	subwfb	__div_to_l_@f1+3,f,c
  5322  0022CE  8016               	bsf	__div_to_l_@quot,0,c
  5323  0022D0                     l3390:
  5324  0022D0  90D8               	bcf	status,0,c
  5325  0022D2  3610               	rlcf	__div_to_l_@f1,f,c
  5326  0022D4  3611               	rlcf	__div_to_l_@f1+1,f,c
  5327  0022D6  3612               	rlcf	__div_to_l_@f1+2,f,c
  5328  0022D8  3613               	rlcf	__div_to_l_@f1+3,f,c
  5329  0022DA  2E1A               	decfsz	__div_to_l_@cntr,f,c
  5330  0022DC  D7E1               	goto	l3382
  5331  0022DE  AE1B               	btfss	__div_to_l_@exp1,7,c
  5332  0022E0  D016               	goto	l3406
  5333  0022E2  501B               	movf	__div_to_l_@exp1,w,c
  5334  0022E4  0A80               	xorlw	128
  5335  0022E6  0F9F               	addlw	159
  5336  0022E8  B0D8               	btfsc	status,0,c
  5337  0022EA  D009               	goto	l3402
  5338  0022EC  0E00               	movlw	0
  5339  0022EE  6E10               	movwf	?__div_to_l_,c
  5340  0022F0  0E00               	movlw	0
  5341  0022F2  6E11               	movwf	?__div_to_l_+1,c
  5342  0022F4  0E00               	movlw	0
  5343  0022F6  6E12               	movwf	?__div_to_l_+2,c
  5344  0022F8  0E00               	movlw	0
  5345  0022FA  6E13               	movwf	?__div_to_l_+3,c
  5346  0022FC  0012               	return	
  5347  0022FE                     l3402:
  5348  0022FE  90D8               	bcf	status,0,c
  5349  002300  3219               	rrcf	__div_to_l_@quot+3,f,c
  5350  002302  3218               	rrcf	__div_to_l_@quot+2,f,c
  5351  002304  3217               	rrcf	__div_to_l_@quot+1,f,c
  5352  002306  3216               	rrcf	__div_to_l_@quot,f,c
  5353  002308  3E1B               	incfsz	__div_to_l_@exp1,f,c
  5354  00230A  D7F9               	goto	l3402
  5355  00230C  D015               	goto	l749
  5356  00230E                     l3406:
  5357  00230E  0E1F               	movlw	31
  5358  002310  641B               	cpfsgt	__div_to_l_@exp1,c
  5359  002312  D00F               	goto	l3414
  5360  002314  0E00               	movlw	0
  5361  002316  6E10               	movwf	?__div_to_l_,c
  5362  002318  0E00               	movlw	0
  5363  00231A  6E11               	movwf	?__div_to_l_+1,c
  5364  00231C  0E00               	movlw	0
  5365  00231E  6E12               	movwf	?__div_to_l_+2,c
  5366  002320  0E00               	movlw	0
  5367  002322  6E13               	movwf	?__div_to_l_+3,c
  5368  002324  0012               	return	
  5369  002326                     l3412:
  5370  002326  90D8               	bcf	status,0,c
  5371  002328  3616               	rlcf	__div_to_l_@quot,f,c
  5372  00232A  3617               	rlcf	__div_to_l_@quot+1,f,c
  5373  00232C  3618               	rlcf	__div_to_l_@quot+2,f,c
  5374  00232E  3619               	rlcf	__div_to_l_@quot+3,f,c
  5375  002330  061B               	decf	__div_to_l_@exp1,f,c
  5376  002332                     l3414:
  5377  002332  501B               	movf	__div_to_l_@exp1,w,c
  5378  002334  A4D8               	btfss	status,2,c
  5379  002336  D7F7               	goto	l3412
  5380  002338                     l749:
  5381  002338  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  5382  00233C  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5383  002340  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5384  002344  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5385  002348  0012               	return		;funcret
  5386  00234A                     __end_of__div_to_l_:
  5387                           	opt stack 0
  5388                           tblptru	equ	0xFF8
  5389                           tblptrh	equ	0xFF7
  5390                           tblptrl	equ	0xFF6
  5391                           tablat	equ	0xFF5
  5392                           prodh	equ	0xFF4
  5393                           prodl	equ	0xFF3
  5394                           intcon	equ	0xFF2
  5395                           intcon2	equ	0xFF1
  5396                           intcon3	equ	0xFF0
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1l	equ	0xFE1
  5401                           indf2	equ	0xFDF
  5402                           postinc2	equ	0xFDE
  5403                           postdec2	equ	0xFDD
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function ___lltoft *****************
  5409 ;; Defined at:
  5410 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  c               4   23[COMRAM] unsigned long 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  exp             1   31[COMRAM] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  3   23[COMRAM] float 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5424 ;;      Params:         4       0       0       0       0       0       0       0       0
  5425 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5426 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5427 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5428 ;;Total ram usage:        9 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    3
  5431 ;; This function calls:
  5432 ;;		___ftpack
  5433 ;; This function is called by:
  5434 ;;		_sprintf
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text11
  5439  002C0E                     __ptext11:
  5440                           	opt stack 0
  5441  002C0E                     ___lltoft:
  5442                           	opt stack 26
  5443                           
  5444                           ;incstack = 0
  5445  002C0E  0E8E               	movlw	142
  5446  002C10  6E20               	movwf	___lltoft@exp,c
  5447  002C12  D006               	goto	l4674
  5448  002C14                     l4672:
  5449  002C14  90D8               	bcf	status,0,c
  5450  002C16  321B               	rrcf	___lltoft@c+3,f,c
  5451  002C18  321A               	rrcf	___lltoft@c+2,f,c
  5452  002C1A  3219               	rrcf	___lltoft@c+1,f,c
  5453  002C1C  3218               	rrcf	___lltoft@c,f,c
  5454  002C1E  2A20               	incf	___lltoft@exp,f,c
  5455  002C20                     l4674:
  5456  002C20  0E00               	movlw	0
  5457  002C22  1418               	andwf	___lltoft@c,w,c
  5458  002C24  6E1C               	movwf	??___lltoft& (0+255),c
  5459  002C26  0E00               	movlw	0
  5460  002C28  1419               	andwf	___lltoft@c+1,w,c
  5461  002C2A  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  5462  002C2C  0E00               	movlw	0
  5463  002C2E  141A               	andwf	___lltoft@c+2,w,c
  5464  002C30  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  5465  002C32  0EFF               	movlw	255
  5466  002C34  141B               	andwf	___lltoft@c+3,w,c
  5467  002C36  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  5468  002C38  501C               	movf	??___lltoft,w,c
  5469  002C3A  101D               	iorwf	??___lltoft+1,w,c
  5470  002C3C  101E               	iorwf	??___lltoft+2,w,c
  5471  002C3E  101F               	iorwf	??___lltoft+3,w,c
  5472  002C40  A4D8               	btfss	status,2,c
  5473  002C42  D7E8               	goto	l4672
  5474  002C44  C018  F010         	movff	___lltoft@c,___ftpack@arg
  5475  002C48  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  5476  002C4C  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  5477  002C50  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  5478  002C54  0E00               	movlw	0
  5479  002C56  6E14               	movwf	___ftpack@sign,c
  5480  002C58  EC1C  F014         	call	___ftpack	;wreg free
  5481  002C5C  C010  F018         	movff	?___ftpack,?___lltoft
  5482  002C60  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  5483  002C64  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  5484  002C68  0012               	return	
  5485  002C6A                     __end_of___lltoft:
  5486                           	opt stack 0
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           intcon2	equ	0xFF1
  5495                           intcon3	equ	0xFF0
  5496                           postinc0	equ	0xFEE
  5497                           wreg	equ	0xFE8
  5498                           postdec1	equ	0xFE5
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function ___llmod *****************
  5508 ;; Defined at:
  5509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  dividend        4   28[COMRAM] unsigned long 
  5512 ;;  divisor         4   32[COMRAM] unsigned long 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  counter         1   36[COMRAM] unsigned char 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  4   28[COMRAM] unsigned long 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5524 ;;      Params:         8       0       0       0       0       0       0       0       0
  5525 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5527 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5528 ;;Total ram usage:        9 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    2
  5531 ;; This function calls:
  5532 ;;		Nothing
  5533 ;; This function is called by:
  5534 ;;		_sprintf
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text12
  5539  002AEC                     __ptext12:
  5540                           	opt stack 0
  5541  002AEC                     ___llmod:
  5542                           	opt stack 27
  5543                           
  5544                           ;incstack = 0
  5545  002AEC  5021               	movf	___llmod@divisor,w,c
  5546  002AEE  1022               	iorwf	___llmod@divisor+1,w,c
  5547  002AF0  1023               	iorwf	___llmod@divisor+2,w,c
  5548  002AF2  1024               	iorwf	___llmod@divisor+3,w,c
  5549  002AF4  B4D8               	btfsc	status,2,c
  5550  002AF6  D024               	goto	l938
  5551  002AF8  0E01               	movlw	1
  5552  002AFA  6E25               	movwf	___llmod@counter,c
  5553  002AFC  D006               	goto	l3520
  5554  002AFE                     l3518:
  5555  002AFE  90D8               	bcf	status,0,c
  5556  002B00  3621               	rlcf	___llmod@divisor,f,c
  5557  002B02  3622               	rlcf	___llmod@divisor+1,f,c
  5558  002B04  3623               	rlcf	___llmod@divisor+2,f,c
  5559  002B06  3624               	rlcf	___llmod@divisor+3,f,c
  5560  002B08  2A25               	incf	___llmod@counter,f,c
  5561  002B0A                     l3520:
  5562  002B0A  AE24               	btfss	___llmod@divisor+3,7,c
  5563  002B0C  D7F8               	goto	l3518
  5564  002B0E                     l3522:
  5565  002B0E  5021               	movf	___llmod@divisor,w,c
  5566  002B10  5C1D               	subwf	___llmod@dividend,w,c
  5567  002B12  5022               	movf	___llmod@divisor+1,w,c
  5568  002B14  581E               	subwfb	___llmod@dividend+1,w,c
  5569  002B16  5023               	movf	___llmod@divisor+2,w,c
  5570  002B18  581F               	subwfb	___llmod@dividend+2,w,c
  5571  002B1A  5024               	movf	___llmod@divisor+3,w,c
  5572  002B1C  5820               	subwfb	___llmod@dividend+3,w,c
  5573  002B1E  A0D8               	btfss	status,0,c
  5574  002B20  D008               	goto	l3526
  5575  002B22  5021               	movf	___llmod@divisor,w,c
  5576  002B24  5E1D               	subwf	___llmod@dividend,f,c
  5577  002B26  5022               	movf	___llmod@divisor+1,w,c
  5578  002B28  5A1E               	subwfb	___llmod@dividend+1,f,c
  5579  002B2A  5023               	movf	___llmod@divisor+2,w,c
  5580  002B2C  5A1F               	subwfb	___llmod@dividend+2,f,c
  5581  002B2E  5024               	movf	___llmod@divisor+3,w,c
  5582  002B30  5A20               	subwfb	___llmod@dividend+3,f,c
  5583  002B32                     l3526:
  5584  002B32  90D8               	bcf	status,0,c
  5585  002B34  3224               	rrcf	___llmod@divisor+3,f,c
  5586  002B36  3223               	rrcf	___llmod@divisor+2,f,c
  5587  002B38  3222               	rrcf	___llmod@divisor+1,f,c
  5588  002B3A  3221               	rrcf	___llmod@divisor,f,c
  5589  002B3C  2E25               	decfsz	___llmod@counter,f,c
  5590  002B3E  D7E7               	goto	l3522
  5591  002B40                     l938:
  5592  002B40  C01D  F01D         	movff	___llmod@dividend,?___llmod
  5593  002B44  C01E  F01E         	movff	___llmod@dividend+1,?___llmod+1
  5594  002B48  C01F  F01F         	movff	___llmod@dividend+2,?___llmod+2
  5595  002B4C  C020  F020         	movff	___llmod@dividend+3,?___llmod+3
  5596  002B50  0012               	return		;funcret
  5597  002B52                     __end_of___llmod:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           intcon3	equ	0xFF0
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function ___lldiv *****************
  5620 ;; Defined at:
  5621 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  dividend        4   15[COMRAM] unsigned long 
  5624 ;;  divisor         4   19[COMRAM] unsigned long 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  quotient        4   23[COMRAM] unsigned long 
  5627 ;;  counter         1   27[COMRAM] unsigned char 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  4   15[COMRAM] unsigned long 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5637 ;;      Params:         8       0       0       0       0       0       0       0       0
  5638 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5639 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5640 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5641 ;;Total ram usage:       13 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    2
  5644 ;; This function calls:
  5645 ;;		Nothing
  5646 ;; This function is called by:
  5647 ;;		_sprintf
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text13
  5652  0029FA                     __ptext13:
  5653                           	opt stack 0
  5654  0029FA                     ___lldiv:
  5655                           	opt stack 27
  5656                           
  5657                           ;incstack = 0
  5658  0029FA  0E00               	movlw	0
  5659  0029FC  6E18               	movwf	___lldiv@quotient,c
  5660  0029FE  0E00               	movlw	0
  5661  002A00  6E19               	movwf	___lldiv@quotient+1,c
  5662  002A02  0E00               	movlw	0
  5663  002A04  6E1A               	movwf	___lldiv@quotient+2,c
  5664  002A06  0E00               	movlw	0
  5665  002A08  6E1B               	movwf	___lldiv@quotient+3,c
  5666  002A0A  5014               	movf	___lldiv@divisor,w,c
  5667  002A0C  1015               	iorwf	___lldiv@divisor+1,w,c
  5668  002A0E  1016               	iorwf	___lldiv@divisor+2,w,c
  5669  002A10  1017               	iorwf	___lldiv@divisor+3,w,c
  5670  002A12  B4D8               	btfsc	status,2,c
  5671  002A14  D02A               	goto	l928
  5672  002A16  0E01               	movlw	1
  5673  002A18  6E1C               	movwf	___lldiv@counter,c
  5674  002A1A  D006               	goto	l3500
  5675  002A1C                     l3498:
  5676  002A1C  90D8               	bcf	status,0,c
  5677  002A1E  3614               	rlcf	___lldiv@divisor,f,c
  5678  002A20  3615               	rlcf	___lldiv@divisor+1,f,c
  5679  002A22  3616               	rlcf	___lldiv@divisor+2,f,c
  5680  002A24  3617               	rlcf	___lldiv@divisor+3,f,c
  5681  002A26  2A1C               	incf	___lldiv@counter,f,c
  5682  002A28                     l3500:
  5683  002A28  AE17               	btfss	___lldiv@divisor+3,7,c
  5684  002A2A  D7F8               	goto	l3498
  5685  002A2C                     l3502:
  5686  002A2C  90D8               	bcf	status,0,c
  5687  002A2E  3618               	rlcf	___lldiv@quotient,f,c
  5688  002A30  3619               	rlcf	___lldiv@quotient+1,f,c
  5689  002A32  361A               	rlcf	___lldiv@quotient+2,f,c
  5690  002A34  361B               	rlcf	___lldiv@quotient+3,f,c
  5691  002A36  5014               	movf	___lldiv@divisor,w,c
  5692  002A38  5C10               	subwf	___lldiv@dividend,w,c
  5693  002A3A  5015               	movf	___lldiv@divisor+1,w,c
  5694  002A3C  5811               	subwfb	___lldiv@dividend+1,w,c
  5695  002A3E  5016               	movf	___lldiv@divisor+2,w,c
  5696  002A40  5812               	subwfb	___lldiv@dividend+2,w,c
  5697  002A42  5017               	movf	___lldiv@divisor+3,w,c
  5698  002A44  5813               	subwfb	___lldiv@dividend+3,w,c
  5699  002A46  A0D8               	btfss	status,0,c
  5700  002A48  D009               	goto	l3510
  5701  002A4A  5014               	movf	___lldiv@divisor,w,c
  5702  002A4C  5E10               	subwf	___lldiv@dividend,f,c
  5703  002A4E  5015               	movf	___lldiv@divisor+1,w,c
  5704  002A50  5A11               	subwfb	___lldiv@dividend+1,f,c
  5705  002A52  5016               	movf	___lldiv@divisor+2,w,c
  5706  002A54  5A12               	subwfb	___lldiv@dividend+2,f,c
  5707  002A56  5017               	movf	___lldiv@divisor+3,w,c
  5708  002A58  5A13               	subwfb	___lldiv@dividend+3,f,c
  5709  002A5A  8018               	bsf	___lldiv@quotient,0,c
  5710  002A5C                     l3510:
  5711  002A5C  90D8               	bcf	status,0,c
  5712  002A5E  3217               	rrcf	___lldiv@divisor+3,f,c
  5713  002A60  3216               	rrcf	___lldiv@divisor+2,f,c
  5714  002A62  3215               	rrcf	___lldiv@divisor+1,f,c
  5715  002A64  3214               	rrcf	___lldiv@divisor,f,c
  5716  002A66  2E1C               	decfsz	___lldiv@counter,f,c
  5717  002A68  D7E1               	goto	l3502
  5718  002A6A                     l928:
  5719  002A6A  C018  F010         	movff	___lldiv@quotient,?___lldiv
  5720  002A6E  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  5721  002A72  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  5722  002A76  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  5723  002A7A  0012               	return		;funcret
  5724  002A7C                     __end_of___lldiv:
  5725                           	opt stack 0
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           intcon	equ	0xFF2
  5733                           intcon2	equ	0xFF1
  5734                           intcon3	equ	0xFF0
  5735                           postinc0	equ	0xFEE
  5736                           wreg	equ	0xFE8
  5737                           postdec1	equ	0xFE5
  5738                           fsr1l	equ	0xFE1
  5739                           indf2	equ	0xFDF
  5740                           postinc2	equ	0xFDE
  5741                           postdec2	equ	0xFDD
  5742                           fsr2h	equ	0xFDA
  5743                           fsr2l	equ	0xFD9
  5744                           status	equ	0xFD8
  5745                           
  5746 ;; *************** function ___fttol *****************
  5747 ;; Defined at:
  5748 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  f1              3    0[BANK0 ] float 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  lval            4   10[BANK0 ] unsigned long 
  5753 ;;  exp1            1   14[BANK0 ] unsigned char 
  5754 ;;  sign1           1    9[BANK0 ] unsigned char 
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  4    0[BANK0 ] long 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5764 ;;      Params:         0       4       0       0       0       0       0       0       0
  5765 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5766 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5767 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5768 ;;Total ram usage:       15 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    2
  5771 ;; This function calls:
  5772 ;;		Nothing
  5773 ;; This function is called by:
  5774 ;;		_main
  5775 ;;		_sprintf
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text14
  5780  001FAC                     __ptext14:
  5781                           	opt stack 0
  5782  001FAC                     ___fttol:
  5783                           	opt stack 27
  5784                           
  5785                           ;incstack = 0
  5786  001FAC  C062  F064         	movff	___fttol@f1+2,??___fttol
  5787  001FB0  0100               	movlb	0	; () banked
  5788  001FB2  6B65               	clrf	(??___fttol+1)& (0+255),b
  5789  001FB4  6B66               	clrf	(??___fttol+2)& (0+255),b
  5790  001FB6  0100               	movlb	0	; () banked
  5791  001FB8  3561               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5792  001FBA  0100               	movlb	0	; () banked
  5793  001FBC  3764               	rlcf	??___fttol& (0+255),f,b
  5794  001FBE  E301               	bnc	u5031
  5795  001FC0  8165               	bsf	(??___fttol+1)& (0+255),0,b
  5796  001FC2                     u5031:
  5797  001FC2  0100               	movlb	0	; () banked
  5798  001FC4  5164               	movf	??___fttol& (0+255),w,b
  5799  001FC6  0100               	movlb	0	; () banked
  5800  001FC8  6F6E               	movwf	___fttol@exp1& (0+255),b
  5801  001FCA  0100               	movlb	0	; () banked
  5802  001FCC  516E               	movf	___fttol@exp1& (0+255),w,b
  5803  001FCE  A4D8               	btfss	status,2,c
  5804  001FD0  D00A               	goto	l4630
  5805                           
  5806                           ; BSR set to: 0
  5807  001FD2  0E00               	movlw	0
  5808  001FD4  0100               	movlb	0	; () banked
  5809  001FD6  6F60               	movwf	?___fttol& (0+255),b
  5810  001FD8  0E00               	movlw	0
  5811  001FDA  6F61               	movwf	(?___fttol+1)& (0+255),b
  5812  001FDC  0E00               	movlw	0
  5813  001FDE  6F62               	movwf	(?___fttol+2)& (0+255),b
  5814  001FE0  0E00               	movlw	0
  5815  001FE2  6F63               	movwf	(?___fttol+3)& (0+255),b
  5816                           
  5817                           ; BSR set to: 0
  5818  001FE4  0012               	return	
  5819  001FE6                     l4630:
  5820                           
  5821                           ; BSR set to: 0
  5822  001FE6  0E17               	movlw	23
  5823  001FE8  0100               	movlb	0	; () banked
  5824  001FEA  6F64               	movwf	??___fttol& (0+255),b
  5825  001FEC  C060  F065         	movff	___fttol@f1,??___fttol+1
  5826  001FF0  C061  F066         	movff	___fttol@f1+1,??___fttol+2
  5827  001FF4  C062  F067         	movff	___fttol@f1+2,??___fttol+3
  5828  001FF8  0100               	movlb	0	; () banked
  5829  001FFA  2964               	incf	??___fttol& (0+255),w,b
  5830  001FFC  0100               	movlb	0	; () banked
  5831  001FFE  6F68               	movwf	(??___fttol+4)& (0+255),b
  5832  002000  D005               	goto	u5050
  5833  002002                     u5055:
  5834  002002  0100               	movlb	0	; () banked
  5835  002004  90D8               	bcf	status,0,c
  5836  002006  3367               	rrcf	(??___fttol+3)& (0+255),f,b
  5837  002008  3366               	rrcf	(??___fttol+2)& (0+255),f,b
  5838  00200A  3365               	rrcf	(??___fttol+1)& (0+255),f,b
  5839  00200C                     u5050:
  5840  00200C  0100               	movlb	0	; () banked
  5841  00200E  2F68               	decfsz	(??___fttol+4)& (0+255),f,b
  5842  002010  D7F8               	goto	u5055
  5843  002012  0100               	movlb	0	; () banked
  5844  002014  5165               	movf	(??___fttol+1)& (0+255),w,b
  5845  002016  0100               	movlb	0	; () banked
  5846  002018  6F69               	movwf	___fttol@sign1& (0+255),b
  5847                           
  5848                           ; BSR set to: 0
  5849  00201A  0100               	movlb	0	; () banked
  5850  00201C  8F61               	bsf	(___fttol@f1+1)& (0+255),7,b
  5851                           
  5852                           ; BSR set to: 0
  5853  00201E  0EFF               	movlw	255
  5854  002020  0100               	movlb	0	; () banked
  5855  002022  1760               	andwf	___fttol@f1& (0+255),f,b
  5856  002024  0EFF               	movlw	255
  5857  002026  0100               	movlb	0	; () banked
  5858  002028  1761               	andwf	(___fttol@f1+1)& (0+255),f,b
  5859  00202A  0E00               	movlw	0
  5860  00202C  0100               	movlb	0	; () banked
  5861  00202E  1762               	andwf	(___fttol@f1+2)& (0+255),f,b
  5862                           
  5863                           ; BSR set to: 0
  5864  002030  0100               	movlb	0	; () banked
  5865  002032  5160               	movf	___fttol@f1& (0+255),w,b
  5866  002034  0100               	movlb	0	; () banked
  5867  002036  6F6A               	movwf	___fttol@lval& (0+255),b
  5868  002038  0100               	movlb	0	; () banked
  5869  00203A  5161               	movf	(___fttol@f1+1)& (0+255),w,b
  5870  00203C  0100               	movlb	0	; () banked
  5871  00203E  6F6B               	movwf	(___fttol@lval+1)& (0+255),b
  5872  002040  0100               	movlb	0	; () banked
  5873  002042  5162               	movf	(___fttol@f1+2)& (0+255),w,b
  5874  002044  0100               	movlb	0	; () banked
  5875  002046  6F6C               	movwf	(___fttol@lval+2)& (0+255),b
  5876  002048  0100               	movlb	0	; () banked
  5877  00204A  6B6D               	clrf	(___fttol@lval+3)& (0+255),b
  5878                           
  5879                           ; BSR set to: 0
  5880  00204C  0E8E               	movlw	142
  5881  00204E  0100               	movlb	0	; () banked
  5882  002050  5F6E               	subwf	___fttol@exp1& (0+255),f,b
  5883                           
  5884                           ; BSR set to: 0
  5885  002052  0100               	movlb	0	; () banked
  5886  002054  AF6E               	btfss	___fttol@exp1& (0+255),7,b
  5887  002056  D01A               	goto	l4652
  5888                           
  5889                           ; BSR set to: 0
  5890  002058  0100               	movlb	0	; () banked
  5891  00205A  516E               	movf	___fttol@exp1& (0+255),w,b
  5892  00205C  0A80               	xorlw	128
  5893  00205E  0F8F               	addlw	143
  5894  002060  B0D8               	btfsc	status,0,c
  5895  002062  D00A               	goto	l4648
  5896                           
  5897                           ; BSR set to: 0
  5898  002064  0E00               	movlw	0
  5899  002066  0100               	movlb	0	; () banked
  5900  002068  6F60               	movwf	?___fttol& (0+255),b
  5901  00206A  0E00               	movlw	0
  5902  00206C  6F61               	movwf	(?___fttol+1)& (0+255),b
  5903  00206E  0E00               	movlw	0
  5904  002070  6F62               	movwf	(?___fttol+2)& (0+255),b
  5905  002072  0E00               	movlw	0
  5906  002074  6F63               	movwf	(?___fttol+3)& (0+255),b
  5907                           
  5908                           ; BSR set to: 0
  5909  002076  0012               	return	
  5910  002078                     l4648:
  5911                           
  5912                           ; BSR set to: 0
  5913  002078  0100               	movlb	0	; () banked
  5914  00207A  90D8               	bcf	status,0,c
  5915  00207C  336D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5916  00207E  336C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5917  002080  336B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5918  002082  336A               	rrcf	___fttol@lval& (0+255),f,b
  5919                           
  5920                           ; BSR set to: 0
  5921  002084  0100               	movlb	0	; () banked
  5922  002086  3F6E               	incfsz	___fttol@exp1& (0+255),f,b
  5923  002088  D7F7               	goto	l4648
  5924                           
  5925                           ; BSR set to: 0
  5926  00208A  D01B               	goto	l4662
  5927  00208C                     l4652:
  5928                           
  5929                           ; BSR set to: 0
  5930  00208C  0E17               	movlw	23
  5931  00208E  0100               	movlb	0	; () banked
  5932  002090  656E               	cpfsgt	___fttol@exp1& (0+255),b
  5933  002092  D012               	goto	l4660
  5934                           
  5935                           ; BSR set to: 0
  5936  002094  0E00               	movlw	0
  5937  002096  0100               	movlb	0	; () banked
  5938  002098  6F60               	movwf	?___fttol& (0+255),b
  5939  00209A  0E00               	movlw	0
  5940  00209C  6F61               	movwf	(?___fttol+1)& (0+255),b
  5941  00209E  0E00               	movlw	0
  5942  0020A0  6F62               	movwf	(?___fttol+2)& (0+255),b
  5943  0020A2  0E00               	movlw	0
  5944  0020A4  6F63               	movwf	(?___fttol+3)& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947  0020A6  0012               	return	
  5948  0020A8                     l4658:
  5949                           
  5950                           ; BSR set to: 0
  5951  0020A8  0100               	movlb	0	; () banked
  5952  0020AA  90D8               	bcf	status,0,c
  5953  0020AC  376A               	rlcf	___fttol@lval& (0+255),f,b
  5954  0020AE  376B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5955  0020B0  376C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5956  0020B2  376D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5957  0020B4  0100               	movlb	0	; () banked
  5958  0020B6  076E               	decf	___fttol@exp1& (0+255),f,b
  5959  0020B8                     l4660:
  5960                           
  5961                           ; BSR set to: 0
  5962  0020B8  0100               	movlb	0	; () banked
  5963  0020BA  516E               	movf	___fttol@exp1& (0+255),w,b
  5964  0020BC  0100               	movlb	0	; () banked
  5965  0020BE  A4D8               	btfss	status,2,c
  5966  0020C0  D7F3               	goto	l4658
  5967  0020C2                     l4662:
  5968                           
  5969                           ; BSR set to: 0
  5970  0020C2  0100               	movlb	0	; () banked
  5971  0020C4  5169               	movf	___fttol@sign1& (0+255),w,b
  5972  0020C6  0100               	movlb	0	; () banked
  5973  0020C8  B4D8               	btfsc	status,2,c
  5974  0020CA  D009               	goto	l4666
  5975                           
  5976                           ; BSR set to: 0
  5977  0020CC  0100               	movlb	0	; () banked
  5978  0020CE  1F6D               	comf	(___fttol@lval+3)& (0+255),f,b
  5979  0020D0  1F6C               	comf	(___fttol@lval+2)& (0+255),f,b
  5980  0020D2  1F6B               	comf	(___fttol@lval+1)& (0+255),f,b
  5981  0020D4  6D6A               	negf	___fttol@lval& (0+255),b
  5982  0020D6  0E00               	movlw	0
  5983  0020D8  236B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5984  0020DA  236C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5985  0020DC  236D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5986  0020DE                     l4666:
  5987                           
  5988                           ; BSR set to: 0
  5989  0020DE  C06A  F060         	movff	___fttol@lval,?___fttol
  5990  0020E2  C06B  F061         	movff	___fttol@lval+1,?___fttol+1
  5991  0020E6  C06C  F062         	movff	___fttol@lval+2,?___fttol+2
  5992  0020EA  C06D  F063         	movff	___fttol@lval+3,?___fttol+3
  5993  0020EE  0012               	return	
  5994  0020F0                     __end_of___fttol:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           intcon	equ	0xFF2
  6003                           intcon2	equ	0xFF1
  6004                           intcon3	equ	0xFF0
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           postdec1	equ	0xFE5
  6008                           fsr1l	equ	0xFE1
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function ___ftsub *****************
  6017 ;; Defined at:
  6018 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  f1              3    6[BANK0 ] float 
  6021 ;;  f2              3    9[BANK0 ] float 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  3    6[BANK0 ] float 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6033 ;;      Params:         0       6       0       0       0       0       0       0       0
  6034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6036 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6037 ;;Total ram usage:        6 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    4
  6040 ;; This function calls:
  6041 ;;		___ftadd
  6042 ;; This function is called by:
  6043 ;;		_sprintf
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text15
  6048  002DCC                     __ptext15:
  6049                           	opt stack 0
  6050  002DCC                     ___ftsub:
  6051                           	opt stack 25
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;incstack = 0
  6055  002DCC  0100               	movlb	0	; () banked
  6056  002DCE  5169               	movf	___ftsub@f2& (0+255),w,b
  6057  002DD0  0100               	movlb	0	; () banked
  6058  002DD2  116A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6059  002DD4  0100               	movlb	0	; () banked
  6060  002DD6  116B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6061  002DD8  B4D8               	btfsc	status,2,c
  6062  002DDA  D009               	goto	l4620
  6063                           
  6064                           ; BSR set to: 0
  6065  002DDC  0E00               	movlw	0
  6066  002DDE  0100               	movlb	0	; () banked
  6067  002DE0  1B69               	xorwf	___ftsub@f2& (0+255),f,b
  6068  002DE2  0E00               	movlw	0
  6069  002DE4  0100               	movlb	0	; () banked
  6070  002DE6  1B6A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6071  002DE8  0E80               	movlw	128
  6072  002DEA  0100               	movlb	0	; () banked
  6073  002DEC  1B6B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6074  002DEE                     l4620:
  6075                           
  6076                           ; BSR set to: 0
  6077  002DEE  C066  F03D         	movff	___ftsub@f1,___ftadd@f1
  6078  002DF2  C067  F03E         	movff	___ftsub@f1+1,___ftadd@f1+1
  6079  002DF6  C068  F03F         	movff	___ftsub@f1+2,___ftadd@f1+2
  6080  002DFA  C069  F040         	movff	___ftsub@f2,___ftadd@f2
  6081  002DFE  C06A  F041         	movff	___ftsub@f2+1,___ftadd@f2+1
  6082  002E02  C06B  F042         	movff	___ftsub@f2+2,___ftadd@f2+2
  6083  002E06  ECCB  F00E         	call	___ftadd	;wreg free
  6084  002E0A  C03D  F066         	movff	?___ftadd,?___ftsub
  6085  002E0E  C03E  F067         	movff	?___ftadd+1,?___ftsub+1
  6086  002E12  C03F  F068         	movff	?___ftadd+2,?___ftsub+2
  6087  002E16  0012               	return	
  6088  002E18                     __end_of___ftsub:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           intcon2	equ	0xFF1
  6098                           intcon3	equ	0xFF0
  6099                           postinc0	equ	0xFEE
  6100                           wreg	equ	0xFE8
  6101                           postdec1	equ	0xFE5
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function ___ftadd *****************
  6111 ;; Defined at:
  6112 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  f1              3   60[COMRAM] float 
  6115 ;;  f2              3   63[COMRAM] float 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  exp1            1    5[BANK0 ] unsigned char 
  6118 ;;  exp2            1    4[BANK0 ] unsigned char 
  6119 ;;  sign            1    3[BANK0 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  3   60[COMRAM] float 
  6122 ;; Registers used:
  6123 ;;		wreg, status,2, status,0, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6129 ;;      Params:         6       0       0       0       0       0       0       0       0
  6130 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6131 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6132 ;;      Totals:         6       6       0       0       0       0       0       0       0
  6133 ;;Total ram usage:       12 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    3
  6136 ;; This function calls:
  6137 ;;		___ftpack
  6138 ;; This function is called by:
  6139 ;;		_sprintf
  6140 ;;		___ftsub
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text16
  6145  001D96                     __ptext16:
  6146                           	opt stack 0
  6147  001D96                     ___ftadd:
  6148                           	opt stack 25
  6149                           
  6150                           ;incstack = 0
  6151  001D96  C03F  F060         	movff	___ftadd@f1+2,??___ftadd
  6152  001D9A  0100               	movlb	0	; () banked
  6153  001D9C  6B61               	clrf	(??___ftadd+1)& (0+255),b
  6154  001D9E  6B62               	clrf	(??___ftadd+2)& (0+255),b
  6155  001DA0  343E               	rlcf	___ftadd@f1+1,w,c
  6156  001DA2  0100               	movlb	0	; () banked
  6157  001DA4  3760               	rlcf	??___ftadd& (0+255),f,b
  6158  001DA6  E301               	bnc	u4681
  6159  001DA8  8161               	bsf	(??___ftadd+1)& (0+255),0,b
  6160  001DAA                     u4681:
  6161  001DAA  0100               	movlb	0	; () banked
  6162  001DAC  5160               	movf	??___ftadd& (0+255),w,b
  6163  001DAE  0100               	movlb	0	; () banked
  6164  001DB0  6F65               	movwf	___ftadd@exp1& (0+255),b
  6165  001DB2  C042  F060         	movff	___ftadd@f2+2,??___ftadd
  6166  001DB6  0100               	movlb	0	; () banked
  6167  001DB8  6B61               	clrf	(??___ftadd+1)& (0+255),b
  6168  001DBA  6B62               	clrf	(??___ftadd+2)& (0+255),b
  6169  001DBC  3441               	rlcf	___ftadd@f2+1,w,c
  6170  001DBE  0100               	movlb	0	; () banked
  6171  001DC0  3760               	rlcf	??___ftadd& (0+255),f,b
  6172  001DC2  E301               	bnc	u4691
  6173  001DC4  8161               	bsf	(??___ftadd+1)& (0+255),0,b
  6174  001DC6                     u4691:
  6175  001DC6  0100               	movlb	0	; () banked
  6176  001DC8  5160               	movf	??___ftadd& (0+255),w,b
  6177  001DCA  0100               	movlb	0	; () banked
  6178  001DCC  6F64               	movwf	___ftadd@exp2& (0+255),b
  6179                           
  6180                           ; BSR set to: 0
  6181  001DCE  0100               	movlb	0	; () banked
  6182  001DD0  5165               	movf	___ftadd@exp1& (0+255),w,b
  6183  001DD2  0100               	movlb	0	; () banked
  6184  001DD4  B4D8               	btfsc	status,2,c
  6185  001DD6  D011               	goto	l804
  6186                           
  6187                           ; BSR set to: 0
  6188  001DD8  0100               	movlb	0	; () banked
  6189  001DDA  5164               	movf	___ftadd@exp2& (0+255),w,b
  6190  001DDC  0100               	movlb	0	; () banked
  6191  001DDE  5D65               	subwf	___ftadd@exp1& (0+255),w,b
  6192  001DE0  B0D8               	btfsc	status,0,c
  6193  001DE2  D012               	goto	l4446
  6194                           
  6195                           ; BSR set to: 0
  6196  001DE4  0100               	movlb	0	; () banked
  6197  001DE6  5165               	movf	___ftadd@exp1& (0+255),w,b
  6198  001DE8  0800               	sublw	0
  6199  001DEA  0100               	movlb	0	; () banked
  6200  001DEC  2564               	addwf	___ftadd@exp2& (0+255),w,b
  6201  001DEE  0100               	movlb	0	; () banked
  6202  001DF0  6F60               	movwf	??___ftadd& (0+255),b
  6203  001DF2  0E18               	movlw	24
  6204  001DF4  0100               	movlb	0	; () banked
  6205  001DF6  6560               	cpfsgt	??___ftadd& (0+255),b
  6206  001DF8  D007               	goto	l4446
  6207  001DFA                     l804:
  6208                           
  6209                           ; BSR set to: 0
  6210  001DFA  C040  F03D         	movff	___ftadd@f2,?___ftadd
  6211  001DFE  C041  F03E         	movff	___ftadd@f2+1,?___ftadd+1
  6212  001E02  C042  F03F         	movff	___ftadd@f2+2,?___ftadd+2
  6213  001E06  0012               	return	
  6214  001E08                     l4446:
  6215                           
  6216                           ; BSR set to: 0
  6217  001E08  0100               	movlb	0	; () banked
  6218  001E0A  5164               	movf	___ftadd@exp2& (0+255),w,b
  6219  001E0C  0100               	movlb	0	; () banked
  6220  001E0E  B4D8               	btfsc	status,2,c
  6221  001E10  D011               	goto	l808
  6222                           
  6223                           ; BSR set to: 0
  6224  001E12  0100               	movlb	0	; () banked
  6225  001E14  5165               	movf	___ftadd@exp1& (0+255),w,b
  6226  001E16  0100               	movlb	0	; () banked
  6227  001E18  5D64               	subwf	___ftadd@exp2& (0+255),w,b
  6228  001E1A  B0D8               	btfsc	status,0,c
  6229  001E1C  D012               	goto	l4452
  6230                           
  6231                           ; BSR set to: 0
  6232  001E1E  0100               	movlb	0	; () banked
  6233  001E20  5164               	movf	___ftadd@exp2& (0+255),w,b
  6234  001E22  0800               	sublw	0
  6235  001E24  0100               	movlb	0	; () banked
  6236  001E26  2565               	addwf	___ftadd@exp1& (0+255),w,b
  6237  001E28  0100               	movlb	0	; () banked
  6238  001E2A  6F60               	movwf	??___ftadd& (0+255),b
  6239  001E2C  0E18               	movlw	24
  6240  001E2E  0100               	movlb	0	; () banked
  6241  001E30  6560               	cpfsgt	??___ftadd& (0+255),b
  6242  001E32  D007               	goto	l4452
  6243  001E34                     l808:
  6244                           
  6245                           ; BSR set to: 0
  6246  001E34  C03D  F03D         	movff	___ftadd@f1,?___ftadd
  6247  001E38  C03E  F03E         	movff	___ftadd@f1+1,?___ftadd+1
  6248  001E3C  C03F  F03F         	movff	___ftadd@f1+2,?___ftadd+2
  6249  001E40  0012               	return	
  6250  001E42                     l4452:
  6251                           
  6252                           ; BSR set to: 0
  6253  001E42  0E06               	movlw	6
  6254  001E44  0100               	movlb	0	; () banked
  6255  001E46  6F63               	movwf	___ftadd@sign& (0+255),b
  6256                           
  6257                           ; BSR set to: 0
  6258  001E48  AE3F               	btfss	___ftadd@f1+2,7,c
  6259  001E4A  D002               	goto	l4458
  6260                           
  6261                           ; BSR set to: 0
  6262  001E4C  0100               	movlb	0	; () banked
  6263  001E4E  8F63               	bsf	___ftadd@sign& (0+255),7,b
  6264  001E50                     l4458:
  6265                           
  6266                           ; BSR set to: 0
  6267  001E50  AE42               	btfss	___ftadd@f2+2,7,c
  6268  001E52  D002               	goto	l810
  6269                           
  6270                           ; BSR set to: 0
  6271  001E54  0100               	movlb	0	; () banked
  6272  001E56  8D63               	bsf	___ftadd@sign& (0+255),6,b
  6273  001E58                     l810:
  6274                           
  6275                           ; BSR set to: 0
  6276  001E58  8E3E               	bsf	___ftadd@f1+1,7,c
  6277                           
  6278                           ; BSR set to: 0
  6279  001E5A  0EFF               	movlw	255
  6280  001E5C  163D               	andwf	___ftadd@f1,f,c
  6281  001E5E  0EFF               	movlw	255
  6282  001E60  163E               	andwf	___ftadd@f1+1,f,c
  6283  001E62  0E00               	movlw	0
  6284  001E64  163F               	andwf	___ftadd@f1+2,f,c
  6285  001E66  8E41               	bsf	___ftadd@f2+1,7,c
  6286                           
  6287                           ; BSR set to: 0
  6288  001E68  0EFF               	movlw	255
  6289  001E6A  1640               	andwf	___ftadd@f2,f,c
  6290  001E6C  0EFF               	movlw	255
  6291  001E6E  1641               	andwf	___ftadd@f2+1,f,c
  6292  001E70  0E00               	movlw	0
  6293  001E72  1642               	andwf	___ftadd@f2+2,f,c
  6294                           
  6295                           ; BSR set to: 0
  6296  001E74  0100               	movlb	0	; () banked
  6297  001E76  5164               	movf	___ftadd@exp2& (0+255),w,b
  6298  001E78  0100               	movlb	0	; () banked
  6299  001E7A  5D65               	subwf	___ftadd@exp1& (0+255),w,b
  6300  001E7C  B0D8               	btfsc	status,0,c
  6301  001E7E  D023               	goto	l4478
  6302  001E80                     l4468:
  6303                           
  6304                           ; BSR set to: 0
  6305  001E80  90D8               	bcf	status,0,c
  6306  001E82  3640               	rlcf	___ftadd@f2,f,c
  6307  001E84  3641               	rlcf	___ftadd@f2+1,f,c
  6308  001E86  3642               	rlcf	___ftadd@f2+2,f,c
  6309  001E88  0100               	movlb	0	; () banked
  6310  001E8A  0764               	decf	___ftadd@exp2& (0+255),f,b
  6311                           
  6312                           ; BSR set to: 0
  6313  001E8C  0100               	movlb	0	; () banked
  6314  001E8E  5165               	movf	___ftadd@exp1& (0+255),w,b
  6315  001E90  0100               	movlb	0	; () banked
  6316  001E92  1964               	xorwf	___ftadd@exp2& (0+255),w,b
  6317  001E94  B4D8               	btfsc	status,2,c
  6318  001E96  D010               	goto	l4476
  6319                           
  6320                           ; BSR set to: 0
  6321  001E98  0100               	movlb	0	; () banked
  6322  001E9A  0763               	decf	___ftadd@sign& (0+255),f,b
  6323  001E9C  C063  F060         	movff	___ftadd@sign,??___ftadd
  6324  001EA0  0E07               	movlw	7
  6325  001EA2  0100               	movlb	0	; () banked
  6326  001EA4  1760               	andwf	??___ftadd& (0+255),f,b
  6327  001EA6  B4D8               	btfsc	status,2,c
  6328  001EA8  D007               	goto	l4476
  6329  001EAA  D7EA               	goto	l4468
  6330  001EAC                     l4474:
  6331                           
  6332                           ; BSR set to: 0
  6333  001EAC  90D8               	bcf	status,0,c
  6334  001EAE  323F               	rrcf	___ftadd@f1+2,f,c
  6335  001EB0  323E               	rrcf	___ftadd@f1+1,f,c
  6336  001EB2  323D               	rrcf	___ftadd@f1,f,c
  6337  001EB4  0100               	movlb	0	; () banked
  6338  001EB6  2B65               	incf	___ftadd@exp1& (0+255),f,b
  6339  001EB8                     l4476:
  6340                           
  6341                           ; BSR set to: 0
  6342  001EB8  0100               	movlb	0	; () banked
  6343  001EBA  5164               	movf	___ftadd@exp2& (0+255),w,b
  6344  001EBC  0100               	movlb	0	; () banked
  6345  001EBE  1965               	xorwf	___ftadd@exp1& (0+255),w,b
  6346  001EC0  B4D8               	btfsc	status,2,c
  6347  001EC2  D029               	goto	l819
  6348  001EC4  D7F3               	goto	l4474
  6349  001EC6                     l4478:
  6350                           
  6351                           ; BSR set to: 0
  6352  001EC6  0100               	movlb	0	; () banked
  6353  001EC8  5165               	movf	___ftadd@exp1& (0+255),w,b
  6354  001ECA  0100               	movlb	0	; () banked
  6355  001ECC  5D64               	subwf	___ftadd@exp2& (0+255),w,b
  6356  001ECE  B0D8               	btfsc	status,0,c
  6357  001ED0  D022               	goto	l819
  6358  001ED2                     l4480:
  6359                           
  6360                           ; BSR set to: 0
  6361  001ED2  90D8               	bcf	status,0,c
  6362  001ED4  363D               	rlcf	___ftadd@f1,f,c
  6363  001ED6  363E               	rlcf	___ftadd@f1+1,f,c
  6364  001ED8  363F               	rlcf	___ftadd@f1+2,f,c
  6365  001EDA  0100               	movlb	0	; () banked
  6366  001EDC  0765               	decf	___ftadd@exp1& (0+255),f,b
  6367                           
  6368                           ; BSR set to: 0
  6369  001EDE  0100               	movlb	0	; () banked
  6370  001EE0  5165               	movf	___ftadd@exp1& (0+255),w,b
  6371  001EE2  0100               	movlb	0	; () banked
  6372  001EE4  1964               	xorwf	___ftadd@exp2& (0+255),w,b
  6373  001EE6  B4D8               	btfsc	status,2,c
  6374  001EE8  D010               	goto	l4488
  6375                           
  6376                           ; BSR set to: 0
  6377  001EEA  0100               	movlb	0	; () banked
  6378  001EEC  0763               	decf	___ftadd@sign& (0+255),f,b
  6379  001EEE  C063  F060         	movff	___ftadd@sign,??___ftadd
  6380  001EF2  0E07               	movlw	7
  6381  001EF4  0100               	movlb	0	; () banked
  6382  001EF6  1760               	andwf	??___ftadd& (0+255),f,b
  6383  001EF8  B4D8               	btfsc	status,2,c
  6384  001EFA  D007               	goto	l4488
  6385  001EFC  D7EA               	goto	l4480
  6386  001EFE                     l4486:
  6387                           
  6388                           ; BSR set to: 0
  6389  001EFE  90D8               	bcf	status,0,c
  6390  001F00  3242               	rrcf	___ftadd@f2+2,f,c
  6391  001F02  3241               	rrcf	___ftadd@f2+1,f,c
  6392  001F04  3240               	rrcf	___ftadd@f2,f,c
  6393  001F06  0100               	movlb	0	; () banked
  6394  001F08  2B64               	incf	___ftadd@exp2& (0+255),f,b
  6395  001F0A                     l4488:
  6396                           
  6397                           ; BSR set to: 0
  6398  001F0A  0100               	movlb	0	; () banked
  6399  001F0C  5164               	movf	___ftadd@exp2& (0+255),w,b
  6400  001F0E  0100               	movlb	0	; () banked
  6401  001F10  1965               	xorwf	___ftadd@exp1& (0+255),w,b
  6402  001F12  A4D8               	btfss	status,2,c
  6403  001F14  D7F4               	goto	l4486
  6404  001F16                     l819:
  6405                           
  6406                           ; BSR set to: 0
  6407  001F16  0100               	movlb	0	; () banked
  6408  001F18  AF63               	btfss	___ftadd@sign& (0+255),7,b
  6409  001F1A  D00C               	goto	l828
  6410                           
  6411                           ; BSR set to: 0
  6412  001F1C  0EFF               	movlw	255
  6413  001F1E  1A3D               	xorwf	___ftadd@f1,f,c
  6414  001F20  0EFF               	movlw	255
  6415  001F22  1A3E               	xorwf	___ftadd@f1+1,f,c
  6416  001F24  0EFF               	movlw	255
  6417  001F26  1A3F               	xorwf	___ftadd@f1+2,f,c
  6418  001F28  0E01               	movlw	1
  6419  001F2A  263D               	addwf	___ftadd@f1,f,c
  6420  001F2C  0E00               	movlw	0
  6421  001F2E  223E               	addwfc	___ftadd@f1+1,f,c
  6422  001F30  0E00               	movlw	0
  6423  001F32  223F               	addwfc	___ftadd@f1+2,f,c
  6424  001F34                     l828:
  6425                           
  6426                           ; BSR set to: 0
  6427  001F34  0100               	movlb	0	; () banked
  6428  001F36  AD63               	btfss	___ftadd@sign& (0+255),6,b
  6429  001F38  D00C               	goto	l4494
  6430                           
  6431                           ; BSR set to: 0
  6432  001F3A  0EFF               	movlw	255
  6433  001F3C  1A40               	xorwf	___ftadd@f2,f,c
  6434  001F3E  0EFF               	movlw	255
  6435  001F40  1A41               	xorwf	___ftadd@f2+1,f,c
  6436  001F42  0EFF               	movlw	255
  6437  001F44  1A42               	xorwf	___ftadd@f2+2,f,c
  6438  001F46  0E01               	movlw	1
  6439  001F48  2640               	addwf	___ftadd@f2,f,c
  6440  001F4A  0E00               	movlw	0
  6441  001F4C  2241               	addwfc	___ftadd@f2+1,f,c
  6442  001F4E  0E00               	movlw	0
  6443  001F50  2242               	addwfc	___ftadd@f2+2,f,c
  6444  001F52                     l4494:
  6445                           
  6446                           ; BSR set to: 0
  6447  001F52  0E00               	movlw	0
  6448  001F54  0100               	movlb	0	; () banked
  6449  001F56  6F63               	movwf	___ftadd@sign& (0+255),b
  6450                           
  6451                           ; BSR set to: 0
  6452  001F58  503D               	movf	___ftadd@f1,w,c
  6453  001F5A  2640               	addwf	___ftadd@f2,f,c
  6454  001F5C  503E               	movf	___ftadd@f1+1,w,c
  6455  001F5E  2241               	addwfc	___ftadd@f2+1,f,c
  6456  001F60  503F               	movf	___ftadd@f1+2,w,c
  6457  001F62  2242               	addwfc	___ftadd@f2+2,f,c
  6458                           
  6459                           ; BSR set to: 0
  6460  001F64  AE42               	btfss	___ftadd@f2+2,7,c
  6461  001F66  D00F               	goto	l4504
  6462                           
  6463                           ; BSR set to: 0
  6464  001F68  0EFF               	movlw	255
  6465  001F6A  1A40               	xorwf	___ftadd@f2,f,c
  6466  001F6C  0EFF               	movlw	255
  6467  001F6E  1A41               	xorwf	___ftadd@f2+1,f,c
  6468  001F70  0EFF               	movlw	255
  6469  001F72  1A42               	xorwf	___ftadd@f2+2,f,c
  6470  001F74  0E01               	movlw	1
  6471  001F76  2640               	addwf	___ftadd@f2,f,c
  6472  001F78  0E00               	movlw	0
  6473  001F7A  2241               	addwfc	___ftadd@f2+1,f,c
  6474  001F7C  0E00               	movlw	0
  6475  001F7E  2242               	addwfc	___ftadd@f2+2,f,c
  6476                           
  6477                           ; BSR set to: 0
  6478  001F80  0E01               	movlw	1
  6479  001F82  0100               	movlb	0	; () banked
  6480  001F84  6F63               	movwf	___ftadd@sign& (0+255),b
  6481  001F86                     l4504:
  6482                           
  6483                           ; BSR set to: 0
  6484  001F86  C040  F010         	movff	___ftadd@f2,___ftpack@arg
  6485  001F8A  C041  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  6486  001F8E  C042  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  6487  001F92  C065  F013         	movff	___ftadd@exp1,___ftpack@exp
  6488  001F96  C063  F014         	movff	___ftadd@sign,___ftpack@sign
  6489  001F9A  EC1C  F014         	call	___ftpack	;wreg free
  6490  001F9E  C010  F03D         	movff	?___ftpack,?___ftadd
  6491  001FA2  C011  F03E         	movff	?___ftpack+1,?___ftadd+1
  6492  001FA6  C012  F03F         	movff	?___ftpack+2,?___ftadd+2
  6493  001FAA  0012               	return	
  6494  001FAC                     __end_of___ftadd:
  6495                           	opt stack 0
  6496                           tblptru	equ	0xFF8
  6497                           tblptrh	equ	0xFF7
  6498                           tblptrl	equ	0xFF6
  6499                           tablat	equ	0xFF5
  6500                           prodh	equ	0xFF4
  6501                           prodl	equ	0xFF3
  6502                           intcon	equ	0xFF2
  6503                           intcon2	equ	0xFF1
  6504                           intcon3	equ	0xFF0
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           postdec1	equ	0xFE5
  6508                           fsr1l	equ	0xFE1
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function ___ftneg *****************
  6517 ;; Defined at:
  6518 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  f1              3   15[COMRAM] float 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;		None
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  3   15[COMRAM] float 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6532 ;;      Params:         3       0       0       0       0       0       0       0       0
  6533 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6535 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6536 ;;Total ram usage:        3 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    2
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_sprintf
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text17
  6547  002FBC                     __ptext17:
  6548                           	opt stack 0
  6549  002FBC                     ___ftneg:
  6550                           	opt stack 27
  6551                           
  6552                           ;incstack = 0
  6553  002FBC  5010               	movf	___ftneg@f1,w,c
  6554  002FBE  1011               	iorwf	___ftneg@f1+1,w,c
  6555  002FC0  1012               	iorwf	___ftneg@f1+2,w,c
  6556  002FC2  B4D8               	btfsc	status,2,c
  6557  002FC4  D006               	goto	l878
  6558  002FC6  0E00               	movlw	0
  6559  002FC8  1A10               	xorwf	___ftneg@f1,f,c
  6560  002FCA  0E00               	movlw	0
  6561  002FCC  1A11               	xorwf	___ftneg@f1+1,f,c
  6562  002FCE  0E80               	movlw	128
  6563  002FD0  1A12               	xorwf	___ftneg@f1+2,f,c
  6564  002FD2                     l878:
  6565  002FD2  C010  F010         	movff	___ftneg@f1,?___ftneg
  6566  002FD6  C011  F011         	movff	___ftneg@f1+1,?___ftneg+1
  6567  002FDA  C012  F012         	movff	___ftneg@f1+2,?___ftneg+2
  6568  002FDE  0012               	return		;funcret
  6569  002FE0                     __end_of___ftneg:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           intcon2	equ	0xFF1
  6579                           intcon3	equ	0xFF0
  6580                           postinc0	equ	0xFEE
  6581                           wreg	equ	0xFE8
  6582                           postdec1	equ	0xFE5
  6583                           fsr1l	equ	0xFE1
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function ___ftge *****************
  6592 ;; Defined at:
  6593 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  ff1             3   15[COMRAM] float 
  6596 ;;  ff2             3   18[COMRAM] float 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6608 ;;      Params:         6       0       0       0       0       0       0       0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6610 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6611 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6612 ;;Total ram usage:        9 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    2
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_main
  6619 ;;		_sprintf
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text18
  6624  0028E6                     __ptext18:
  6625                           	opt stack 0
  6626  0028E6                     ___ftge:
  6627                           	opt stack 27
  6628                           
  6629                           ;incstack = 0
  6630  0028E6  AE12               	btfss	___ftge@ff1+2,7,c
  6631  0028E8  D016               	goto	l3428
  6632  0028EA  C010  F016         	movff	___ftge@ff1,??___ftge
  6633  0028EE  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  6634  0028F2  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  6635  0028F6  1E16               	comf	??___ftge,f,c
  6636  0028F8  1E17               	comf	??___ftge+1,f,c
  6637  0028FA  1E18               	comf	??___ftge+2,f,c
  6638  0028FC  2A16               	incf	??___ftge,f,c
  6639  0028FE  0E00               	movlw	0
  6640  002900  2217               	addwfc	??___ftge+1,f,c
  6641  002902  2218               	addwfc	??___ftge+2,f,c
  6642  002904  0E00               	movlw	0
  6643  002906  2416               	addwf	??___ftge,w,c
  6644  002908  6E10               	movwf	___ftge@ff1,c
  6645  00290A  0E00               	movlw	0
  6646  00290C  2017               	addwfc	??___ftge+1,w,c
  6647  00290E  6E11               	movwf	___ftge@ff1+1,c
  6648  002910  0E80               	movlw	128
  6649  002912  2018               	addwfc	??___ftge+2,w,c
  6650  002914  6E12               	movwf	___ftge@ff1+2,c
  6651  002916                     l3428:
  6652  002916  AE15               	btfss	___ftge@ff2+2,7,c
  6653  002918  D016               	goto	l3432
  6654  00291A  C013  F016         	movff	___ftge@ff2,??___ftge
  6655  00291E  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  6656  002922  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  6657  002926  1E16               	comf	??___ftge,f,c
  6658  002928  1E17               	comf	??___ftge+1,f,c
  6659  00292A  1E18               	comf	??___ftge+2,f,c
  6660  00292C  2A16               	incf	??___ftge,f,c
  6661  00292E  0E00               	movlw	0
  6662  002930  2217               	addwfc	??___ftge+1,f,c
  6663  002932  2218               	addwfc	??___ftge+2,f,c
  6664  002934  0E00               	movlw	0
  6665  002936  2416               	addwf	??___ftge,w,c
  6666  002938  6E13               	movwf	___ftge@ff2,c
  6667  00293A  0E00               	movlw	0
  6668  00293C  2017               	addwfc	??___ftge+1,w,c
  6669  00293E  6E14               	movwf	___ftge@ff2+1,c
  6670  002940  0E80               	movlw	128
  6671  002942  2018               	addwfc	??___ftge+2,w,c
  6672  002944  6E15               	movwf	___ftge@ff2+2,c
  6673  002946                     l3432:
  6674  002946  0E00               	movlw	0
  6675  002948  1A10               	xorwf	___ftge@ff1,f,c
  6676  00294A  0E00               	movlw	0
  6677  00294C  1A11               	xorwf	___ftge@ff1+1,f,c
  6678  00294E  0E80               	movlw	128
  6679  002950  1A12               	xorwf	___ftge@ff1+2,f,c
  6680  002952  0E00               	movlw	0
  6681  002954  1A13               	xorwf	___ftge@ff2,f,c
  6682  002956  0E00               	movlw	0
  6683  002958  1A14               	xorwf	___ftge@ff2+1,f,c
  6684  00295A  0E80               	movlw	128
  6685  00295C  1A15               	xorwf	___ftge@ff2+2,f,c
  6686  00295E  5013               	movf	___ftge@ff2,w,c
  6687  002960  5C10               	subwf	___ftge@ff1,w,c
  6688  002962  5014               	movf	___ftge@ff2+1,w,c
  6689  002964  5811               	subwfb	___ftge@ff1+1,w,c
  6690  002966  5015               	movf	___ftge@ff2+2,w,c
  6691  002968  5812               	subwfb	___ftge@ff1+2,w,c
  6692  00296A  B0D8               	btfsc	status,0,c
  6693  00296C  D002               	goto	l3438
  6694  00296E  90D8               	bcf	status,0,c
  6695  002970  0012               	return	
  6696  002972                     l3438:
  6697  002972  80D8               	bsf	status,0,c
  6698  002974  0012               	return	
  6699  002976                     __end_of___ftge:
  6700                           	opt stack 0
  6701                           tblptru	equ	0xFF8
  6702                           tblptrh	equ	0xFF7
  6703                           tblptrl	equ	0xFF6
  6704                           tablat	equ	0xFF5
  6705                           prodh	equ	0xFF4
  6706                           prodl	equ	0xFF3
  6707                           intcon	equ	0xFF2
  6708                           intcon2	equ	0xFF1
  6709                           intcon3	equ	0xFF0
  6710                           postinc0	equ	0xFEE
  6711                           wreg	equ	0xFE8
  6712                           postdec1	equ	0xFE5
  6713                           fsr1l	equ	0xFE1
  6714                           indf2	equ	0xFDF
  6715                           postinc2	equ	0xFDE
  6716                           postdec2	equ	0xFDD
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _parada_forcada *****************
  6722 ;; Defined at:
  6723 ;;		line 162 in file "main.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    5
  6744 ;; This function calls:
  6745 ;;		_SetDDRamAddr
  6746 ;;		_putsXLCD
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text19
  6753  002E18                     __ptext19:
  6754                           	opt stack 0
  6755  002E18                     _parada_forcada:
  6756                           	opt stack 25
  6757                           
  6758                           ;main.c: 163: MotorLigado = 0;
  6759                           
  6760                           ;incstack = 0
  6761  002E18  0E00               	movlw	0
  6762  002E1A  0100               	movlb	0	; () banked
  6763  002E1C  6FC6               	movwf	_MotorLigado& (0+255),b
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;main.c: 164: PORTCbits.RC0 = 0;
  6767  002E1E  9082               	bcf	3970,0,c	;volatile
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;main.c: 165: TMR0IE = 0;
  6771  002E20  9AF2               	bcf	intcon,5,c	;volatile
  6772                           
  6773                           ;main.c: 166: INTCON = 0b00000000;
  6774  002E22  0E00               	movlw	0
  6775  002E24  6EF2               	movwf	intcon,c	;volatile
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;main.c: 167: INT1IE = 0;
  6779  002E26  96F0               	bcf	intcon3,3,c	;volatile
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 168: INT2IE = 0;
  6783  002E28  98F0               	bcf	intcon3,4,c	;volatile
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;main.c: 169: PORTEbits.RE0 = 0;
  6787  002E2A  9084               	bcf	3972,0,c	;volatile
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;main.c: 170: PORTEbits.RE1 = 0;
  6791  002E2C  9284               	bcf	3972,1,c	;volatile
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;main.c: 171: PORTEbits.RE2 = 0;
  6795  002E2E  9484               	bcf	3972,2,c	;volatile
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;main.c: 172: SetDDRamAddr(0x00);
  6799  002E30  0E00               	movlw	0
  6800  002E32  ECBD  F016         	call	_SetDDRamAddr
  6801                           
  6802                           ;main.c: 173: putsXLCD("   PARADA POR   ");
  6803  002E36  0E77               	movlw	low STR_1
  6804  002E38  6E11               	movwf	putsXLCD@buffer,c
  6805  002E3A  0E08               	movlw	high STR_1
  6806  002E3C  6E12               	movwf	putsXLCD@buffer+1,c
  6807  002E3E  EC35  F016         	call	_putsXLCD	;wreg free
  6808                           
  6809                           ;main.c: 174: SetDDRamAddr(0x40);
  6810  002E42  0E40               	movlw	64
  6811  002E44  ECBD  F016         	call	_SetDDRamAddr
  6812                           
  6813                           ;main.c: 175: putsXLCD("SOBRECORRENTE!!!");
  6814  002E48  0E88               	movlw	low STR_2
  6815  002E4A  6E11               	movwf	putsXLCD@buffer,c
  6816  002E4C  0E08               	movlw	high STR_2
  6817  002E4E  6E12               	movwf	putsXLCD@buffer+1,c
  6818  002E50  EC35  F016         	call	_putsXLCD	;wreg free
  6819  002E54  0012               	return		;funcret
  6820  002E56                     __end_of_parada_forcada:
  6821                           	opt stack 0
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodh	equ	0xFF4
  6827                           prodl	equ	0xFF3
  6828                           intcon	equ	0xFF2
  6829                           intcon2	equ	0xFF1
  6830                           intcon3	equ	0xFF0
  6831                           postinc0	equ	0xFEE
  6832                           wreg	equ	0xFE8
  6833                           postdec1	equ	0xFE5
  6834                           fsr1l	equ	0xFE1
  6835                           indf2	equ	0xFDF
  6836                           postinc2	equ	0xFDE
  6837                           postdec2	equ	0xFDD
  6838                           fsr2h	equ	0xFDA
  6839                           fsr2l	equ	0xFD9
  6840                           status	equ	0xFD8
  6841                           
  6842 ;; *************** function _putsXLCD *****************
  6843 ;; Defined at:
  6844 ;;		line 189 in file "lcd.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  buffer          2   16[COMRAM] PTR unsigned char 
  6847 ;;		 -> main@StringCorrente(10), STR_7(4), STR_5(4), main@StringTempo(10), 
  6848 ;;		 -> STR_3(16), STR_2(17), STR_1(17), 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6860 ;;      Params:         2       0       0       0       0       0       0       0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6863 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6864 ;;Total ram usage:        2 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    4
  6867 ;; This function calls:
  6868 ;;		_BusyXLCD
  6869 ;;		_WriteDataXLCD
  6870 ;; This function is called by:
  6871 ;;		_parada_forcada
  6872 ;;		_main
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text20
  6877  002C6A                     __ptext20:
  6878                           	opt stack 0
  6879  002C6A                     _putsXLCD:
  6880                           	opt stack 26
  6881                           
  6882                           ;lcd.c: 191: while(*buffer)
  6883                           
  6884                           ;incstack = 0
  6885  002C6A  D019               	goto	l3226
  6886  002C6C                     l3220:
  6887  002C6C  EC69  F017         	call	_BusyXLCD	;wreg free
  6888  002C70  0900               	iorlw	0
  6889  002C72  A4D8               	btfss	status,2,c
  6890  002C74  D7FB               	goto	l3220
  6891                           
  6892                           ;lcd.c: 194: WriteDataXLCD(*buffer);
  6893  002C76  C011  FFF6         	movff	putsXLCD@buffer,tblptrl
  6894  002C7A  C012  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  6895  002C7E  6AF8               	clrf	tblptru,c
  6896  002C80  0E07               	movlw	(high __ramtop+-1)
  6897  002C82  64F7               	cpfsgt	tblptrh,c
  6898  002C84  D003               	bra	u2887
  6899  002C86  0008               	tblrd		*
  6900  002C88  50F5               	movf	tablat,w,c
  6901  002C8A  D005               	bra	u2880
  6902  002C8C                     u2887:
  6903  002C8C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6904  002C90  CFF7 FFEA          	movff	tblptrh,fsr0h
  6905  002C94  50EF               	movf	indf0,w,c
  6906  002C96                     u2880:
  6907  002C96  EC2B  F017         	call	_WriteDataXLCD
  6908                           
  6909                           ;lcd.c: 195: buffer++;
  6910  002C9A  4A11               	infsnz	putsXLCD@buffer,f,c
  6911  002C9C  2A12               	incf	putsXLCD@buffer+1,f,c
  6912  002C9E                     l3226:
  6913  002C9E  C011  FFF6         	movff	putsXLCD@buffer,tblptrl
  6914  002CA2  C012  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  6915  002CA6  6AF8               	clrf	tblptru,c
  6916  002CA8  0E07               	movlw	(high __ramtop+-1)
  6917  002CAA  64F7               	cpfsgt	tblptrh,c
  6918  002CAC  D003               	bra	u2897
  6919  002CAE  0008               	tblrd		*
  6920  002CB0  50F5               	movf	tablat,w,c
  6921  002CB2  D005               	bra	u2890
  6922  002CB4                     u2897:
  6923  002CB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6924  002CB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6925  002CBC  50EF               	movf	indf0,w,c
  6926  002CBE                     u2890:
  6927  002CBE  0900               	iorlw	0
  6928  002CC0  B4D8               	btfsc	status,2,c
  6929  002CC2  0012               	return	
  6930  002CC4  D7D3               	goto	l3220
  6931  002CC6                     __end_of_putsXLCD:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           prodh	equ	0xFF4
  6938                           prodl	equ	0xFF3
  6939                           intcon	equ	0xFF2
  6940                           intcon2	equ	0xFF1
  6941                           intcon3	equ	0xFF0
  6942                           indf0	equ	0xFEF
  6943                           postinc0	equ	0xFEE
  6944                           fsr0h	equ	0xFEA
  6945                           fsr0l	equ	0xFE9
  6946                           wreg	equ	0xFE8
  6947                           postdec1	equ	0xFE5
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           postinc2	equ	0xFDE
  6951                           postdec2	equ	0xFDD
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8
  6955                           
  6956 ;; *************** function _WriteDataXLCD *****************
  6957 ;; Defined at:
  6958 ;;		line 521 in file "lcd.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  data            1    wreg     unsigned char 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  data            1   15[COMRAM] unsigned char 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, status,2, status,0, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6972 ;;      Params:         0       0       0       0       0       0       0       0       0
  6973 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6975 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6976 ;;Total ram usage:        1 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    3
  6979 ;; This function calls:
  6980 ;;		_DelayFor18TCY
  6981 ;; This function is called by:
  6982 ;;		_putsXLCD
  6983 ;;		_putrsXLCD
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text21
  6988  002E56                     __ptext21:
  6989                           	opt stack 0
  6990  002E56                     _WriteDataXLCD:
  6991                           	opt stack 26
  6992                           
  6993                           ;incstack = 0
  6994                           ;WriteDataXLCD@data stored from wreg
  6995  002E56  6E10               	movwf	WriteDataXLCD@data,c
  6996                           
  6997                           ;lcd.c: 540: TRISD &= 0xf0;
  6998  002E58  0EF0               	movlw	240
  6999  002E5A  1695               	andwf	3989,f,c	;volatile
  7000                           
  7001                           ;lcd.c: 541: PORTD &= 0xf0;
  7002  002E5C  0EF0               	movlw	240
  7003  002E5E  1683               	andwf	3971,f,c	;volatile
  7004                           
  7005                           ;lcd.c: 542: PORTD |= ((data>>4)&0x0f);
  7006  002E60  3810               	swapf	WriteDataXLCD@data,w,c
  7007  002E62  0B0F               	andlw	15
  7008  002E64  0B0F               	andlw	15
  7009  002E66  1283               	iorwf	3971,f,c	;volatile
  7010                           
  7011                           ;lcd.c: 544: LATDbits.LATD5 = 1;
  7012  002E68  8A8C               	bsf	3980,5,c	;volatile
  7013                           
  7014                           ;lcd.c: 545: LATDbits.LATD6 = 0;
  7015  002E6A  9C8C               	bcf	3980,6,c	;volatile
  7016                           
  7017                           ;lcd.c: 546: DelayFor18TCY();
  7018  002E6C  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  7019                           
  7020                           ;lcd.c: 547: LATDbits.LATD4 = 1;
  7021  002E70  888C               	bsf	3980,4,c	;volatile
  7022                           
  7023                           ;lcd.c: 548: DelayFor18TCY();
  7024  002E72  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  7025                           
  7026                           ;lcd.c: 549: LATDbits.LATD4 = 0;
  7027  002E76  988C               	bcf	3980,4,c	;volatile
  7028                           
  7029                           ;lcd.c: 554: PORTD &= 0xf0;
  7030  002E78  0EF0               	movlw	240
  7031  002E7A  1683               	andwf	3971,f,c	;volatile
  7032                           
  7033                           ;lcd.c: 555: PORTD |= (data&0x0f);
  7034  002E7C  5010               	movf	WriteDataXLCD@data,w,c
  7035  002E7E  0B0F               	andlw	15
  7036  002E80  1283               	iorwf	3971,f,c	;volatile
  7037                           
  7038                           ;lcd.c: 557: DelayFor18TCY();
  7039  002E82  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  7040                           
  7041                           ;lcd.c: 558: LATDbits.LATD4 = 1;
  7042  002E86  888C               	bsf	3980,4,c	;volatile
  7043                           
  7044                           ;lcd.c: 559: DelayFor18TCY();
  7045  002E88  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  7046                           
  7047                           ;lcd.c: 560: LATDbits.LATD4 = 0;
  7048  002E8C  988C               	bcf	3980,4,c	;volatile
  7049                           
  7050                           ;lcd.c: 564: TRISD |= 0x0f;
  7051  002E8E  0E0F               	movlw	15
  7052  002E90  1295               	iorwf	3989,f,c	;volatile
  7053  002E92  0012               	return	
  7054  002E94                     __end_of_WriteDataXLCD:
  7055                           	opt stack 0
  7056                           tblptru	equ	0xFF8
  7057                           tblptrh	equ	0xFF7
  7058                           tblptrl	equ	0xFF6
  7059                           tablat	equ	0xFF5
  7060                           prodh	equ	0xFF4
  7061                           prodl	equ	0xFF3
  7062                           intcon	equ	0xFF2
  7063                           intcon2	equ	0xFF1
  7064                           intcon3	equ	0xFF0
  7065                           indf0	equ	0xFEF
  7066                           postinc0	equ	0xFEE
  7067                           fsr0h	equ	0xFEA
  7068                           fsr0l	equ	0xFE9
  7069                           wreg	equ	0xFE8
  7070                           postdec1	equ	0xFE5
  7071                           fsr1l	equ	0xFE1
  7072                           indf2	equ	0xFDF
  7073                           postinc2	equ	0xFDE
  7074                           postdec2	equ	0xFDD
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function ___ftdiv *****************
  7080 ;; Defined at:
  7081 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  f1              3   50[COMRAM] float 
  7084 ;;  f2              3   53[COMRAM] float 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  f3              3   60[COMRAM] float 
  7087 ;;  sign            1   64[COMRAM] unsigned char 
  7088 ;;  exp             1   63[COMRAM] unsigned char 
  7089 ;;  cntr            1   59[COMRAM] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  3   50[COMRAM] float 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7099 ;;      Params:         6       0       0       0       0       0       0       0       0
  7100 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7101 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7102 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7103 ;;Total ram usage:       15 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    3
  7106 ;; This function calls:
  7107 ;;		___ftpack
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text22
  7114  00243E                     __ptext22:
  7115                           	opt stack 0
  7116  00243E                     ___ftdiv:
  7117                           	opt stack 27
  7118                           
  7119                           ;incstack = 0
  7120  00243E  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  7121  002442  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  7122  002444  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  7123  002446  3434               	rlcf	___ftdiv@f1+1,w,c
  7124  002448  3639               	rlcf	??___ftdiv& (0+255),f,c
  7125  00244A  E301               	bnc	u5501
  7126  00244C  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  7127  00244E                     u5501:
  7128  00244E  5039               	movf	??___ftdiv,w,c
  7129  002450  6E40               	movwf	___ftdiv@exp,c
  7130  002452  5040               	movf	___ftdiv@exp,w,c
  7131  002454  A4D8               	btfss	status,2,c
  7132  002456  D007               	goto	l4924
  7133  002458  0E00               	movlw	0
  7134  00245A  6E33               	movwf	?___ftdiv,c
  7135  00245C  0E00               	movlw	0
  7136  00245E  6E34               	movwf	?___ftdiv+1,c
  7137  002460  0E00               	movlw	0
  7138  002462  6E35               	movwf	?___ftdiv+2,c
  7139  002464  0012               	return	
  7140  002466                     l4924:
  7141  002466  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  7142  00246A  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  7143  00246C  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  7144  00246E  3437               	rlcf	___ftdiv@f2+1,w,c
  7145  002470  3639               	rlcf	??___ftdiv& (0+255),f,c
  7146  002472  E301               	bnc	u5521
  7147  002474  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  7148  002476                     u5521:
  7149  002476  5039               	movf	??___ftdiv,w,c
  7150  002478  6E41               	movwf	___ftdiv@sign,c
  7151  00247A  5041               	movf	___ftdiv@sign,w,c
  7152  00247C  A4D8               	btfss	status,2,c
  7153  00247E  D007               	goto	l4930
  7154  002480  0E00               	movlw	0
  7155  002482  6E33               	movwf	?___ftdiv,c
  7156  002484  0E00               	movlw	0
  7157  002486  6E34               	movwf	?___ftdiv+1,c
  7158  002488  0E00               	movlw	0
  7159  00248A  6E35               	movwf	?___ftdiv+2,c
  7160  00248C  0012               	return	
  7161  00248E                     l4930:
  7162  00248E  0E00               	movlw	0
  7163  002490  6E3D               	movwf	___ftdiv@f3,c
  7164  002492  0E00               	movlw	0
  7165  002494  6E3E               	movwf	___ftdiv@f3+1,c
  7166  002496  0E00               	movlw	0
  7167  002498  6E3F               	movwf	___ftdiv@f3+2,c
  7168  00249A  5041               	movf	___ftdiv@sign,w,c
  7169  00249C  0F89               	addlw	137
  7170  00249E  5E40               	subwf	___ftdiv@exp,f,c
  7171  0024A0  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  7172  0024A4  5038               	movf	___ftdiv@f2+2,w,c
  7173  0024A6  1A41               	xorwf	___ftdiv@sign,f,c
  7174  0024A8  0E80               	movlw	128
  7175  0024AA  1641               	andwf	___ftdiv@sign,f,c
  7176  0024AC  8E34               	bsf	___ftdiv@f1+1,7,c
  7177  0024AE  0EFF               	movlw	255
  7178  0024B0  1633               	andwf	___ftdiv@f1,f,c
  7179  0024B2  0EFF               	movlw	255
  7180  0024B4  1634               	andwf	___ftdiv@f1+1,f,c
  7181  0024B6  0E00               	movlw	0
  7182  0024B8  1635               	andwf	___ftdiv@f1+2,f,c
  7183  0024BA  8E37               	bsf	___ftdiv@f2+1,7,c
  7184  0024BC  0EFF               	movlw	255
  7185  0024BE  1636               	andwf	___ftdiv@f2,f,c
  7186  0024C0  0EFF               	movlw	255
  7187  0024C2  1637               	andwf	___ftdiv@f2+1,f,c
  7188  0024C4  0E00               	movlw	0
  7189  0024C6  1638               	andwf	___ftdiv@f2+2,f,c
  7190  0024C8  0E18               	movlw	24
  7191  0024CA  6E3C               	movwf	___ftdiv@cntr,c
  7192  0024CC                     l4950:
  7193  0024CC  90D8               	bcf	status,0,c
  7194  0024CE  363D               	rlcf	___ftdiv@f3,f,c
  7195  0024D0  363E               	rlcf	___ftdiv@f3+1,f,c
  7196  0024D2  363F               	rlcf	___ftdiv@f3+2,f,c
  7197  0024D4  5036               	movf	___ftdiv@f2,w,c
  7198  0024D6  5C33               	subwf	___ftdiv@f1,w,c
  7199  0024D8  5037               	movf	___ftdiv@f2+1,w,c
  7200  0024DA  5834               	subwfb	___ftdiv@f1+1,w,c
  7201  0024DC  5038               	movf	___ftdiv@f2+2,w,c
  7202  0024DE  5835               	subwfb	___ftdiv@f1+2,w,c
  7203  0024E0  A0D8               	btfss	status,0,c
  7204  0024E2  D007               	goto	l839
  7205  0024E4  5036               	movf	___ftdiv@f2,w,c
  7206  0024E6  5E33               	subwf	___ftdiv@f1,f,c
  7207  0024E8  5037               	movf	___ftdiv@f2+1,w,c
  7208  0024EA  5A34               	subwfb	___ftdiv@f1+1,f,c
  7209  0024EC  5038               	movf	___ftdiv@f2+2,w,c
  7210  0024EE  5A35               	subwfb	___ftdiv@f1+2,f,c
  7211  0024F0  803D               	bsf	___ftdiv@f3,0,c
  7212  0024F2                     l839:
  7213  0024F2  90D8               	bcf	status,0,c
  7214  0024F4  3633               	rlcf	___ftdiv@f1,f,c
  7215  0024F6  3634               	rlcf	___ftdiv@f1+1,f,c
  7216  0024F8  3635               	rlcf	___ftdiv@f1+2,f,c
  7217  0024FA  2E3C               	decfsz	___ftdiv@cntr,f,c
  7218  0024FC  D7E7               	goto	l4950
  7219  0024FE  C03D  F010         	movff	___ftdiv@f3,___ftpack@arg
  7220  002502  C03E  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7221  002506  C03F  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7222  00250A  C040  F013         	movff	___ftdiv@exp,___ftpack@exp
  7223  00250E  C041  F014         	movff	___ftdiv@sign,___ftpack@sign
  7224  002512  EC1C  F014         	call	___ftpack	;wreg free
  7225  002516  C010  F033         	movff	?___ftpack,?___ftdiv
  7226  00251A  C011  F034         	movff	?___ftpack+1,?___ftdiv+1
  7227  00251E  C012  F035         	movff	?___ftpack+2,?___ftdiv+2
  7228  002522  0012               	return	
  7229  002524                     __end_of___ftdiv:
  7230                           	opt stack 0
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           intcon	equ	0xFF2
  7238                           intcon2	equ	0xFF1
  7239                           intcon3	equ	0xFF0
  7240                           indf0	equ	0xFEF
  7241                           postinc0	equ	0xFEE
  7242                           fsr0h	equ	0xFEA
  7243                           fsr0l	equ	0xFE9
  7244                           wreg	equ	0xFE8
  7245                           postdec1	equ	0xFE5
  7246                           fsr1l	equ	0xFE1
  7247                           indf2	equ	0xFDF
  7248                           postinc2	equ	0xFDE
  7249                           postdec2	equ	0xFDD
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function ___awtoft *****************
  7255 ;; Defined at:
  7256 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  c               2   35[COMRAM] int 
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;  sign            1   38[COMRAM] unsigned char 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  3   35[COMRAM] float 
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7270 ;;      Params:         3       0       0       0       0       0       0       0       0
  7271 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7272 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7273 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7274 ;;Total ram usage:        4 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    3
  7277 ;; This function calls:
  7278 ;;		___ftpack
  7279 ;; This function is called by:
  7280 ;;		_main
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text23
  7285  002F0C                     __ptext23:
  7286                           	opt stack 0
  7287  002F0C                     ___awtoft:
  7288                           	opt stack 27
  7289                           
  7290                           ;incstack = 0
  7291  002F0C  0E00               	movlw	0
  7292  002F0E  6E27               	movwf	___awtoft@sign,c
  7293  002F10  AE25               	btfss	___awtoft@c+1,7,c
  7294  002F12  D006               	goto	l4972
  7295  002F14  6C24               	negf	___awtoft@c,c
  7296  002F16  1E25               	comf	___awtoft@c+1,f,c
  7297  002F18  B0D8               	btfsc	status,0,c
  7298  002F1A  2A25               	incf	___awtoft@c+1,f,c
  7299  002F1C  0E01               	movlw	1
  7300  002F1E  6E27               	movwf	___awtoft@sign,c
  7301  002F20                     l4972:
  7302  002F20  C024  F010         	movff	___awtoft@c,___ftpack@arg
  7303  002F24  C025  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  7304  002F28  6A12               	clrf	___ftpack@arg+2,c
  7305  002F2A  0E8E               	movlw	142
  7306  002F2C  6E13               	movwf	___ftpack@exp,c
  7307  002F2E  C027  F014         	movff	___awtoft@sign,___ftpack@sign
  7308  002F32  EC1C  F014         	call	___ftpack	;wreg free
  7309  002F36  C010  F024         	movff	?___ftpack,?___awtoft
  7310  002F3A  C011  F025         	movff	?___ftpack+1,?___awtoft+1
  7311  002F3E  C012  F026         	movff	?___ftpack+2,?___awtoft+2
  7312  002F42  0012               	return	
  7313  002F44                     __end_of___awtoft:
  7314                           	opt stack 0
  7315                           tblptru	equ	0xFF8
  7316                           tblptrh	equ	0xFF7
  7317                           tblptrl	equ	0xFF6
  7318                           tablat	equ	0xFF5
  7319                           prodh	equ	0xFF4
  7320                           prodl	equ	0xFF3
  7321                           intcon	equ	0xFF2
  7322                           intcon2	equ	0xFF1
  7323                           intcon3	equ	0xFF0
  7324                           indf0	equ	0xFEF
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function ___ftpack *****************
  7339 ;; Defined at:
  7340 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  arg             3   15[COMRAM] unsigned um
  7343 ;;  exp             1   18[COMRAM] unsigned char 
  7344 ;;  sign            1   19[COMRAM] unsigned char 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;		None
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  3   15[COMRAM] float 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7356 ;;      Params:         5       0       0       0       0       0       0       0       0
  7357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7358 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7359 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7360 ;;Total ram usage:        8 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    2
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		___awtoft
  7367 ;;		___ftadd
  7368 ;;		___ftdiv
  7369 ;;		___ftmul
  7370 ;;		___lltoft
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text24
  7375  002838                     __ptext24:
  7376                           	opt stack 0
  7377  002838                     ___ftpack:
  7378                           	opt stack 25
  7379                           
  7380                           ;incstack = 0
  7381  002838  5013               	movf	___ftpack@exp,w,c
  7382  00283A  B4D8               	btfsc	status,2,c
  7383  00283C  D005               	goto	l4406
  7384  00283E  5010               	movf	___ftpack@arg,w,c
  7385  002840  1011               	iorwf	___ftpack@arg+1,w,c
  7386  002842  1012               	iorwf	___ftpack@arg+2,w,c
  7387  002844  A4D8               	btfss	status,2,c
  7388  002846  D00C               	goto	l4412
  7389  002848                     l4406:
  7390  002848  0E00               	movlw	0
  7391  00284A  6E10               	movwf	?___ftpack,c
  7392  00284C  0E00               	movlw	0
  7393  00284E  6E11               	movwf	?___ftpack+1,c
  7394  002850  0E00               	movlw	0
  7395  002852  6E12               	movwf	?___ftpack+2,c
  7396  002854  0012               	return	
  7397  002856                     l4410:
  7398  002856  2A13               	incf	___ftpack@exp,f,c
  7399  002858  90D8               	bcf	status,0,c
  7400  00285A  3212               	rrcf	___ftpack@arg+2,f,c
  7401  00285C  3211               	rrcf	___ftpack@arg+1,f,c
  7402  00285E  3210               	rrcf	___ftpack@arg,f,c
  7403  002860                     l4412:
  7404  002860  0E00               	movlw	0
  7405  002862  1410               	andwf	___ftpack@arg,w,c
  7406  002864  6E15               	movwf	??___ftpack& (0+255),c
  7407  002866  0E00               	movlw	0
  7408  002868  1411               	andwf	___ftpack@arg+1,w,c
  7409  00286A  6E16               	movwf	(??___ftpack+1)& (0+255),c
  7410  00286C  0EFE               	movlw	254
  7411  00286E  1412               	andwf	___ftpack@arg+2,w,c
  7412  002870  6E17               	movwf	(??___ftpack+2)& (0+255),c
  7413  002872  5015               	movf	??___ftpack,w,c
  7414  002874  1016               	iorwf	??___ftpack+1,w,c
  7415  002876  1017               	iorwf	??___ftpack+2,w,c
  7416  002878  B4D8               	btfsc	status,2,c
  7417  00287A  D00C               	goto	l4418
  7418  00287C  D7EC               	goto	l4410
  7419  00287E                     l4414:
  7420  00287E  2A13               	incf	___ftpack@exp,f,c
  7421  002880  0E01               	movlw	1
  7422  002882  2610               	addwf	___ftpack@arg,f,c
  7423  002884  0E00               	movlw	0
  7424  002886  2211               	addwfc	___ftpack@arg+1,f,c
  7425  002888  0E00               	movlw	0
  7426  00288A  2212               	addwfc	___ftpack@arg+2,f,c
  7427  00288C  90D8               	bcf	status,0,c
  7428  00288E  3212               	rrcf	___ftpack@arg+2,f,c
  7429  002890  3211               	rrcf	___ftpack@arg+1,f,c
  7430  002892  3210               	rrcf	___ftpack@arg,f,c
  7431  002894                     l4418:
  7432  002894  0E00               	movlw	0
  7433  002896  1410               	andwf	___ftpack@arg,w,c
  7434  002898  6E15               	movwf	??___ftpack& (0+255),c
  7435  00289A  0E00               	movlw	0
  7436  00289C  1411               	andwf	___ftpack@arg+1,w,c
  7437  00289E  6E16               	movwf	(??___ftpack+1)& (0+255),c
  7438  0028A0  0EFF               	movlw	255
  7439  0028A2  1412               	andwf	___ftpack@arg+2,w,c
  7440  0028A4  6E17               	movwf	(??___ftpack+2)& (0+255),c
  7441  0028A6  5015               	movf	??___ftpack,w,c
  7442  0028A8  1016               	iorwf	??___ftpack+1,w,c
  7443  0028AA  1017               	iorwf	??___ftpack+2,w,c
  7444  0028AC  B4D8               	btfsc	status,2,c
  7445  0028AE  D006               	goto	l4422
  7446  0028B0  D7E6               	goto	l4414
  7447  0028B2                     l4420:
  7448  0028B2  0613               	decf	___ftpack@exp,f,c
  7449  0028B4  90D8               	bcf	status,0,c
  7450  0028B6  3610               	rlcf	___ftpack@arg,f,c
  7451  0028B8  3611               	rlcf	___ftpack@arg+1,f,c
  7452  0028BA  3612               	rlcf	___ftpack@arg+2,f,c
  7453  0028BC                     l4422:
  7454  0028BC  BE11               	btfsc	___ftpack@arg+1,7,c
  7455  0028BE  D003               	goto	l781
  7456  0028C0  0E02               	movlw	2
  7457  0028C2  6013               	cpfslt	___ftpack@exp,c
  7458  0028C4  D7F6               	goto	l4420
  7459  0028C6                     l781:
  7460  0028C6  A013               	btfss	___ftpack@exp,0,c
  7461  0028C8  9E11               	bcf	___ftpack@arg+1,7,c
  7462  0028CA  90D8               	bcf	status,0,c
  7463  0028CC  3213               	rrcf	___ftpack@exp,f,c
  7464  0028CE  5013               	movf	___ftpack@exp,w,c
  7465  0028D0  1212               	iorwf	___ftpack@arg+2,f,c
  7466  0028D2  5014               	movf	___ftpack@sign,w,c
  7467  0028D4  A4D8               	btfss	status,2,c
  7468  0028D6  8E12               	bsf	___ftpack@arg+2,7,c
  7469  0028D8  C010  F010         	movff	___ftpack@arg,?___ftpack
  7470  0028DC  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  7471  0028E0  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  7472  0028E4  0012               	return	
  7473  0028E6                     __end_of___ftpack:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           intcon2	equ	0xFF1
  7483                           intcon3	equ	0xFF0
  7484                           indf0	equ	0xFEF
  7485                           postinc0	equ	0xFEE
  7486                           fsr0h	equ	0xFEA
  7487                           fsr0l	equ	0xFE9
  7488                           wreg	equ	0xFE8
  7489                           postdec1	equ	0xFE5
  7490                           fsr1l	equ	0xFE1
  7491                           indf2	equ	0xFDF
  7492                           postinc2	equ	0xFDE
  7493                           postdec2	equ	0xFDD
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _SetChanADC *****************
  7499 ;; Defined at:
  7500 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\ADC\adcsetch.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  channel         1    wreg     unsigned char 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  channel         1   16[COMRAM] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0
  7515 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7516 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7517 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7518 ;;Total ram usage:        2 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    2
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_main
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text25
  7529  003054                     __ptext25:
  7530                           	opt stack 0
  7531  003054                     _SetChanADC:
  7532                           	opt stack 28
  7533                           
  7534                           ;incstack = 0
  7535                           ;SetChanADC@channel stored from wreg
  7536  003054  6E11               	movwf	SetChanADC@channel,c
  7537  003056  CFC2 F010          	movff	4034,??_SetChanADC	;volatile
  7538  00305A  0EC3               	movlw	195
  7539  00305C  1610               	andwf	??_SetChanADC,f,c
  7540  00305E  90D8               	bcf	status,0,c
  7541  003060  3011               	rrcf	SetChanADC@channel,w,c
  7542  003062  0B3C               	andlw	60
  7543  003064  1010               	iorwf	??_SetChanADC,w,c
  7544  003066  6EC2               	movwf	4034,c	;volatile
  7545  003068  0012               	return		;funcret
  7546  00306A                     __end_of_SetChanADC:
  7547                           	opt stack 0
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           intcon2	equ	0xFF1
  7556                           intcon3	equ	0xFF0
  7557                           indf0	equ	0xFEF
  7558                           postinc0	equ	0xFEE
  7559                           fsr0h	equ	0xFEA
  7560                           fsr0l	equ	0xFE9
  7561                           wreg	equ	0xFE8
  7562                           postdec1	equ	0xFE5
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _ReadADC *****************
  7572 ;; Defined at:
  7573 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\ADC\adcread.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  2   15[COMRAM] int 
  7580 ;; Registers used:
  7581 ;;		wreg, status,2
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7587 ;;      Params:         2       0       0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7589 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7590 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7591 ;;Total ram usage:        4 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    2
  7594 ;; This function calls:
  7595 ;;		Nothing
  7596 ;; This function is called by:
  7597 ;;		_main
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           	psect	text26
  7602  00307A                     __ptext26:
  7603                           	opt stack 0
  7604  00307A                     _ReadADC:
  7605                           	opt stack 28
  7606                           
  7607                           ;incstack = 0
  7608  00307A  50C4               	movf	4036,w,c	;volatile
  7609  00307C  6E12               	movwf	??_ReadADC& (0+255),c
  7610  00307E  50C3               	movf	4035,w,c	;volatile
  7611  003080  6E10               	movwf	?_ReadADC,c
  7612  003082  C012  F011         	movff	??_ReadADC,?_ReadADC+1
  7613  003086  0012               	return	
  7614  003088                     __end_of_ReadADC:
  7615                           	opt stack 0
  7616                           tblptru	equ	0xFF8
  7617                           tblptrh	equ	0xFF7
  7618                           tblptrl	equ	0xFF6
  7619                           tablat	equ	0xFF5
  7620                           prodh	equ	0xFF4
  7621                           prodl	equ	0xFF3
  7622                           intcon	equ	0xFF2
  7623                           intcon2	equ	0xFF1
  7624                           intcon3	equ	0xFF0
  7625                           indf0	equ	0xFEF
  7626                           postinc0	equ	0xFEE
  7627                           fsr0h	equ	0xFEA
  7628                           fsr0l	equ	0xFE9
  7629                           wreg	equ	0xFE8
  7630                           postdec1	equ	0xFE5
  7631                           fsr1l	equ	0xFE1
  7632                           indf2	equ	0xFDF
  7633                           postinc2	equ	0xFDE
  7634                           postdec2	equ	0xFDD
  7635                           fsr2h	equ	0xFDA
  7636                           fsr2l	equ	0xFD9
  7637                           status	equ	0xFD8
  7638                           
  7639 ;; *************** function _OpenTimer3 *****************
  7640 ;; Defined at:
  7641 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t3open.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  config          1    wreg     unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  config          1   15[COMRAM] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      void 
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0
  7656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7658 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7659 ;;Total ram usage:        1 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    2
  7662 ;; This function calls:
  7663 ;;		Nothing
  7664 ;; This function is called by:
  7665 ;;		_main
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text27
  7670  002F44                     __ptext27:
  7671                           	opt stack 0
  7672  002F44                     _OpenTimer3:
  7673                           	opt stack 28
  7674                           
  7675                           ;incstack = 0
  7676                           ;OpenTimer3@config stored from wreg
  7677  002F44  6E10               	movwf	OpenTimer3@config,c
  7678  002F46  5010               	movf	OpenTimer3@config,w,c
  7679  002F48  0B36               	andlw	54
  7680  002F4A  6EB1               	movwf	4017,c	;volatile
  7681  002F4C  0E00               	movlw	0
  7682  002F4E  6EB3               	movwf	4019,c	;volatile
  7683  002F50  0E00               	movlw	0
  7684  002F52  6EB2               	movwf	4018,c	;volatile
  7685  002F54  92A1               	bcf	4001,1,c	;volatile
  7686  002F56  AE10               	btfss	OpenTimer3@config,7,c
  7687  002F58  D002               	goto	l528
  7688  002F5A  82A0               	bsf	4000,1,c	;volatile
  7689  002F5C  D001               	goto	l529
  7690  002F5E                     l528:
  7691  002F5E  92A0               	bcf	4000,1,c	;volatile
  7692  002F60                     l529:
  7693  002F60  A010               	btfss	OpenTimer3@config,0,c
  7694  002F62  D002               	goto	l530
  7695  002F64  8EB1               	bsf	4017,7,c	;volatile
  7696  002F66  D001               	goto	l531
  7697  002F68                     l530:
  7698  002F68  9EB1               	bcf	4017,7,c	;volatile
  7699  002F6A                     l531:
  7700  002F6A  80B1               	bsf	4017,0,c	;volatile
  7701  002F6C  0012               	return		;funcret
  7702  002F6E                     __end_of_OpenTimer3:
  7703                           	opt stack 0
  7704                           tblptru	equ	0xFF8
  7705                           tblptrh	equ	0xFF7
  7706                           tblptrl	equ	0xFF6
  7707                           tablat	equ	0xFF5
  7708                           prodh	equ	0xFF4
  7709                           prodl	equ	0xFF3
  7710                           intcon	equ	0xFF2
  7711                           intcon2	equ	0xFF1
  7712                           intcon3	equ	0xFF0
  7713                           indf0	equ	0xFEF
  7714                           postinc0	equ	0xFEE
  7715                           fsr0h	equ	0xFEA
  7716                           fsr0l	equ	0xFE9
  7717                           wreg	equ	0xFE8
  7718                           postdec1	equ	0xFE5
  7719                           fsr1l	equ	0xFE1
  7720                           indf2	equ	0xFDF
  7721                           postinc2	equ	0xFDE
  7722                           postdec2	equ	0xFDD
  7723                           fsr2h	equ	0xFDA
  7724                           fsr2l	equ	0xFD9
  7725                           status	equ	0xFD8
  7726                           
  7727 ;; *************** function _OpenTimer2 *****************
  7728 ;; Defined at:
  7729 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t2open.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  config          1    wreg     unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  config          1   15[COMRAM] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      void 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7743 ;;      Params:         0       0       0       0       0       0       0       0       0
  7744 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7746 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7747 ;;Total ram usage:        1 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    2
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_main
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           	psect	text28
  7758  00301E                     __ptext28:
  7759                           	opt stack 0
  7760  00301E                     _OpenTimer2:
  7761                           	opt stack 28
  7762                           
  7763                           ;incstack = 0
  7764                           ;OpenTimer2@config stored from wreg
  7765  00301E  6E10               	movwf	OpenTimer2@config,c
  7766  003020  5010               	movf	OpenTimer2@config,w,c
  7767  003022  0BFB               	andlw	251
  7768  003024  6ECA               	movwf	4042,c	;volatile
  7769  003026  0E00               	movlw	0
  7770  003028  6ECC               	movwf	4044,c	;volatile
  7771  00302A  929E               	bcf	3998,1,c	;volatile
  7772  00302C  AE10               	btfss	OpenTimer2@config,7,c
  7773  00302E  D002               	goto	l511
  7774  003030  829D               	bsf	3997,1,c	;volatile
  7775  003032  D001               	goto	l512
  7776  003034                     l511:
  7777  003034  929D               	bcf	3997,1,c	;volatile
  7778  003036                     l512:
  7779  003036  84CA               	bsf	4042,2,c	;volatile
  7780  003038  0012               	return		;funcret
  7781  00303A                     __end_of_OpenTimer2:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           intcon	equ	0xFF2
  7790                           intcon2	equ	0xFF1
  7791                           intcon3	equ	0xFF0
  7792                           indf0	equ	0xFEF
  7793                           postinc0	equ	0xFEE
  7794                           fsr0h	equ	0xFEA
  7795                           fsr0l	equ	0xFE9
  7796                           wreg	equ	0xFE8
  7797                           postdec1	equ	0xFE5
  7798                           fsr1l	equ	0xFE1
  7799                           indf2	equ	0xFDF
  7800                           postinc2	equ	0xFDE
  7801                           postdec2	equ	0xFDD
  7802                           fsr2h	equ	0xFDA
  7803                           fsr2l	equ	0xFD9
  7804                           status	equ	0xFD8
  7805                           
  7806 ;; *************** function _OpenTimer0 *****************
  7807 ;; Defined at:
  7808 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t0open.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  config          1    wreg     unsigned char 
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;  config          1   15[COMRAM] unsigned char 
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  1    wreg      void 
  7815 ;; Registers used:
  7816 ;;		wreg, status,2, status,0
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7822 ;;      Params:         0       0       0       0       0       0       0       0       0
  7823 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7825 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7826 ;;Total ram usage:        1 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    2
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_main
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text29
  7837  002FE0                     __ptext29:
  7838                           	opt stack 0
  7839  002FE0                     _OpenTimer0:
  7840                           	opt stack 28
  7841                           
  7842                           ;incstack = 0
  7843                           ;OpenTimer0@config stored from wreg
  7844  002FE0  6E10               	movwf	OpenTimer0@config,c
  7845  002FE2  5010               	movf	OpenTimer0@config,w,c
  7846  002FE4  0B7F               	andlw	127
  7847  002FE6  6ED5               	movwf	4053,c	;volatile
  7848  002FE8  0E00               	movlw	0
  7849  002FEA  6ED7               	movwf	4055,c	;volatile
  7850  002FEC  0E00               	movlw	0
  7851  002FEE  6ED6               	movwf	4054,c	;volatile
  7852  002FF0  94F2               	bcf	intcon,2,c	;volatile
  7853  002FF2  AE10               	btfss	OpenTimer0@config,7,c
  7854  002FF4  D002               	goto	l496
  7855  002FF6  8AF2               	bsf	intcon,5,c	;volatile
  7856  002FF8  D001               	goto	l497
  7857  002FFA                     l496:
  7858  002FFA  9AF2               	bcf	intcon,5,c	;volatile
  7859  002FFC                     l497:
  7860  002FFC  8ED5               	bsf	4053,7,c	;volatile
  7861  002FFE  0012               	return		;funcret
  7862  003000                     __end_of_OpenTimer0:
  7863                           	opt stack 0
  7864                           tblptru	equ	0xFF8
  7865                           tblptrh	equ	0xFF7
  7866                           tblptrl	equ	0xFF6
  7867                           tablat	equ	0xFF5
  7868                           prodh	equ	0xFF4
  7869                           prodl	equ	0xFF3
  7870                           intcon	equ	0xFF2
  7871                           intcon2	equ	0xFF1
  7872                           intcon3	equ	0xFF0
  7873                           indf0	equ	0xFEF
  7874                           postinc0	equ	0xFEE
  7875                           fsr0h	equ	0xFEA
  7876                           fsr0l	equ	0xFE9
  7877                           wreg	equ	0xFE8
  7878                           postdec1	equ	0xFE5
  7879                           fsr1l	equ	0xFE1
  7880                           indf2	equ	0xFDF
  7881                           postinc2	equ	0xFDE
  7882                           postdec2	equ	0xFDD
  7883                           fsr2h	equ	0xFDA
  7884                           fsr2l	equ	0xFD9
  7885                           status	equ	0xFD8
  7886                           
  7887 ;; *************** function _OpenADC *****************
  7888 ;; Defined at:
  7889 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\ADC\adcopen.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  config          1    wreg     unsigned char 
  7892 ;;  config2         1   15[COMRAM] unsigned char 
  7893 ;;  portconfig      1   16[COMRAM] unsigned char 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  config          1   19[COMRAM] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7905 ;;      Params:         2       0       0       0       0       0       0       0       0
  7906 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7907 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7908 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7909 ;;Total ram usage:        5 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    2
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_main
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text30
  7920  002BB0                     __ptext30:
  7921                           	opt stack 0
  7922  002BB0                     _OpenADC:
  7923                           	opt stack 28
  7924                           
  7925                           ;incstack = 0
  7926                           ;OpenADC@config stored from wreg
  7927  002BB0  6E14               	movwf	OpenADC@config,c
  7928  002BB2  0E00               	movlw	0
  7929  002BB4  6EC2               	movwf	4034,c	;volatile
  7930  002BB6  0E00               	movlw	0
  7931  002BB8  6EC0               	movwf	4032,c	;volatile
  7932  002BBA  90D8               	bcf	status,0,c
  7933  002BBC  3010               	rrcf	OpenADC@config2,w,c
  7934  002BBE  0B3C               	andlw	60
  7935  002BC0  6EC2               	movwf	4034,c	;volatile
  7936  002BC2  C010  F012         	movff	OpenADC@config2,??_OpenADC
  7937  002BC6  3A12               	swapf	??_OpenADC,f,c
  7938  002BC8  0EF0               	movlw	240
  7939  002BCA  1612               	andwf	??_OpenADC,f,c
  7940  002BCC  0E30               	movlw	48
  7941  002BCE  1612               	andwf	??_OpenADC,f,c
  7942  002BD0  5011               	movf	OpenADC@portconfig,w,c
  7943  002BD2  0B0F               	andlw	15
  7944  002BD4  1012               	iorwf	??_OpenADC,w,c
  7945  002BD6  6EC1               	movwf	4033,c	;volatile
  7946  002BD8  C014  F012         	movff	OpenADC@config,??_OpenADC
  7947  002BDC  90D8               	bcf	status,0,c
  7948  002BDE  3612               	rlcf	??_OpenADC,f,c
  7949  002BE0  90D8               	bcf	status,0,c
  7950  002BE2  3612               	rlcf	??_OpenADC,f,c
  7951  002BE4  0E38               	movlw	56
  7952  002BE6  1612               	andwf	??_OpenADC,f,c
  7953  002BE8  C014  F013         	movff	OpenADC@config,??_OpenADC+1
  7954  002BEC  3A13               	swapf	??_OpenADC+1,f,c
  7955  002BEE  0E0F               	movlw	15
  7956  002BF0  1613               	andwf	??_OpenADC+1,f,c
  7957  002BF2  0E07               	movlw	7
  7958  002BF4  1613               	andwf	??_OpenADC+1,f,c
  7959  002BF6  5014               	movf	OpenADC@config,w,c
  7960  002BF8  0B80               	andlw	128
  7961  002BFA  1013               	iorwf	??_OpenADC+1,w,c
  7962  002BFC  1012               	iorwf	??_OpenADC,w,c
  7963  002BFE  6EC0               	movwf	4032,c	;volatile
  7964  002C00  AE10               	btfss	OpenADC@config2,7,c
  7965  002C02  D003               	goto	l470
  7966  002C04  9C9E               	bcf	3998,6,c	;volatile
  7967  002C06  8C9D               	bsf	3997,6,c	;volatile
  7968  002C08  8CF2               	bsf	intcon,6,c	;volatile
  7969  002C0A                     l470:
  7970  002C0A  80C2               	bsf	4034,0,c	;volatile
  7971  002C0C  0012               	return		;funcret
  7972  002C0E                     __end_of_OpenADC:
  7973                           	opt stack 0
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           intcon	equ	0xFF2
  7981                           intcon2	equ	0xFF1
  7982                           intcon3	equ	0xFF0
  7983                           indf0	equ	0xFEF
  7984                           postinc0	equ	0xFEE
  7985                           fsr0h	equ	0xFEA
  7986                           fsr0l	equ	0xFE9
  7987                           wreg	equ	0xFE8
  7988                           postdec1	equ	0xFE5
  7989                           fsr1l	equ	0xFE1
  7990                           indf2	equ	0xFDF
  7991                           postinc2	equ	0xFDE
  7992                           postdec2	equ	0xFDD
  7993                           fsr2h	equ	0xFDA
  7994                           fsr2l	equ	0xFD9
  7995                           status	equ	0xFD8
  7996                           
  7997 ;; *************** function _InicializaLCD *****************
  7998 ;; Defined at:
  7999 ;;		line 153 in file "main.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;		None
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;		None
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  1    wreg      void 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8013 ;;      Params:         0       0       0       0       0       0       0       0       0
  8014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8016 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8017 ;;Total ram usage:        0 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    5
  8020 ;; This function calls:
  8021 ;;		_BusyXLCD
  8022 ;;		_OpenXLCD
  8023 ;;		_WriteCmdXLCD
  8024 ;; This function is called by:
  8025 ;;		_main
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text31
  8030  002F6E                     __ptext31:
  8031                           	opt stack 0
  8032  002F6E                     _InicializaLCD:
  8033                           	opt stack 25
  8034                           
  8035                           ;main.c: 155: OpenXLCD(0b00101100 & 0b00111000);
  8036                           
  8037                           ;incstack = 0
  8038  002F6E  0E28               	movlw	40
  8039  002F70  ECC2  F013         	call	_OpenXLCD
  8040  002F74                     l3542:
  8041  002F74  EC69  F017         	call	_BusyXLCD	;wreg free
  8042  002F78  0900               	iorlw	0
  8043  002F7A  A4D8               	btfss	status,2,c
  8044  002F7C  D7FB               	goto	l3542
  8045                           
  8046                           ;main.c: 157: WriteCmdXLCD(0x01);
  8047  002F7E  0E01               	movlw	1
  8048  002F80  EC4A  F017         	call	_WriteCmdXLCD
  8049  002F84                     l3546:
  8050  002F84  EC69  F017         	call	_BusyXLCD	;wreg free
  8051  002F88  0900               	iorlw	0
  8052  002F8A  A4D8               	btfss	status,2,c
  8053  002F8C  D7FB               	goto	l3546
  8054                           
  8055                           ;main.c: 159: WriteCmdXLCD(0b00001101 & 0b00001110);
  8056  002F8E  0E0C               	movlw	12
  8057  002F90  EC4A  F017         	call	_WriteCmdXLCD
  8058  002F94  0012               	return		;funcret
  8059  002F96                     __end_of_InicializaLCD:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           intcon	equ	0xFF2
  8068                           intcon2	equ	0xFF1
  8069                           intcon3	equ	0xFF0
  8070                           indf0	equ	0xFEF
  8071                           postinc0	equ	0xFEE
  8072                           fsr0h	equ	0xFEA
  8073                           fsr0l	equ	0xFE9
  8074                           wreg	equ	0xFE8
  8075                           postdec1	equ	0xFE5
  8076                           fsr1l	equ	0xFE1
  8077                           indf2	equ	0xFDF
  8078                           postinc2	equ	0xFDE
  8079                           postdec2	equ	0xFDD
  8080                           fsr2h	equ	0xFDA
  8081                           fsr2l	equ	0xFD9
  8082                           status	equ	0xFD8
  8083                           
  8084 ;; *************** function _OpenXLCD *****************
  8085 ;; Defined at:
  8086 ;;		line 80 in file "lcd.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  lcdtype         1    wreg     unsigned char 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  lcdtype         1   20[COMRAM] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  1    wreg      void 
  8093 ;; Registers used:
  8094 ;;		wreg, status,2, status,0, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8100 ;;      Params:         0       0       0       0       0       0       0       0       0
  8101 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8102 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8103 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8104 ;;Total ram usage:        2 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    4
  8107 ;; This function calls:
  8108 ;;		_BusyXLCD
  8109 ;;		_DelayPORXLCD
  8110 ;;		_SetDDRamAddr
  8111 ;;		_WriteCmdXLCD
  8112 ;; This function is called by:
  8113 ;;		_InicializaLCD
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           	psect	text32
  8118  002784                     __ptext32:
  8119                           	opt stack 0
  8120  002784                     _OpenXLCD:
  8121                           	opt stack 25
  8122                           
  8123                           ;incstack = 0
  8124                           ;OpenXLCD@lcdtype stored from wreg
  8125  002784  6E15               	movwf	OpenXLCD@lcdtype,c
  8126                           
  8127                           ;lcd.c: 92: PORTD &= 0xf0;
  8128  002786  0EF0               	movlw	240
  8129  002788  1683               	andwf	3971,f,c	;volatile
  8130                           
  8131                           ;lcd.c: 93: TRISD &= 0xF0;
  8132  00278A  0EF0               	movlw	240
  8133  00278C  1695               	andwf	3989,f,c	;volatile
  8134                           
  8135                           ;lcd.c: 96: TRISDbits.TRISD6 = 0;
  8136  00278E  9C95               	bcf	3989,6,c	;volatile
  8137                           
  8138                           ;lcd.c: 97: TRISDbits.TRISD5 = 0;
  8139  002790  9A95               	bcf	3989,5,c	;volatile
  8140                           
  8141                           ;lcd.c: 98: TRISDbits.TRISD4 = 0;
  8142  002792  9895               	bcf	3989,4,c	;volatile
  8143                           
  8144                           ;lcd.c: 99: LATDbits.LATD6 = 0;
  8145  002794  9C8C               	bcf	3980,6,c	;volatile
  8146                           
  8147                           ;lcd.c: 100: LATDbits.LATD5 = 0;
  8148  002796  9A8C               	bcf	3980,5,c	;volatile
  8149                           
  8150                           ;lcd.c: 101: LATDbits.LATD4 = 0;
  8151  002798  988C               	bcf	3980,4,c	;volatile
  8152                           
  8153                           ;lcd.c: 104: DelayPORXLCD();
  8154  00279A  EC4E  F018         	call	_DelayPORXLCD	;wreg free
  8155                           
  8156                           ;lcd.c: 106: WriteCmdXLCD(0x30);
  8157  00279E  0E30               	movlw	48
  8158  0027A0  EC4A  F017         	call	_WriteCmdXLCD
  8159                           
  8160                           ;lcd.c: 108: _delay((unsigned long)((15)*((4000000)/4000.0)));
  8161  0027A4  0E14               	movlw	20
  8162  0027A6  6E14               	movwf	??_OpenXLCD& (0+255),c
  8163  0027A8  0E7A               	movlw	122
  8164  0027AA                     u5897:
  8165  0027AA  2EE8               	decfsz	wreg,f,c
  8166  0027AC  D7FE               	goto	u5897
  8167  0027AE  2E14               	decfsz	??_OpenXLCD& (0+255),f,c
  8168  0027B0  D7FC               	goto	u5897
  8169                           
  8170                           ;lcd.c: 110: WriteCmdXLCD(0x30);
  8171  0027B2  0E30               	movlw	48
  8172  0027B4  EC4A  F017         	call	_WriteCmdXLCD
  8173                           
  8174                           ;lcd.c: 112: _delay((unsigned long)((15)*((4000000)/4000.0)));
  8175  0027B8  0E14               	movlw	20
  8176  0027BA  6E14               	movwf	??_OpenXLCD& (0+255),c
  8177  0027BC  0E7A               	movlw	122
  8178  0027BE                     u5907:
  8179  0027BE  2EE8               	decfsz	wreg,f,c
  8180  0027C0  D7FE               	goto	u5907
  8181  0027C2  2E14               	decfsz	??_OpenXLCD& (0+255),f,c
  8182  0027C4  D7FC               	goto	u5907
  8183                           
  8184                           ;lcd.c: 114: WriteCmdXLCD(0x32);
  8185  0027C6  0E32               	movlw	50
  8186  0027C8  EC4A  F017         	call	_WriteCmdXLCD
  8187  0027CC                     l3190:
  8188  0027CC  EC69  F017         	call	_BusyXLCD	;wreg free
  8189  0027D0  0900               	iorlw	0
  8190  0027D2  A4D8               	btfss	status,2,c
  8191  0027D4  D7FB               	goto	l3190
  8192  0027D6                     l3192:
  8193  0027D6  EC69  F017         	call	_BusyXLCD	;wreg free
  8194  0027DA  0900               	iorlw	0
  8195  0027DC  A4D8               	btfss	status,2,c
  8196  0027DE  D7FB               	goto	l3192
  8197                           
  8198                           ;lcd.c: 121: WriteCmdXLCD(lcdtype);
  8199  0027E0  5015               	movf	OpenXLCD@lcdtype,w,c
  8200  0027E2  EC4A  F017         	call	_WriteCmdXLCD
  8201  0027E6                     l3196:
  8202  0027E6  EC69  F017         	call	_BusyXLCD	;wreg free
  8203  0027EA  0900               	iorlw	0
  8204  0027EC  A4D8               	btfss	status,2,c
  8205  0027EE  D7FB               	goto	l3196
  8206                           
  8207                           ;lcd.c: 125: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  8208  0027F0  0E08               	movlw	8
  8209  0027F2  EC4A  F017         	call	_WriteCmdXLCD
  8210  0027F6                     l3200:
  8211  0027F6  EC69  F017         	call	_BusyXLCD	;wreg free
  8212  0027FA  0900               	iorlw	0
  8213  0027FC  A4D8               	btfss	status,2,c
  8214  0027FE  D7FB               	goto	l3200
  8215                           
  8216                           ;lcd.c: 127: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  8217  002800  0E0F               	movlw	15
  8218  002802  EC4A  F017         	call	_WriteCmdXLCD
  8219  002806                     l3204:
  8220  002806  EC69  F017         	call	_BusyXLCD	;wreg free
  8221  00280A  0900               	iorlw	0
  8222  00280C  A4D8               	btfss	status,2,c
  8223  00280E  D7FB               	goto	l3204
  8224                           
  8225                           ;lcd.c: 131: WriteCmdXLCD(0x01);
  8226  002810  0E01               	movlw	1
  8227  002812  EC4A  F017         	call	_WriteCmdXLCD
  8228  002816                     l3208:
  8229  002816  EC69  F017         	call	_BusyXLCD	;wreg free
  8230  00281A  0900               	iorlw	0
  8231  00281C  A4D8               	btfss	status,2,c
  8232  00281E  D7FB               	goto	l3208
  8233                           
  8234                           ;lcd.c: 135: WriteCmdXLCD(0b00000100);
  8235  002820  0E04               	movlw	4
  8236  002822  EC4A  F017         	call	_WriteCmdXLCD
  8237  002826                     l3212:
  8238  002826  EC69  F017         	call	_BusyXLCD	;wreg free
  8239  00282A  0900               	iorlw	0
  8240  00282C  A4D8               	btfss	status,2,c
  8241  00282E  D7FB               	goto	l3212
  8242                           
  8243                           ;lcd.c: 139: SetDDRamAddr(0x80);
  8244  002830  0E80               	movlw	128
  8245  002832  ECBD  F016         	call	_SetDDRamAddr
  8246  002836  0012               	return	
  8247  002838                     __end_of_OpenXLCD:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           intcon	equ	0xFF2
  8256                           intcon2	equ	0xFF1
  8257                           intcon3	equ	0xFF0
  8258                           indf0	equ	0xFEF
  8259                           postinc0	equ	0xFEE
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           postdec1	equ	0xFE5
  8264                           fsr1l	equ	0xFE1
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           fsr2h	equ	0xFDA
  8269                           fsr2l	equ	0xFD9
  8270                           status	equ	0xFD8
  8271                           
  8272 ;; *************** function _WriteCmdXLCD *****************
  8273 ;; Defined at:
  8274 ;;		line 455 in file "lcd.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;  cmd             1    wreg     unsigned char 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  cmd             1   15[COMRAM] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      void 
  8281 ;; Registers used:
  8282 ;;		wreg, status,2, status,0, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8288 ;;      Params:         0       0       0       0       0       0       0       0       0
  8289 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8291 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8292 ;;Total ram usage:        1 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    3
  8295 ;; This function calls:
  8296 ;;		_DelayFor18TCY
  8297 ;; This function is called by:
  8298 ;;		_OpenXLCD
  8299 ;;		_InicializaLCD
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text33
  8304  002E94                     __ptext33:
  8305                           	opt stack 0
  8306  002E94                     _WriteCmdXLCD:
  8307                           	opt stack 26
  8308                           
  8309                           ;incstack = 0
  8310                           ;WriteCmdXLCD@cmd stored from wreg
  8311  002E94  6E10               	movwf	WriteCmdXLCD@cmd,c
  8312                           
  8313                           ;lcd.c: 474: TRISD &= 0xf0;
  8314  002E96  0EF0               	movlw	240
  8315  002E98  1695               	andwf	3989,f,c	;volatile
  8316                           
  8317                           ;lcd.c: 475: PORTD &= 0xf0;
  8318  002E9A  0EF0               	movlw	240
  8319  002E9C  1683               	andwf	3971,f,c	;volatile
  8320                           
  8321                           ;lcd.c: 476: PORTD |= (cmd>>4)&0x0f;
  8322  002E9E  3810               	swapf	WriteCmdXLCD@cmd,w,c
  8323  002EA0  0B0F               	andlw	15
  8324  002EA2  0B0F               	andlw	15
  8325  002EA4  1283               	iorwf	3971,f,c	;volatile
  8326                           
  8327                           ;lcd.c: 478: LATDbits.LATD6 = 0;
  8328  002EA6  9C8C               	bcf	3980,6,c	;volatile
  8329                           
  8330                           ;lcd.c: 479: LATDbits.LATD5 = 0;
  8331  002EA8  9A8C               	bcf	3980,5,c	;volatile
  8332                           
  8333                           ;lcd.c: 480: DelayFor18TCY();
  8334  002EAA  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8335                           
  8336                           ;lcd.c: 481: LATDbits.LATD4 = 1;
  8337  002EAE  888C               	bsf	3980,4,c	;volatile
  8338                           
  8339                           ;lcd.c: 482: DelayFor18TCY();
  8340  002EB0  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8341                           
  8342                           ;lcd.c: 483: LATDbits.LATD4 = 0;
  8343  002EB4  988C               	bcf	3980,4,c	;volatile
  8344                           
  8345                           ;lcd.c: 488: PORTD &= 0xf0;
  8346  002EB6  0EF0               	movlw	240
  8347  002EB8  1683               	andwf	3971,f,c	;volatile
  8348                           
  8349                           ;lcd.c: 489: PORTD |= cmd&0x0f;
  8350  002EBA  5010               	movf	WriteCmdXLCD@cmd,w,c
  8351  002EBC  0B0F               	andlw	15
  8352  002EBE  1283               	iorwf	3971,f,c	;volatile
  8353                           
  8354                           ;lcd.c: 491: DelayFor18TCY();
  8355  002EC0  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8356                           
  8357                           ;lcd.c: 492: LATDbits.LATD4 = 1;
  8358  002EC4  888C               	bsf	3980,4,c	;volatile
  8359                           
  8360                           ;lcd.c: 493: DelayFor18TCY();
  8361  002EC6  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8362                           
  8363                           ;lcd.c: 494: LATDbits.LATD4 = 0;
  8364  002ECA  988C               	bcf	3980,4,c	;volatile
  8365                           
  8366                           ;lcd.c: 498: TRISD |= 0x0f;
  8367  002ECC  0E0F               	movlw	15
  8368  002ECE  1295               	iorwf	3989,f,c	;volatile
  8369  002ED0  0012               	return	
  8370  002ED2                     __end_of_WriteCmdXLCD:
  8371                           	opt stack 0
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           intcon2	equ	0xFF1
  8380                           intcon3	equ	0xFF0
  8381                           indf0	equ	0xFEF
  8382                           postinc0	equ	0xFEE
  8383                           fsr0h	equ	0xFEA
  8384                           fsr0l	equ	0xFE9
  8385                           wreg	equ	0xFE8
  8386                           postdec1	equ	0xFE5
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _SetDDRamAddr *****************
  8396 ;; Defined at:
  8397 ;;		line 392 in file "lcd.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  DDaddr          1    wreg     unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  DDaddr          1   18[COMRAM] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0
  8412 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8413 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8414 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        4 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    3
  8418 ;; This function calls:
  8419 ;;		_DelayFor18TCY
  8420 ;; This function is called by:
  8421 ;;		_OpenXLCD
  8422 ;;		_parada_forcada
  8423 ;;		_main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text34
  8428  002D7A                     __ptext34:
  8429                           	opt stack 0
  8430  002D7A                     _SetDDRamAddr:
  8431                           	opt stack 26
  8432                           
  8433                           ;incstack = 0
  8434                           ;SetDDRamAddr@DDaddr stored from wreg
  8435  002D7A  6E13               	movwf	SetDDRamAddr@DDaddr,c
  8436                           
  8437                           ;lcd.c: 411: TRISD &= 0xf0;
  8438  002D7C  0EF0               	movlw	240
  8439  002D7E  1695               	andwf	3989,f,c	;volatile
  8440                           
  8441                           ;lcd.c: 412: PORTD &= 0xf0;
  8442  002D80  0EF0               	movlw	240
  8443  002D82  1683               	andwf	3971,f,c	;volatile
  8444                           
  8445                           ;lcd.c: 413: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  8446  002D84  5013               	movf	SetDDRamAddr@DDaddr,w,c
  8447  002D86  6E10               	movwf	??_SetDDRamAddr& (0+255),c
  8448  002D88  6A11               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  8449  002D8A  8E10               	bsf	??_SetDDRamAddr,7,c
  8450  002D8C  0E04               	movlw	4
  8451  002D8E  6E12               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  8452  002D90                     u2405:
  8453  002D90  3411               	rlcf	??_SetDDRamAddr+1,w,c
  8454  002D92  3211               	rrcf	??_SetDDRamAddr+1,f,c
  8455  002D94  3210               	rrcf	??_SetDDRamAddr,f,c
  8456  002D96  2E12               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  8457  002D98  D7FB               	goto	u2405
  8458  002D9A  5010               	movf	??_SetDDRamAddr,w,c
  8459  002D9C  0B0F               	andlw	15
  8460  002D9E  1283               	iorwf	3971,f,c	;volatile
  8461                           
  8462                           ;lcd.c: 415: LATDbits.LATD6 = 0;
  8463  002DA0  9C8C               	bcf	3980,6,c	;volatile
  8464                           
  8465                           ;lcd.c: 416: LATDbits.LATD5 = 0;
  8466  002DA2  9A8C               	bcf	3980,5,c	;volatile
  8467                           
  8468                           ;lcd.c: 417: DelayFor18TCY();
  8469  002DA4  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8470                           
  8471                           ;lcd.c: 418: LATDbits.LATD4 = 1;
  8472  002DA8  888C               	bsf	3980,4,c	;volatile
  8473                           
  8474                           ;lcd.c: 419: DelayFor18TCY();
  8475  002DAA  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8476                           
  8477                           ;lcd.c: 420: LATDbits.LATD4 = 0;
  8478  002DAE  988C               	bcf	3980,4,c	;volatile
  8479                           
  8480                           ;lcd.c: 425: PORTD &= 0xf0;
  8481  002DB0  0EF0               	movlw	240
  8482  002DB2  1683               	andwf	3971,f,c	;volatile
  8483                           
  8484                           ;lcd.c: 426: PORTD |= (DDaddr&0x0f);
  8485  002DB4  5013               	movf	SetDDRamAddr@DDaddr,w,c
  8486  002DB6  0B0F               	andlw	15
  8487  002DB8  1283               	iorwf	3971,f,c	;volatile
  8488                           
  8489                           ;lcd.c: 428: DelayFor18TCY();
  8490  002DBA  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8491                           
  8492                           ;lcd.c: 429: LATDbits.LATD4 = 1;
  8493  002DBE  888C               	bsf	3980,4,c	;volatile
  8494                           
  8495                           ;lcd.c: 430: DelayFor18TCY();
  8496  002DC0  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8497                           
  8498                           ;lcd.c: 431: LATDbits.LATD4 = 0;
  8499  002DC4  988C               	bcf	3980,4,c	;volatile
  8500                           
  8501                           ;lcd.c: 435: TRISD |= 0x0f;
  8502  002DC6  0E0F               	movlw	15
  8503  002DC8  1295               	iorwf	3989,f,c	;volatile
  8504  002DCA  0012               	return	
  8505  002DCC                     __end_of_SetDDRamAddr:
  8506                           	opt stack 0
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           intcon3	equ	0xFF0
  8516                           indf0	equ	0xFEF
  8517                           postinc0	equ	0xFEE
  8518                           fsr0h	equ	0xFEA
  8519                           fsr0l	equ	0xFE9
  8520                           wreg	equ	0xFE8
  8521                           postdec1	equ	0xFE5
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _DelayPORXLCD *****************
  8531 ;; Defined at:
  8532 ;;		line 125 in file "main.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;		None
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  1    wreg      void 
  8539 ;; Registers used:
  8540 ;;		wreg, cstack
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8546 ;;      Params:         0       0       0       0       0       0       0       0       0
  8547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8549 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8550 ;;Total ram usage:        0 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    3
  8553 ;; This function calls:
  8554 ;;		_Delay1KTCYx
  8555 ;; This function is called by:
  8556 ;;		_OpenXLCD
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text35
  8561  00309C                     __ptext35:
  8562                           	opt stack 0
  8563  00309C                     _DelayPORXLCD:
  8564                           	opt stack 25
  8565                           
  8566                           ;main.c: 127: Delay1KTCYx(30);
  8567                           
  8568                           ;incstack = 0
  8569  00309C  0E1E               	movlw	30
  8570  00309E  EC35  F018         	call	_Delay1KTCYx
  8571  0030A2  0012               	return	
  8572  0030A4                     __end_of_DelayPORXLCD:
  8573                           	opt stack 0
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           intcon2	equ	0xFF1
  8582                           intcon3	equ	0xFF0
  8583                           indf0	equ	0xFEF
  8584                           postinc0	equ	0xFEE
  8585                           fsr0h	equ	0xFEA
  8586                           fsr0l	equ	0xFE9
  8587                           wreg	equ	0xFE8
  8588                           postdec1	equ	0xFE5
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           fsr2h	equ	0xFDA
  8594                           fsr2l	equ	0xFD9
  8595                           status	equ	0xFD8
  8596                           
  8597 ;; *************** function _Delay1KTCYx *****************
  8598 ;; Defined at:
  8599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\d1ktcyx.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  unit            1    wreg     unsigned char 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  unit            1   15[COMRAM] unsigned char 
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  1    wreg      void 
  8606 ;; Registers used:
  8607 ;;		wreg
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8613 ;;      Params:         0       0       0       0       0       0       0       0       0
  8614 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8616 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8617 ;;Total ram usage:        1 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; Hardware stack levels required when called:    2
  8620 ;; This function calls:
  8621 ;;		Nothing
  8622 ;; This function is called by:
  8623 ;;		_DelayPORXLCD
  8624 ;;		_DelayXLCD
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           	psect	text36
  8629  00306A                     __ptext36:
  8630                           	opt stack 0
  8631  00306A                     _Delay1KTCYx:
  8632                           	opt stack 25
  8633                           
  8634                           ;incstack = 0
  8635                           ;Delay1KTCYx@unit stored from wreg
  8636  00306A  6E10               	movwf	Delay1KTCYx@unit,c
  8637  00306C  0EFA               	movlw	250
  8638  00306E                     u5917:
  8639  00306E  F000               	nop	
  8640  003070  2EE8               	decfsz	wreg,f,c
  8641  003072  D7FD               	goto	u5917
  8642  003074  2E10               	decfsz	Delay1KTCYx@unit,f,c
  8643  003076  D7FA               	goto	l2812
  8644  003078  0012               	return	
  8645  00307A                     __end_of_Delay1KTCYx:
  8646                           	opt stack 0
  8647                           tblptru	equ	0xFF8
  8648                           tblptrh	equ	0xFF7
  8649                           tblptrl	equ	0xFF6
  8650                           tablat	equ	0xFF5
  8651                           prodh	equ	0xFF4
  8652                           prodl	equ	0xFF3
  8653                           intcon	equ	0xFF2
  8654                           intcon2	equ	0xFF1
  8655                           intcon3	equ	0xFF0
  8656                           indf0	equ	0xFEF
  8657                           postinc0	equ	0xFEE
  8658                           fsr0h	equ	0xFEA
  8659                           fsr0l	equ	0xFE9
  8660                           wreg	equ	0xFE8
  8661                           postdec1	equ	0xFE5
  8662                           fsr1l	equ	0xFE1
  8663                           indf2	equ	0xFDF
  8664                           postinc2	equ	0xFDE
  8665                           postdec2	equ	0xFDD
  8666                           fsr2h	equ	0xFDA
  8667                           fsr2l	equ	0xFD9
  8668                           status	equ	0xFD8
  8669                           
  8670 ;; *************** function _BusyXLCD *****************
  8671 ;; Defined at:
  8672 ;;		line 12 in file "lcd.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;		None
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      unsigned char 
  8679 ;; Registers used:
  8680 ;;		wreg, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0
  8687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8689 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8690 ;;Total ram usage:        0 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    3
  8693 ;; This function calls:
  8694 ;;		_DelayFor18TCY
  8695 ;; This function is called by:
  8696 ;;		_OpenXLCD
  8697 ;;		_putsXLCD
  8698 ;;		_InicializaLCD
  8699 ;;		_putrsXLCD
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text37
  8704  002ED2                     __ptext37:
  8705                           	opt stack 0
  8706  002ED2                     _BusyXLCD:
  8707                           	opt stack 26
  8708                           
  8709                           ;lcd.c: 14: LATDbits.LATD6 = 1;
  8710                           
  8711                           ;incstack = 0
  8712  002ED2  8C8C               	bsf	3980,6,c	;volatile
  8713                           
  8714                           ;lcd.c: 15: LATDbits.LATD5 = 0;
  8715  002ED4  9A8C               	bcf	3980,5,c	;volatile
  8716                           
  8717                           ;lcd.c: 16: DelayFor18TCY();
  8718  002ED6  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8719                           
  8720                           ;lcd.c: 17: LATDbits.LATD4 = 1;
  8721  002EDA  888C               	bsf	3980,4,c	;volatile
  8722                           
  8723                           ;lcd.c: 18: DelayFor18TCY();
  8724  002EDC  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8725                           
  8726                           ;lcd.c: 36: if(PORTD&0x08)
  8727  002EE0  A683               	btfss	3971,3,c	;volatile
  8728  002EE2  D00A               	goto	l23
  8729                           
  8730                           ;lcd.c: 38: {
  8731                           ;lcd.c: 39: LATDbits.LATD4 = 0;
  8732  002EE4  988C               	bcf	3980,4,c	;volatile
  8733                           
  8734                           ;lcd.c: 40: DelayFor18TCY();
  8735  002EE6  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8736                           
  8737                           ;lcd.c: 41: LATDbits.LATD4 = 1;
  8738  002EEA  888C               	bsf	3980,4,c	;volatile
  8739                           
  8740                           ;lcd.c: 42: DelayFor18TCY();
  8741  002EEC  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8742                           
  8743                           ;lcd.c: 43: LATDbits.LATD4 = 0;
  8744  002EF0  988C               	bcf	3980,4,c	;volatile
  8745                           
  8746                           ;lcd.c: 44: LATDbits.LATD6 = 0;
  8747  002EF2  9C8C               	bcf	3980,6,c	;volatile
  8748                           
  8749                           ;lcd.c: 45: return 1;
  8750  002EF4  0E01               	movlw	1
  8751                           
  8752                           ;lcd.c: 46: }
  8753  002EF6  0012               	return	
  8754  002EF8                     l23:
  8755                           
  8756                           ;lcd.c: 47: else
  8757                           ;lcd.c: 48: {
  8758                           ;lcd.c: 49: LATDbits.LATD4 = 0;
  8759  002EF8  988C               	bcf	3980,4,c	;volatile
  8760                           
  8761                           ;lcd.c: 50: DelayFor18TCY();
  8762  002EFA  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8763                           
  8764                           ;lcd.c: 51: LATDbits.LATD4 = 1;
  8765  002EFE  888C               	bsf	3980,4,c	;volatile
  8766                           
  8767                           ;lcd.c: 52: DelayFor18TCY();
  8768  002F00  EC1D  F018         	call	_DelayFor18TCY	;wreg free
  8769                           
  8770                           ;lcd.c: 53: LATDbits.LATD4 = 0;
  8771  002F04  988C               	bcf	3980,4,c	;volatile
  8772                           
  8773                           ;lcd.c: 54: LATDbits.LATD6 = 0;
  8774  002F06  9C8C               	bcf	3980,6,c	;volatile
  8775                           
  8776                           ;lcd.c: 55: return 0;
  8777  002F08  0E00               	movlw	0
  8778  002F0A  0012               	return	
  8779  002F0C                     __end_of_BusyXLCD:
  8780                           	opt stack 0
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           intcon2	equ	0xFF1
  8789                           intcon3	equ	0xFF0
  8790                           indf0	equ	0xFEF
  8791                           postinc0	equ	0xFEE
  8792                           fsr0h	equ	0xFEA
  8793                           fsr0l	equ	0xFE9
  8794                           wreg	equ	0xFE8
  8795                           postdec1	equ	0xFE5
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function _DelayFor18TCY *****************
  8805 ;; Defined at:
  8806 ;;		line 110 in file "main.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		None
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8824 ;;Total ram usage:        0 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    2
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_BusyXLCD
  8831 ;;		_SetDDRamAddr
  8832 ;;		_WriteCmdXLCD
  8833 ;;		_WriteDataXLCD
  8834 ;;		_ReadAddrXLCD
  8835 ;;		_ReadDataXLCD
  8836 ;;		_SetCGRamAddr
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text38
  8841  00303A                     __ptext38:
  8842                           	opt stack 0
  8843  00303A                     _DelayFor18TCY:
  8844                           	opt stack 26
  8845                           
  8846                           ;main.c: 112: __nop();
  8847                           
  8848                           ;incstack = 0
  8849  00303A  F000               	nop	
  8850                           
  8851                           ;main.c: 113: __nop();
  8852  00303C  F000               	nop	
  8853                           
  8854                           ;main.c: 114: __nop();
  8855  00303E  F000               	nop	
  8856                           
  8857                           ;main.c: 115: __nop();
  8858  003040  F000               	nop	
  8859                           
  8860                           ;main.c: 116: __nop();
  8861  003042  F000               	nop	
  8862                           
  8863                           ;main.c: 117: __nop();
  8864  003044  F000               	nop	
  8865                           
  8866                           ;main.c: 118: __nop();
  8867  003046  F000               	nop	
  8868                           
  8869                           ;main.c: 119: __nop();
  8870  003048  F000               	nop	
  8871                           
  8872                           ;main.c: 120: __nop();
  8873  00304A  F000               	nop	
  8874                           
  8875                           ;main.c: 121: __nop();
  8876  00304C  F000               	nop	
  8877                           
  8878                           ;main.c: 122: __nop();
  8879  00304E  F000               	nop	
  8880                           
  8881                           ;main.c: 123: __nop();
  8882  003050  F000               	nop	
  8883  003052  0012               	return		;funcret
  8884  003054                     __end_of_DelayFor18TCY:
  8885                           	opt stack 0
  8886                           tblptru	equ	0xFF8
  8887                           tblptrh	equ	0xFF7
  8888                           tblptrl	equ	0xFF6
  8889                           tablat	equ	0xFF5
  8890                           prodh	equ	0xFF4
  8891                           prodl	equ	0xFF3
  8892                           intcon	equ	0xFF2
  8893                           intcon2	equ	0xFF1
  8894                           intcon3	equ	0xFF0
  8895                           indf0	equ	0xFEF
  8896                           postinc0	equ	0xFEE
  8897                           fsr0h	equ	0xFEA
  8898                           fsr0l	equ	0xFE9
  8899                           wreg	equ	0xFE8
  8900                           postdec1	equ	0xFE5
  8901                           fsr1l	equ	0xFE1
  8902                           indf2	equ	0xFDF
  8903                           postinc2	equ	0xFDE
  8904                           postdec2	equ	0xFDD
  8905                           fsr2h	equ	0xFDA
  8906                           fsr2l	equ	0xFD9
  8907                           status	equ	0xFD8
  8908                           
  8909 ;; *************** function _ConvertADC *****************
  8910 ;; Defined at:
  8911 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\ADC\adcconv.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;		None
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  1    wreg      void 
  8918 ;; Registers used:
  8919 ;;		None
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8925 ;;      Params:         0       0       0       0       0       0       0       0       0
  8926 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8928 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8929 ;;Total ram usage:        0 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    2
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_main
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text39
  8940  0030A4                     __ptext39:
  8941                           	opt stack 0
  8942  0030A4                     _ConvertADC:
  8943                           	opt stack 28
  8944                           
  8945                           ;incstack = 0
  8946  0030A4  82C2               	bsf	4034,1,c	;volatile
  8947  0030A6  0012               	return		;funcret
  8948  0030A8                     __end_of_ConvertADC:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           intcon2	equ	0xFF1
  8958                           intcon3	equ	0xFF0
  8959                           indf0	equ	0xFEF
  8960                           postinc0	equ	0xFEE
  8961                           fsr0h	equ	0xFEA
  8962                           fsr0l	equ	0xFE9
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function _BusyADC *****************
  8974 ;; Defined at:
  8975 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\ADC\adcbusy.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      unsigned char 
  8982 ;; Registers used:
  8983 ;;		wreg
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8992 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    2
  8996 ;; This function calls:
  8997 ;;		Nothing
  8998 ;; This function is called by:
  8999 ;;		_main
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text40
  9004  003088                     __ptext40:
  9005                           	opt stack 0
  9006  003088                     _BusyADC:
  9007                           	opt stack 28
  9008                           
  9009                           ;incstack = 0
  9010  003088  A2C2               	btfss	4034,1,c	;volatile
  9011  00308A  D002               	goto	u4010
  9012  00308C  0E01               	movlw	1
  9013  00308E  0012               	return	
  9014  003090                     u4010:
  9015  003090  0E00               	movlw	0
  9016  003092  0012               	return	
  9017  003094                     __end_of_BusyADC:
  9018                           	opt stack 0
  9019                           tblptru	equ	0xFF8
  9020                           tblptrh	equ	0xFF7
  9021                           tblptrl	equ	0xFF6
  9022                           tablat	equ	0xFF5
  9023                           prodh	equ	0xFF4
  9024                           prodl	equ	0xFF3
  9025                           intcon	equ	0xFF2
  9026                           intcon2	equ	0xFF1
  9027                           intcon3	equ	0xFF0
  9028                           indf0	equ	0xFEF
  9029                           postinc0	equ	0xFEE
  9030                           fsr0h	equ	0xFEA
  9031                           fsr0l	equ	0xFE9
  9032                           wreg	equ	0xFE8
  9033                           postdec1	equ	0xFE5
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _altaPrioridade *****************
  9043 ;; Defined at:
  9044 ;;		line 280 in file "main.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      void 
  9051 ;; Registers used:
  9052 ;;		wreg, status,2, status,0, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9060 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9061 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9062 ;;Total ram usage:       14 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    1
  9065 ;; This function calls:
  9066 ;;		_func_timer0_acel
  9067 ;;		_func_timer0_desacel
  9068 ;;		_func_timer2
  9069 ;;		_func_timer3
  9070 ;; This function is called by:
  9071 ;;		Interrupt level 2
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           	psect	intcode
  9076  000008                     __pintcode:
  9077                           	opt stack 0
  9078  000008                     _altaPrioridade:
  9079                           	opt stack 25
  9080                           
  9081                           ;incstack = 0
  9082  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9083  00000A  CFFA F002          	movff	pclath,??_altaPrioridade
  9084  00000E  CFFB F003          	movff	pclatu,??_altaPrioridade+1
  9085  000012  ED92  F012         	call	int_func,f	;refresh shadow registers
  9086                           pclatu	equ	0xFFB
  9087                           pclath	equ	0xFFA
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon2	equ	0xFF1
  9096                           intcon3	equ	0xFF0
  9097                           indf0	equ	0xFEF
  9098                           postinc0	equ	0xFEE
  9099                           fsr0h	equ	0xFEA
  9100                           fsr0l	equ	0xFE9
  9101                           wreg	equ	0xFE8
  9102                           postdec1	equ	0xFE5
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111                           	psect	intcode_body
  9112  002524                     __pintcode_body:
  9113                           	opt stack 25
  9114  002524                     int_func:
  9115                           	opt stack 25
  9116  002524  0006               	pop		; remove dummy address from shadow register refresh
  9117  002526  CFE9 F004          	movff	fsr0l,??_altaPrioridade+2
  9118  00252A  CFEA F005          	movff	fsr0h,??_altaPrioridade+3
  9119  00252E  CFE1 F006          	movff	fsr1l,??_altaPrioridade+4
  9120  002532  CFE2 F007          	movff	fsr1h,??_altaPrioridade+5
  9121  002536  CFD9 F008          	movff	fsr2l,??_altaPrioridade+6
  9122  00253A  CFDA F009          	movff	fsr2h,??_altaPrioridade+7
  9123  00253E  CFF3 F00A          	movff	prodl,??_altaPrioridade+8
  9124  002542  CFF4 F00B          	movff	prodh,??_altaPrioridade+9
  9125  002546  CFF6 F00C          	movff	tblptrl,??_altaPrioridade+10
  9126  00254A  CFF7 F00D          	movff	tblptrh,??_altaPrioridade+11
  9127  00254E  CFF8 F00E          	movff	tblptru,??_altaPrioridade+12
  9128  002552  CFF5 F00F          	movff	tablat,??_altaPrioridade+13
  9129                           
  9130                           ;main.c: 282: if(INT0IF==1 && INT0IE==1) {
  9131  002556  B2F2               	btfsc	intcon,1,c	;volatile
  9132  002558  A8F2               	btfss	intcon,4,c	;volatile
  9133  00255A  D005               	goto	i2l294
  9134                           
  9135                           ;main.c: 283: passagemZero++;
  9136  00255C  0100               	movlb	0	; () banked
  9137  00255E  2BC7               	incf	_passagemZero& (0+255),f,b
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;main.c: 284: INT0IF = 0;
  9141  002560  92F2               	bcf	intcon,1,c	;volatile
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 285: TMR0IE=1;
  9145  002562  8AF2               	bsf	intcon,5,c	;volatile
  9146                           
  9147                           ;main.c: 286: }
  9148  002564  D00B               	goto	i2l295
  9149  002566                     i2l294:
  9150                           
  9151                           ;main.c: 287: else if(INT1IF==1 && INT1IE==1) {
  9152  002566  B0F0               	btfsc	intcon3,0,c	;volatile
  9153  002568  A6F0               	btfss	intcon3,3,c	;volatile
  9154  00256A  D003               	goto	i2l296
  9155                           
  9156                           ;main.c: 288: INT1IF = 0;
  9157  00256C  90F0               	bcf	intcon3,0,c	;volatile
  9158                           
  9159                           ;main.c: 289: TMR2IE = 1;
  9160  00256E  829D               	bsf	3997,1,c	;volatile
  9161                           
  9162                           ;main.c: 290: }
  9163  002570  D005               	goto	i2l295
  9164  002572                     i2l296:
  9165                           
  9166                           ;main.c: 291: else if(INT2IF==1 && INT2IE==1) {
  9167  002572  B2F0               	btfsc	intcon3,1,c	;volatile
  9168  002574  A8F0               	btfss	intcon3,4,c	;volatile
  9169  002576  D002               	goto	i2l295
  9170                           
  9171                           ;main.c: 292: INT2IF = 0;
  9172  002578  92F0               	bcf	intcon3,1,c	;volatile
  9173                           
  9174                           ;main.c: 293: TMR3IE = 1;
  9175  00257A  82A0               	bsf	4000,1,c	;volatile
  9176  00257C                     i2l295:
  9177                           
  9178                           ;main.c: 294: }
  9179                           ;main.c: 296: if(TMR0IF==1 && TMR0IE==1){
  9180  00257C  B4F2               	btfsc	intcon,2,c	;volatile
  9181  00257E  AAF2               	btfss	intcon,5,c	;volatile
  9182  002580  D018               	goto	i2l4178
  9183                           
  9184                           ;main.c: 297: TMR0=contTimer0;
  9185  002582  C04E  FFD6         	movff	_contTimer0,4054	;volatile
  9186  002586  C04F  FFD7         	movff	_contTimer0+1,4055	;volatile
  9187                           
  9188                           ;main.c: 298: if (IniciaAceleracao==1 && IniciaDesaceleracao==0)
  9189  00258A  0100               	movlb	0	; () banked
  9190  00258C  05C4               	decf	_IniciaAceleracao& (0+255),w,b
  9191  00258E  A4D8               	btfss	status,2,c
  9192  002590  D007               	goto	i2l4172
  9193                           
  9194                           ; BSR set to: 0
  9195  002592  0100               	movlb	0	; () banked
  9196  002594  51C5               	movf	_IniciaDesaceleracao& (0+255),w,b
  9197  002596  A4D8               	btfss	status,2,c
  9198  002598  D003               	goto	i2l4172
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;main.c: 299: func_timer0_acel();
  9202  00259A  EC64  F013         	call	_func_timer0_acel	;wreg free
  9203  00259E  D009               	goto	i2l4178
  9204  0025A0                     i2l4172:
  9205                           
  9206                           ;main.c: 300: else if (IniciaAceleracao==0 && IniciaDesaceleracao==1)
  9207  0025A0  0100               	movlb	0	; () banked
  9208  0025A2  51C4               	movf	_IniciaAceleracao& (0+255),w,b
  9209  0025A4  A4D8               	btfss	status,2,c
  9210  0025A6  D005               	goto	i2l4178
  9211                           
  9212                           ; BSR set to: 0
  9213  0025A8  0100               	movlb	0	; () banked
  9214  0025AA  05C5               	decf	_IniciaDesaceleracao& (0+255),w,b
  9215  0025AC  B4D8               	btfsc	status,2,c
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;main.c: 301: func_timer0_desacel();
  9219  0025AE  EC05  F013         	call	_func_timer0_desacel	;wreg free
  9220  0025B2                     i2l4178:
  9221                           
  9222                           ;main.c: 302: }
  9223                           ;main.c: 303: if(TMR2IF==1 && TMR2IE==1){
  9224  0025B2  B29E               	btfsc	3998,1,c	;volatile
  9225  0025B4  A29D               	btfss	3997,1,c	;volatile
  9226  0025B6  D002               	goto	i2l4184
  9227                           
  9228                           ;main.c: 304: func_timer2();
  9229  0025B8  EC90  F016         	call	_func_timer2	;wreg free
  9230  0025BC                     i2l4184:
  9231                           
  9232                           ;main.c: 305: }
  9233                           ;main.c: 306: if(TMR3IF==1 && TMR3IE==1){
  9234  0025BC  B2A1               	btfsc	4001,1,c	;volatile
  9235  0025BE  A2A0               	btfss	4000,1,c	;volatile
  9236  0025C0  D006               	goto	i2l305
  9237                           
  9238                           ;main.c: 307: TMR3=contTimer3;
  9239  0025C2  C0CE  FFB2         	movff	_contTimer3,4018	;volatile
  9240  0025C6  C0CF  FFB3         	movff	_contTimer3+1,4019	;volatile
  9241                           
  9242                           ;main.c: 308: func_timer3();
  9243  0025CA  EC63  F016         	call	_func_timer3	;wreg free
  9244  0025CE                     i2l305:
  9245  0025CE  C00F  FFF5         	movff	??_altaPrioridade+13,tablat
  9246  0025D2  C00E  FFF8         	movff	??_altaPrioridade+12,tblptru
  9247  0025D6  C00D  FFF7         	movff	??_altaPrioridade+11,tblptrh
  9248  0025DA  C00C  FFF6         	movff	??_altaPrioridade+10,tblptrl
  9249  0025DE  C00B  FFF4         	movff	??_altaPrioridade+9,prodh
  9250  0025E2  C00A  FFF3         	movff	??_altaPrioridade+8,prodl
  9251  0025E6  C009  FFDA         	movff	??_altaPrioridade+7,fsr2h
  9252  0025EA  C008  FFD9         	movff	??_altaPrioridade+6,fsr2l
  9253  0025EE  C007  FFE2         	movff	??_altaPrioridade+5,fsr1h
  9254  0025F2  C006  FFE1         	movff	??_altaPrioridade+4,fsr1l
  9255  0025F6  C005  FFEA         	movff	??_altaPrioridade+3,fsr0h
  9256  0025FA  C004  FFE9         	movff	??_altaPrioridade+2,fsr0l
  9257  0025FE  C003  FFFB         	movff	??_altaPrioridade+1,pclatu
  9258  002602  C002  FFFA         	movff	??_altaPrioridade,pclath
  9259  002606  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9260  002608  0011               	retfie		f
  9261  00260A                     __end_of_altaPrioridade:
  9262                           	opt stack 0
  9263                           pclatu	equ	0xFFB
  9264                           pclath	equ	0xFFA
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           intcon2	equ	0xFF1
  9273                           intcon3	equ	0xFF0
  9274                           indf0	equ	0xFEF
  9275                           postinc0	equ	0xFEE
  9276                           fsr0h	equ	0xFEA
  9277                           fsr0l	equ	0xFE9
  9278                           wreg	equ	0xFE8
  9279                           postdec1	equ	0xFE5
  9280                           fsr1h	equ	0xFE2
  9281                           fsr1l	equ	0xFE1
  9282                           indf2	equ	0xFDF
  9283                           postinc2	equ	0xFDE
  9284                           postdec2	equ	0xFDD
  9285                           fsr2h	equ	0xFDA
  9286                           fsr2l	equ	0xFD9
  9287                           status	equ	0xFD8
  9288                           
  9289 ;; *************** function _func_timer3 *****************
  9290 ;; Defined at:
  9291 ;;		line 260 in file "main.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;		None
  9296 ;; Return value:  Size  Location     Type
  9297 ;;                  1    wreg      void 
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9305 ;;      Params:         0       0       0       0       0       0       0       0       0
  9306 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9307 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9308 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9309 ;;Total ram usage:        1 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		_altaPrioridade
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           	psect	text42
  9319  002CC6                     __ptext42:
  9320                           	opt stack 0
  9321  002CC6                     _func_timer3:
  9322                           	opt stack 25
  9323                           
  9324                           ;main.c: 261: static cont3=0;
  9325                           ;main.c: 262: static char auxTriac3Acionado=0;
  9326                           ;main.c: 263: cont3++;
  9327                           
  9328                           ;incstack = 0
  9329  002CC6  4A47               	infsnz	func_timer3@cont3,f,c
  9330  002CC8  2A48               	incf	func_timer3@cont3+1,f,c
  9331                           
  9332                           ;main.c: 264: TMR3IF=0;
  9333  002CCA  92A1               	bcf	4001,1,c	;volatile
  9334                           
  9335                           ;main.c: 266: if (cont3>=TempoAtual && auxTriac3Acionado==0){
  9336  002CCC  0100               	movlb	0	; () banked
  9337  002CCE  51D0               	movf	_TempoAtual& (0+255),w,b
  9338  002CD0  5C47               	subwf	func_timer3@cont3,w,c
  9339  002CD2  5048               	movf	func_timer3@cont3+1,w,c
  9340  002CD4  0A80               	xorlw	128
  9341  002CD6  6E01               	movwf	??_func_timer3& (0+255),c
  9342  002CD8  0100               	movlb	0	; () banked
  9343  002CDA  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9344  002CDC  0A80               	xorlw	128
  9345  002CDE  5801               	subwfb	??_func_timer3& (0+255),w,c
  9346  002CE0  A0D8               	btfss	status,0,c
  9347  002CE2  D00B               	goto	i2l3690
  9348                           
  9349                           ; BSR set to: 0
  9350  002CE4  504D               	movf	func_timer3@auxTriac3Acionado,w,c
  9351  002CE6  A4D8               	btfss	status,2,c
  9352  002CE8  D008               	goto	i2l3690
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;main.c: 267: cont3=0;
  9356  002CEA  0E00               	movlw	0
  9357  002CEC  6E48               	movwf	func_timer3@cont3+1,c
  9358  002CEE  0E00               	movlw	0
  9359  002CF0  6E47               	movwf	func_timer3@cont3,c
  9360                           
  9361                           ;main.c: 268: auxTriac3Acionado=1;
  9362  002CF2  0E01               	movlw	1
  9363  002CF4  6E4D               	movwf	func_timer3@auxTriac3Acionado,c
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;main.c: 269: PORTEbits.RE2 = 1;
  9367  002CF6  8484               	bsf	3972,2,c	;volatile
  9368                           
  9369                           ;main.c: 270: }
  9370  002CF8  0012               	return	
  9371  002CFA                     i2l3690:
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;main.c: 271: else if (cont3>=1 && auxTriac3Acionado==1){
  9375  002CFA  BE48               	btfsc	func_timer3@cont3+1,7,c
  9376  002CFC  0012               	return	
  9377  002CFE  5048               	movf	func_timer3@cont3+1,w,c
  9378  002D00  E103               	bnz	i2u356_40
  9379  002D02  0447               	decf	func_timer3@cont3,w,c
  9380  002D04  A0D8               	btfss	status,0,c
  9381  002D06  0012               	return	
  9382  002D08                     i2u356_40:
  9383                           
  9384                           ; BSR set to: 0
  9385  002D08  044D               	decf	func_timer3@auxTriac3Acionado,w,c
  9386  002D0A  A4D8               	btfss	status,2,c
  9387  002D0C  0012               	return	
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;main.c: 272: cont3 = 0;
  9391  002D0E  0E00               	movlw	0
  9392  002D10  6E48               	movwf	func_timer3@cont3+1,c
  9393  002D12  0E00               	movlw	0
  9394  002D14  6E47               	movwf	func_timer3@cont3,c
  9395                           
  9396                           ;main.c: 273: auxTriac3Acionado=0;
  9397  002D16  0E00               	movlw	0
  9398  002D18  6E4D               	movwf	func_timer3@auxTriac3Acionado,c
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;main.c: 274: PORTEbits.RE2 = 0;
  9402  002D1A  9484               	bcf	3972,2,c	;volatile
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;main.c: 275: TMR3IE=0;
  9406  002D1C  92A0               	bcf	4000,1,c	;volatile
  9407                           
  9408                           ; BSR set to: 0
  9409  002D1E  0012               	return	
  9410  002D20                     __end_of_func_timer3:
  9411                           	opt stack 0
  9412                           pclatu	equ	0xFFB
  9413                           pclath	equ	0xFFA
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           intcon2	equ	0xFF1
  9422                           intcon3	equ	0xFF0
  9423                           indf0	equ	0xFEF
  9424                           postinc0	equ	0xFEE
  9425                           fsr0h	equ	0xFEA
  9426                           fsr0l	equ	0xFE9
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           fsr2h	equ	0xFDA
  9435                           fsr2l	equ	0xFD9
  9436                           status	equ	0xFD8
  9437                           
  9438 ;; *************** function _func_timer2 *****************
  9439 ;; Defined at:
  9440 ;;		line 240 in file "main.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9454 ;;      Params:         0       0       0       0       0       0       0       0       0
  9455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9456 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9457 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9458 ;;Total ram usage:        1 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; This function calls:
  9461 ;;		Nothing
  9462 ;; This function is called by:
  9463 ;;		_altaPrioridade
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           	psect	text43
  9468  002D20                     __ptext43:
  9469                           	opt stack 0
  9470  002D20                     _func_timer2:
  9471                           	opt stack 25
  9472                           
  9473                           ;main.c: 241: static int cont2=0;
  9474                           ;main.c: 242: static char auxTriac2Acionado=0;
  9475                           ;main.c: 243: cont2++;
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;incstack = 0
  9479  002D20  4A45               	infsnz	func_timer2@cont2,f,c
  9480  002D22  2A46               	incf	func_timer2@cont2+1,f,c
  9481                           
  9482                           ;main.c: 244: TMR2IF=0;
  9483  002D24  929E               	bcf	3998,1,c	;volatile
  9484                           
  9485                           ;main.c: 246: if (cont2>=TempoAtual && auxTriac2Acionado==0){
  9486  002D26  0100               	movlb	0	; () banked
  9487  002D28  51D0               	movf	_TempoAtual& (0+255),w,b
  9488  002D2A  5C45               	subwf	func_timer2@cont2,w,c
  9489  002D2C  5046               	movf	func_timer2@cont2+1,w,c
  9490  002D2E  0A80               	xorlw	128
  9491  002D30  6E01               	movwf	??_func_timer2& (0+255),c
  9492  002D32  0100               	movlb	0	; () banked
  9493  002D34  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9494  002D36  0A80               	xorlw	128
  9495  002D38  5801               	subwfb	??_func_timer2& (0+255),w,c
  9496  002D3A  A0D8               	btfss	status,0,c
  9497  002D3C  D00B               	goto	i2l3668
  9498                           
  9499                           ; BSR set to: 0
  9500  002D3E  504C               	movf	func_timer2@auxTriac2Acionado,w,c
  9501  002D40  A4D8               	btfss	status,2,c
  9502  002D42  D008               	goto	i2l3668
  9503                           
  9504                           ; BSR set to: 0
  9505                           ;main.c: 247: cont2=0;
  9506  002D44  0E00               	movlw	0
  9507  002D46  6E46               	movwf	func_timer2@cont2+1,c
  9508  002D48  0E00               	movlw	0
  9509  002D4A  6E45               	movwf	func_timer2@cont2,c
  9510                           
  9511                           ;main.c: 248: auxTriac2Acionado=1;
  9512  002D4C  0E01               	movlw	1
  9513  002D4E  6E4C               	movwf	func_timer2@auxTriac2Acionado,c
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;main.c: 249: PORTEbits.RE1 = 1;
  9517  002D50  8284               	bsf	3972,1,c	;volatile
  9518                           
  9519                           ;main.c: 250: }
  9520  002D52  0012               	return	
  9521  002D54                     i2l3668:
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;main.c: 251: else if (cont2>=1 && auxTriac2Acionado==1){
  9525  002D54  BE46               	btfsc	func_timer2@cont2+1,7,c
  9526  002D56  0012               	return	
  9527  002D58  5046               	movf	func_timer2@cont2+1,w,c
  9528  002D5A  E103               	bnz	i2u352_40
  9529  002D5C  0445               	decf	func_timer2@cont2,w,c
  9530  002D5E  A0D8               	btfss	status,0,c
  9531  002D60  0012               	return	
  9532  002D62                     i2u352_40:
  9533                           
  9534                           ; BSR set to: 0
  9535  002D62  044C               	decf	func_timer2@auxTriac2Acionado,w,c
  9536  002D64  A4D8               	btfss	status,2,c
  9537  002D66  0012               	return	
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;main.c: 252: cont2 = 0;
  9541  002D68  0E00               	movlw	0
  9542  002D6A  6E46               	movwf	func_timer2@cont2+1,c
  9543  002D6C  0E00               	movlw	0
  9544  002D6E  6E45               	movwf	func_timer2@cont2,c
  9545                           
  9546                           ;main.c: 253: auxTriac2Acionado=0;
  9547  002D70  0E00               	movlw	0
  9548  002D72  6E4C               	movwf	func_timer2@auxTriac2Acionado,c
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;main.c: 254: PORTEbits.RE1 = 0;
  9552  002D74  9284               	bcf	3972,1,c	;volatile
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;main.c: 255: TMR2IE=0;
  9556  002D76  929D               	bcf	3997,1,c	;volatile
  9557                           
  9558                           ; BSR set to: 0
  9559  002D78  0012               	return	
  9560  002D7A                     __end_of_func_timer2:
  9561                           	opt stack 0
  9562                           pclatu	equ	0xFFB
  9563                           pclath	equ	0xFFA
  9564                           tblptru	equ	0xFF8
  9565                           tblptrh	equ	0xFF7
  9566                           tblptrl	equ	0xFF6
  9567                           tablat	equ	0xFF5
  9568                           prodh	equ	0xFF4
  9569                           prodl	equ	0xFF3
  9570                           intcon	equ	0xFF2
  9571                           intcon2	equ	0xFF1
  9572                           intcon3	equ	0xFF0
  9573                           indf0	equ	0xFEF
  9574                           postinc0	equ	0xFEE
  9575                           fsr0h	equ	0xFEA
  9576                           fsr0l	equ	0xFE9
  9577                           wreg	equ	0xFE8
  9578                           postdec1	equ	0xFE5
  9579                           fsr1h	equ	0xFE2
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _func_timer0_desacel *****************
  9589 ;; Defined at:
  9590 ;;		line 207 in file "main.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      void 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9604 ;;      Params:         0       0       0       0       0       0       0       0       0
  9605 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9606 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9607 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9608 ;;Total ram usage:        1 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; This function calls:
  9611 ;;		Nothing
  9612 ;; This function is called by:
  9613 ;;		_altaPrioridade
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           	psect	text44
  9618  00260A                     __ptext44:
  9619                           	opt stack 0
  9620  00260A                     _func_timer0_desacel:
  9621                           	opt stack 25
  9622                           
  9623                           ;main.c: 208: cont++;
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;incstack = 0
  9627  00260A  4A43               	infsnz	_cont,f,c
  9628  00260C  2A44               	incf	_cont+1,f,c
  9629                           
  9630                           ;main.c: 209: TMR0IF=0;
  9631  00260E  94F2               	bcf	intcon,2,c	;volatile
  9632                           
  9633                           ;main.c: 211: if (cont>=TempoAtual && auxTriacAcionado==0){
  9634  002610  0100               	movlb	0	; () banked
  9635  002612  51D0               	movf	_TempoAtual& (0+255),w,b
  9636  002614  5C43               	subwf	_cont,w,c
  9637  002616  5044               	movf	_cont+1,w,c
  9638  002618  0A80               	xorlw	128
  9639  00261A  6E01               	movwf	??_func_timer0_desacel& (0+255),c
  9640  00261C  0100               	movlb	0	; () banked
  9641  00261E  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9642  002620  0A80               	xorlw	128
  9643  002622  5801               	subwfb	??_func_timer0_desacel& (0+255),w,c
  9644  002624  A0D8               	btfss	status,0,c
  9645  002626  D03D               	goto	i2l3646
  9646                           
  9647                           ; BSR set to: 0
  9648  002628  504B               	movf	_auxTriacAcionado,w,c
  9649  00262A  A4D8               	btfss	status,2,c
  9650  00262C  D03A               	goto	i2l3646
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;main.c: 212: cont=0;
  9654  00262E  0E00               	movlw	0
  9655  002630  6E44               	movwf	_cont+1,c
  9656  002632  0E00               	movlw	0
  9657  002634  6E43               	movwf	_cont,c
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;main.c: 213: ContCiclosIncremento++;
  9661  002636  0100               	movlb	0	; () banked
  9662  002638  4BC0               	infsnz	_ContCiclosIncremento& (0+255),f,b
  9663  00263A  2BC1               	incf	(_ContCiclosIncremento+1)& (0+255),f,b
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;main.c: 214: if (ContCiclosIncremento>=CiclosIncrementoDesac){
  9667  00263C  0100               	movlb	0	; () banked
  9668  00263E  51BE               	movf	_CiclosIncrementoDesac& (0+255),w,b
  9669  002640  0100               	movlb	0	; () banked
  9670  002642  5DC0               	subwf	_ContCiclosIncremento& (0+255),w,b
  9671  002644  0100               	movlb	0	; () banked
  9672  002646  51C1               	movf	(_ContCiclosIncremento+1)& (0+255),w,b
  9673  002648  0A80               	xorlw	128
  9674  00264A  6E01               	movwf	??_func_timer0_desacel& (0+255),c
  9675  00264C  0100               	movlb	0	; () banked
  9676  00264E  51BF               	movf	(_CiclosIncrementoDesac+1)& (0+255),w,b
  9677  002650  0A80               	xorlw	128
  9678  002652  5801               	subwfb	??_func_timer0_desacel& (0+255),w,c
  9679  002654  A0D8               	btfss	status,0,c
  9680  002656  D008               	goto	i2l3628
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;main.c: 215: ContCiclosIncremento = 0;
  9684  002658  0E00               	movlw	0
  9685  00265A  0100               	movlb	0	; () banked
  9686  00265C  6FC1               	movwf	(_ContCiclosIncremento+1)& (0+255),b
  9687  00265E  0E00               	movlw	0
  9688  002660  6FC0               	movwf	_ContCiclosIncremento& (0+255),b
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;main.c: 216: TempoAtual++;
  9692  002662  0100               	movlb	0	; () banked
  9693  002664  4BD0               	infsnz	_TempoAtual& (0+255),f,b
  9694  002666  2BD1               	incf	(_TempoAtual+1)& (0+255),f,b
  9695  002668                     i2l3628:
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;main.c: 217: }
  9699                           ;main.c: 218: if (TempoAtual>=70){
  9700  002668  0100               	movlb	0	; () banked
  9701  00266A  BFD1               	btfsc	(_TempoAtual+1)& (0+255),7,b
  9702  00266C  D016               	goto	i2l3642
  9703  00266E  0100               	movlb	0	; () banked
  9704  002670  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9705  002672  E105               	bnz	i2u347_40
  9706  002674  0E46               	movlw	70
  9707  002676  0100               	movlb	0	; () banked
  9708  002678  5DD0               	subwf	_TempoAtual& (0+255),w,b
  9709  00267A  A0D8               	btfss	status,0,c
  9710  00267C  D00E               	goto	i2l3642
  9711  00267E                     i2u347_40:
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;main.c: 219: TempoAtual = TempoChaveamentoInicial;
  9715  00267E  C0CA  F0D0         	movff	_TempoChaveamentoInicial,_TempoAtual
  9716  002682  C0CB  F0D1         	movff	_TempoChaveamentoInicial+1,_TempoAtual+1
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;main.c: 220: MotorLigado = 0;
  9720  002686  0E00               	movlw	0
  9721  002688  0100               	movlb	0	; () banked
  9722  00268A  6FC6               	movwf	_MotorLigado& (0+255),b
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;main.c: 221: PORTCbits.RC0 = 0;
  9726  00268C  9082               	bcf	3970,0,c	;volatile
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;main.c: 222: TMR0IE=0;
  9730  00268E  9AF2               	bcf	intcon,5,c	;volatile
  9731                           
  9732                           ;main.c: 223: INTCON = 0b01000000;
  9733  002690  0E40               	movlw	64
  9734  002692  6EF2               	movwf	intcon,c	;volatile
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 224: INT1IE = 0;
  9738  002694  96F0               	bcf	intcon3,3,c	;volatile
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;main.c: 225: INT2IE = 0;
  9742  002696  98F0               	bcf	intcon3,4,c	;volatile
  9743                           
  9744                           ;main.c: 226: }
  9745  002698  0012               	return	
  9746  00269A                     i2l3642:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;main.c: 227: else{
  9750                           ;main.c: 228: auxTriacAcionado=1;
  9751  00269A  0E01               	movlw	1
  9752  00269C  6E4B               	movwf	_auxTriacAcionado,c
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;main.c: 229: PORTEbits.RE0 = 1;
  9756  00269E  8084               	bsf	3972,0,c	;volatile
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;main.c: 230: }
  9760                           ;main.c: 231: }
  9761  0026A0  0012               	return	
  9762  0026A2                     i2l3646:
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;main.c: 232: else if (cont>=1 && auxTriacAcionado==1){
  9766  0026A2  BE44               	btfsc	_cont+1,7,c
  9767  0026A4  0012               	return	
  9768  0026A6  5044               	movf	_cont+1,w,c
  9769  0026A8  E103               	bnz	i2u348_40
  9770  0026AA  0443               	decf	_cont,w,c
  9771  0026AC  A0D8               	btfss	status,0,c
  9772  0026AE  0012               	return	
  9773  0026B0                     i2u348_40:
  9774                           
  9775                           ; BSR set to: 0
  9776  0026B0  044B               	decf	_auxTriacAcionado,w,c
  9777  0026B2  A4D8               	btfss	status,2,c
  9778  0026B4  0012               	return	
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;main.c: 233: cont = 0;
  9782  0026B6  0E00               	movlw	0
  9783  0026B8  6E44               	movwf	_cont+1,c
  9784  0026BA  0E00               	movlw	0
  9785  0026BC  6E43               	movwf	_cont,c
  9786                           
  9787                           ;main.c: 234: auxTriacAcionado=0;
  9788  0026BE  0E00               	movlw	0
  9789  0026C0  6E4B               	movwf	_auxTriacAcionado,c
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;main.c: 235: PORTEbits.RE0 = 0;
  9793  0026C2  9084               	bcf	3972,0,c	;volatile
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;main.c: 236: TMR0IE=0;
  9797  0026C4  9AF2               	bcf	intcon,5,c	;volatile
  9798                           
  9799                           ; BSR set to: 0
  9800  0026C6  0012               	return	
  9801  0026C8                     __end_of_func_timer0_desacel:
  9802                           	opt stack 0
  9803                           pclatu	equ	0xFFB
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           intcon3	equ	0xFF0
  9814                           indf0	equ	0xFEF
  9815                           postinc0	equ	0xFEE
  9816                           fsr0h	equ	0xFEA
  9817                           fsr0l	equ	0xFE9
  9818                           wreg	equ	0xFE8
  9819                           postdec1	equ	0xFE5
  9820                           fsr1h	equ	0xFE2
  9821                           fsr1l	equ	0xFE1
  9822                           indf2	equ	0xFDF
  9823                           postinc2	equ	0xFDE
  9824                           postdec2	equ	0xFDD
  9825                           fsr2h	equ	0xFDA
  9826                           fsr2l	equ	0xFD9
  9827                           status	equ	0xFD8
  9828                           
  9829 ;; *************** function _func_timer0_acel *****************
  9830 ;; Defined at:
  9831 ;;		line 178 in file "main.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;		None
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;		None
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  1    wreg      void 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/0
  9842 ;;		On exit  : 0/0
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9845 ;;      Params:         0       0       0       0       0       0       0       0       0
  9846 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9847 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9848 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9849 ;;Total ram usage:        1 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; This function calls:
  9852 ;;		Nothing
  9853 ;; This function is called by:
  9854 ;;		_altaPrioridade
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           	psect	text45
  9859  0026C8                     __ptext45:
  9860                           	opt stack 0
  9861  0026C8                     _func_timer0_acel:
  9862                           	opt stack 25
  9863                           
  9864                           ;main.c: 179: cont++;
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;incstack = 0
  9868  0026C8  4A43               	infsnz	_cont,f,c
  9869  0026CA  2A44               	incf	_cont+1,f,c
  9870                           
  9871                           ;main.c: 180: TMR0IF=0;
  9872  0026CC  94F2               	bcf	intcon,2,c	;volatile
  9873                           
  9874                           ;main.c: 182: contCorrente++;
  9875  0026CE  0100               	movlb	0	; () banked
  9876  0026D0  4BC2               	infsnz	_contCorrente& (0+255),f,b
  9877  0026D2  2BC3               	incf	(_contCorrente+1)& (0+255),f,b
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;main.c: 184: if (cont>=TempoAtual && auxTriacAcionado==0){
  9881  0026D4  0100               	movlb	0	; () banked
  9882  0026D6  51D0               	movf	_TempoAtual& (0+255),w,b
  9883  0026D8  5C43               	subwf	_cont,w,c
  9884  0026DA  5044               	movf	_cont+1,w,c
  9885  0026DC  0A80               	xorlw	128
  9886  0026DE  6E01               	movwf	??_func_timer0_acel& (0+255),c
  9887  0026E0  0100               	movlb	0	; () banked
  9888  0026E2  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9889  0026E4  0A80               	xorlw	128
  9890  0026E6  5801               	subwfb	??_func_timer0_acel& (0+255),w,c
  9891  0026E8  A0D8               	btfss	status,0,c
  9892  0026EA  D039               	goto	i2l3600
  9893                           
  9894                           ; BSR set to: 0
  9895  0026EC  504B               	movf	_auxTriacAcionado,w,c
  9896  0026EE  A4D8               	btfss	status,2,c
  9897  0026F0  D036               	goto	i2l3600
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;main.c: 185: cont=0;
  9901  0026F2  0E00               	movlw	0
  9902  0026F4  6E44               	movwf	_cont+1,c
  9903  0026F6  0E00               	movlw	0
  9904  0026F8  6E43               	movwf	_cont,c
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;main.c: 186: ContCiclosIncremento++;
  9908  0026FA  0100               	movlb	0	; () banked
  9909  0026FC  4BC0               	infsnz	_ContCiclosIncremento& (0+255),f,b
  9910  0026FE  2BC1               	incf	(_ContCiclosIncremento+1)& (0+255),f,b
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;main.c: 187: if (ContCiclosIncremento>=CiclosIncrementoAcel){
  9914  002700  0100               	movlb	0	; () banked
  9915  002702  51BC               	movf	_CiclosIncrementoAcel& (0+255),w,b
  9916  002704  0100               	movlb	0	; () banked
  9917  002706  5DC0               	subwf	_ContCiclosIncremento& (0+255),w,b
  9918  002708  0100               	movlb	0	; () banked
  9919  00270A  51C1               	movf	(_ContCiclosIncremento+1)& (0+255),w,b
  9920  00270C  0A80               	xorlw	128
  9921  00270E  6E01               	movwf	??_func_timer0_acel& (0+255),c
  9922  002710  0100               	movlb	0	; () banked
  9923  002712  51BD               	movf	(_CiclosIncrementoAcel+1)& (0+255),w,b
  9924  002714  0A80               	xorlw	128
  9925  002716  5801               	subwfb	??_func_timer0_acel& (0+255),w,c
  9926  002718  A0D8               	btfss	status,0,c
  9927  00271A  D009               	goto	i2l3592
  9928                           
  9929                           ; BSR set to: 0
  9930                           ;main.c: 188: ContCiclosIncremento = 0;
  9931  00271C  0E00               	movlw	0
  9932  00271E  0100               	movlb	0	; () banked
  9933  002720  6FC1               	movwf	(_ContCiclosIncremento+1)& (0+255),b
  9934  002722  0E00               	movlw	0
  9935  002724  6FC0               	movwf	_ContCiclosIncremento& (0+255),b
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;main.c: 189: TempoAtual--;
  9939  002726  0100               	movlb	0	; () banked
  9940  002728  07D0               	decf	_TempoAtual& (0+255),f,b
  9941  00272A  A0D8               	btfss	status,0,c
  9942  00272C  07D1               	decf	(_TempoAtual+1)& (0+255),f,b
  9943  00272E                     i2l3592:
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;main.c: 190: }
  9947                           ;main.c: 191: if (TempoAtual<=31){
  9948  00272E  0100               	movlb	0	; () banked
  9949  002730  BFD1               	btfsc	(_TempoAtual+1)& (0+255),7,b
  9950  002732  D008               	goto	i2l3594
  9951  002734  0100               	movlb	0	; () banked
  9952  002736  51D1               	movf	(_TempoAtual+1)& (0+255),w,b
  9953  002738  E10E               	bnz	i2l259
  9954  00273A  0E20               	movlw	32
  9955  00273C  0100               	movlb	0	; () banked
  9956  00273E  5DD0               	subwf	_TempoAtual& (0+255),w,b
  9957  002740  B0D8               	btfsc	status,0,c
  9958  002742  D009               	goto	i2l259
  9959  002744                     i2l3594:
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;main.c: 192: PORTCbits.RC0 = 1;
  9963  002744  8082               	bsf	3970,0,c	;volatile
  9964                           
  9965                           ; BSR set to: 0
  9966                           ;main.c: 193: MotorLigado = 1;
  9967  002746  0E01               	movlw	1
  9968  002748  0100               	movlb	0	; () banked
  9969  00274A  6FC6               	movwf	_MotorLigado& (0+255),b
  9970                           
  9971                           ;main.c: 194: TempoAtual = 31;
  9972  00274C  0E00               	movlw	0
  9973  00274E  0100               	movlb	0	; () banked
  9974  002750  6FD1               	movwf	(_TempoAtual+1)& (0+255),b
  9975  002752  0E1F               	movlw	31
  9976  002754  6FD0               	movwf	_TempoAtual& (0+255),b
  9977  002756                     i2l259:
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;main.c: 195: }
  9981                           ;main.c: 196: auxTriacAcionado=1;
  9982  002756  0E01               	movlw	1
  9983  002758  6E4B               	movwf	_auxTriacAcionado,c
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;main.c: 197: PORTEbits.RE0 = 1;
  9987  00275A  8084               	bsf	3972,0,c	;volatile
  9988                           
  9989                           ;main.c: 198: }
  9990  00275C  0012               	return	
  9991  00275E                     i2l3600:
  9992                           
  9993                           ; BSR set to: 0
  9994                           ;main.c: 199: else if (cont>=1 && auxTriacAcionado==1){
  9995  00275E  BE44               	btfsc	_cont+1,7,c
  9996  002760  0012               	return	
  9997  002762  5044               	movf	_cont+1,w,c
  9998  002764  E103               	bnz	i2u342_40
  9999  002766  0443               	decf	_cont,w,c
 10000  002768  A0D8               	btfss	status,0,c
 10001  00276A  0012               	return	
 10002  00276C                     i2u342_40:
 10003                           
 10004                           ; BSR set to: 0
 10005  00276C  044B               	decf	_auxTriacAcionado,w,c
 10006  00276E  A4D8               	btfss	status,2,c
 10007  002770  0012               	return	
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;main.c: 200: cont = 0;
 10011  002772  0E00               	movlw	0
 10012  002774  6E44               	movwf	_cont+1,c
 10013  002776  0E00               	movlw	0
 10014  002778  6E43               	movwf	_cont,c
 10015                           
 10016                           ;main.c: 201: auxTriacAcionado=0;
 10017  00277A  0E00               	movlw	0
 10018  00277C  6E4B               	movwf	_auxTriacAcionado,c
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;main.c: 202: PORTEbits.RE0 = 0;
 10022  00277E  9084               	bcf	3972,0,c	;volatile
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;main.c: 203: TMR0IE=0;
 10026  002780  9AF2               	bcf	intcon,5,c	;volatile
 10027                           
 10028                           ; BSR set to: 0
 10029  002782  0012               	return	
 10030  002784                     __end_of_func_timer0_acel:
 10031                           	opt stack 0
 10032                           pclatu	equ	0xFFB
 10033                           pclath	equ	0xFFA
 10034                           tblptru	equ	0xFF8
 10035                           tblptrh	equ	0xFF7
 10036                           tblptrl	equ	0xFF6
 10037                           tablat	equ	0xFF5
 10038                           prodh	equ	0xFF4
 10039                           prodl	equ	0xFF3
 10040                           intcon	equ	0xFF2
 10041                           intcon2	equ	0xFF1
 10042                           intcon3	equ	0xFF0
 10043                           indf0	equ	0xFEF
 10044                           postinc0	equ	0xFEE
 10045                           fsr0h	equ	0xFEA
 10046                           fsr0l	equ	0xFE9
 10047                           wreg	equ	0xFE8
 10048                           postdec1	equ	0xFE5
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           indf2	equ	0xFDF
 10052                           postinc2	equ	0xFDE
 10053                           postdec2	equ	0xFDD
 10054                           fsr2h	equ	0xFDA
 10055                           fsr2l	equ	0xFD9
 10056                           status	equ	0xFD8
 10057                           pclatu	equ	0xFFB
 10058                           pclath	equ	0xFFA
 10059                           tblptru	equ	0xFF8
 10060                           tblptrh	equ	0xFF7
 10061                           tblptrl	equ	0xFF6
 10062                           tablat	equ	0xFF5
 10063                           prodh	equ	0xFF4
 10064                           prodl	equ	0xFF3
 10065                           intcon	equ	0xFF2
 10066                           intcon2	equ	0xFF1
 10067                           intcon3	equ	0xFF0
 10068                           indf0	equ	0xFEF
 10069                           postinc0	equ	0xFEE
 10070                           fsr0h	equ	0xFEA
 10071                           fsr0l	equ	0xFE9
 10072                           wreg	equ	0xFE8
 10073                           postdec1	equ	0xFE5
 10074                           fsr1h	equ	0xFE2
 10075                           fsr1l	equ	0xFE1
 10076                           indf2	equ	0xFDF
 10077                           postinc2	equ	0xFDE
 10078                           postdec2	equ	0xFDD
 10079                           fsr2h	equ	0xFDA
 10080                           fsr2l	equ	0xFD9
 10081                           status	equ	0xFD8
 10082                           
 10083                           	psect	rparam
 10084  0000                     pclatu	equ	0xFFB
 10085                           pclath	equ	0xFFA
 10086                           tblptru	equ	0xFF8
 10087                           tblptrh	equ	0xFF7
 10088                           tblptrl	equ	0xFF6
 10089                           tablat	equ	0xFF5
 10090                           prodh	equ	0xFF4
 10091                           prodl	equ	0xFF3
 10092                           intcon	equ	0xFF2
 10093                           intcon2	equ	0xFF1
 10094                           intcon3	equ	0xFF0
 10095                           indf0	equ	0xFEF
 10096                           postinc0	equ	0xFEE
 10097                           fsr0h	equ	0xFEA
 10098                           fsr0l	equ	0xFE9
 10099                           wreg	equ	0xFE8
 10100                           postdec1	equ	0xFE5
 10101                           fsr1h	equ	0xFE2
 10102                           fsr1l	equ	0xFE1
 10103                           indf2	equ	0xFDF
 10104                           postinc2	equ	0xFDE
 10105                           postdec2	equ	0xFDD
 10106                           fsr2h	equ	0xFDA
 10107                           fsr2l	equ	0xFD9
 10108                           status	equ	0xFD8
 10109                           
 10110                           	psect	temp
 10111  000050                     btemp:
 10112                           	opt stack 0
 10113  000050                     	ds	1
 10114  0000                     int$flags	set	btemp
 10115                           pclatu	equ	0xFFB
 10116                           pclath	equ	0xFFA
 10117                           tblptru	equ	0xFF8
 10118                           tblptrh	equ	0xFF7
 10119                           tblptrl	equ	0xFF6
 10120                           tablat	equ	0xFF5
 10121                           prodh	equ	0xFF4
 10122                           prodl	equ	0xFF3
 10123                           intcon	equ	0xFF2
 10124                           intcon2	equ	0xFF1
 10125                           intcon3	equ	0xFF0
 10126                           indf0	equ	0xFEF
 10127                           postinc0	equ	0xFEE
 10128                           fsr0h	equ	0xFEA
 10129                           fsr0l	equ	0xFE9
 10130                           wreg	equ	0xFE8
 10131                           postdec1	equ	0xFE5
 10132                           fsr1h	equ	0xFE2
 10133                           fsr1l	equ	0xFE1
 10134                           indf2	equ	0xFDF
 10135                           postinc2	equ	0xFDE
 10136                           postdec2	equ	0xFDD
 10137                           fsr2h	equ	0xFDA
 10138                           fsr2l	equ	0xFD9
 10139                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    118
    Data        10
    BSS         29
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      79
    BANK0           160     86     114
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[7]), STR_6(CODE[7]), 
		 -> STR_4(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@StringCorrente(BANK0[10]), main@StringTempo(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> main@StringCorrente(BANK0[10]), STR_7(CODE[4]), STR_5(CODE[4]), main@StringTempo(BANK0[10]), 
		 -> STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _parada_forcada->_SetDDRamAddr
    _putsXLCD->_WriteDataXLCD
    ___ftdiv->___ftmul
    ___awtoft->___wmul
    _InicializaLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _DelayPORXLCD->_Delay1KTCYx

Critical Paths under _altaPrioridade in COMRAM

    _altaPrioridade->_func_timer0_acel
    _altaPrioridade->_func_timer0_desacel
    _altaPrioridade->_func_timer2
    _altaPrioridade->_func_timer3

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___fttol
    ___ftsub->___ftadd

Critical Paths under _altaPrioridade in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _altaPrioridade in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _altaPrioridade in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _altaPrioridade in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _altaPrioridade in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _altaPrioridade in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _altaPrioridade in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _altaPrioridade in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   71306
                                             51 BANK0     35    35      0
                            _BusyADC
                         _ConvertADC
                      _InicializaLCD
                            _OpenADC
                         _OpenTimer0
                         _OpenTimer2
                         _OpenTimer3
                            _ReadADC
                         _SetChanADC
                       _SetDDRamAddr
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                             ___wmul
                     _parada_forcada
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   52100
                                             15 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11752
                                             50 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11473
                                             50 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5436
                                             35 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             28 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     756
                                              0 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4535
                                              6 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4171
                                             60 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _parada_forcada                                       0     0      0     773
                       _SetDDRamAddr
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     729
                                             16 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      44
                                             15 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3674
                                             50 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2888
                                             35 COMRAM     4     1      3
                            _ReadADC (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SetChanADC                                           2     2      0      22
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              4     2      2       0
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _OpenTimer3                                           1     1      0      66
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenTimer2                                           1     1      0      44
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenTimer0                                           1     1      0      44
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              5     3      2     282
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     176
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             2     2      0     132
                                             19 COMRAM     2     2      0
                           _BusyXLCD
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      44
                                             15 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetDDRamAddr                                         4     4      0      44
                                             15 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      22
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _altaPrioridade                                      14    14      0       0
                                              1 COMRAM    14    14      0
                   _func_timer0_acel
                _func_timer0_desacel
                        _func_timer2
                        _func_timer3
 ---------------------------------------------------------------------------------
 (6) _func_timer3                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _func_timer2                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _func_timer0_desacel                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _func_timer0_acel                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _InicializaLCD
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _OpenADC
   _OpenTimer0
   _OpenTimer2
   _OpenTimer3
   _ReadADC
   _SetChanADC
   _SetDDRamAddr
     _DelayFor18TCY
   ___awtoft
     _ReadADC (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       _ReadADC (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___awtoft (ARG)
       _ReadADC (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _parada_forcada
     _SetDDRamAddr
       _DelayFor18TCY
     _putsXLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteDataXLCD
         _DelayFor18TCY
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _altaPrioridade (ROOT)
   _func_timer0_acel
   _func_timer0_desacel
   _func_timer2
   _func_timer3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      72       5       71.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C1      20        0.0%
DATA                 0      0      C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Dec 18 19:32:11 2017

                 main@BloqBT1 00AF                   main@BloqBT2 00B0                   main@BloqBT3 00B1  
                 main@BloqBT4 00B2                  main@DelayBT1 00AB                  main@DelayBT2 00AC  
                main@DelayBT3 00AD                  main@DelayBT4 00AE                            l23 2EF8  
                ___awdiv@sign 001B                   __CFG_BOR$ON 000000           ___wmul@multiplicand 0020  
                 __CFG_BORV$1 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                  ___ftadd@exp1 0065  
                ___ftadd@exp2 0064                  ___ftadd@sign 0063                 _InicializaLCD 2F6E  
                         l313 1350                           l421 0E62                           l511 3034  
                         l319 147C                           l512 3036                           l530 2F68  
                         l531 2F6A                           l470 2C0A                           l528 2F5E  
                         l529 2F60                           l810 1E58                           l804 1DFA  
                         l496 2FFA                           l808 1E34                           l497 2FFC  
                         l819 1F16                           l828 1F34                           l781 28C6  
                         l749 2338                           l853 2210                           l846 2182  
                         l839 24F2                           l847 21AA                           l928 2A6A  
                         l938 2B40                           l878 2FD2                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000              ??_parada_forcada 0014  
       __size_of_WriteCmdXLCD 003E                  ___awmod@sign 0015                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 003C                  ___ftdiv@sign 0041  
                __CFG_WDT$OFF 000000                          l3110 29B8                          l3102 299A  
                        l3200 27F6                          l3120 29D8                          l3112 29BC  
                        l3212 2826                          l3204 2806                          l3220 2C6C  
                        l3108 29B0                          l3124 29E2                          l3140 2A90  
                        l3150 2AB2                          l3208 2816                          l3312 2148  
                        l3128 29F0                          l3152 2AB6                          l3160 2AD4  
                        l3144 2A9C                          l3226 2C9E                          l3402 22FE  
                        l3306 211C                          l3500 2A28                          l3412 2326  
                        l3164 2AE2                          l3156 2ACA                          l3148 2AAA  
                        l3190 27CC                          l3510 2A5C                          l3502 2A2C  
                        l3414 2332                          l3406 230E                          l3342 21D6  
                        l5110 1598                          l5102 1588                          l3192 27D6  
                        l3432 2946                          l3520 2B0A                          l3352 21FE  
                        l3096 298A                          l5120 15CC                          l5040 131C  
                        l4410 2856                          l3522 2B0E                          l3362 2240  
                        l3354 220A                          l3346 21E6                          l5130 1602  
                        l5106 1590                          l2812 306C                          l3196 27E6  
                        l4420 28B2                          l4412 2860                          l3428 2916  
                        l5140 1636                          l5116 15C0                          l3542 2F74  
                        l4422 28BC                          l4414 287E                          l4406 2848  
                        l3438 2972                          l3526 2B32                          l3518 2AFE  
                        l3390 22D0                          l3382 22A0                          l5150 166C  
                        l5054 13E0                          l4504 1F86                          l3368 225E  
                        l4520 239A                          l3296 3016                          l5160 16C0  
                        l5136 162A                          l5072 147E                          l5048 1346  
                        l3546 2F84                          l4418 2894                          l4514 2372  
                        l5170 1714                          l5090 1568                          l5082 1548  
                        l5074 1490                          l4452 1E42                          l4620 2DEE  
                        l4612 1B2C                          l4700 0968                          l5180 173E  
                        l4446 1E08                          l4630 1FE6                          l4534 23CC  
                        l4606 1A88                          l4710 0994                          l4702 097E  
                        l5094 1578                          l5086 1558                          l4480 1ED2  
                        l4544 23F4                          l4800 0D40                          l4712 09C8  
                        l4474 1EAC                          l4458 1E50                          l3498 2A1C  
                        l4538 23DC                          l4706 098E                          l5098 1580  
                        l4476 1EB8                          l4468 1E80                          l4660 20B8  
                        l4652 208C                          l4548 2404                          l4804 0D6C  
                        l4494 1F52                          l4486 1EFE                          l4478 1EC6  
                        l4662 20C2                          l4574 1D56                          l4566 1C96  
                        l4910 11D0                          l4822 0E30                          l4806 0D74  
                        l4814 0E08                          l4718 09E2                          l4488 1F0A  
                        l4648 2078                          l4672 2C14                          l4904 1140  
                        l4840 0EE8                          l4824 0E44                          l4816 0E16  
                        l4760 0BAA                          l4752 0B3E                          l4744 0AD6  
                        l4728 0A28                          l4912 11E6                          l4930 248E  
                        l4666 20DE                          l4658 20A8                          l4674 2C20  
                        l4594 1938                          l4850 0FCE                          l4762 0BC0  
                        l4914 1204                          l4682 08DA                          l4924 2466  
                        l4588 1894                          l4908 11CA                          l4852 0FDC  
                        l4836 0E96                          l4828 0E66                          l4772 0C30  
                        l4756 0B64                          l4860 1004                          l4950 24CC  
                        l4598 195C                          l4870 1048                          l4782 0C8E  
                        l4758 0B7A                          l4768 0C0A                          l4696 092C  
                        l4688 08FA                          l4890 10BA                          l4858 0FF6  
                        l4786 0CF4                          l4972 2F20                          l4876 106E  
                        l4788 0CFA                          l4894 10E2                          l4878 1074  
                        l4898 1112                          STR_1 0877                          STR_2 0888  
                        STR_3 0899                          STR_4 08B0                          STR_5 08C0  
                        STR_6 08B7                          STR_7 08C0                          STR_8 08A9  
                        STR_9 08C4                          u3001 2100                          u3021 212C  
                        _LATC 000F8B                          _LATE 000F8D                          u4010 3090  
                        u2405 2D90                          u5031 1FC2                          u5050 200C  
                        u5055 2002                          u5501 244E                          u5350 0E5A  
                        u5190 0A6E                          u2880 2C96                          u5521 2476  
                        u2890 2CBE                          u5195 0A62                          u2887 2C8C  
                        u4911 2382                          u5560 1332                          u2897 2CB4  
                        u4681 1DAA                          u4691 1DC6                          u5820 165E  
                        u5830 1682                          u5840 16D6                          u5760 15F4  
                        u5907 27BE                          u4891 235A                          u5917 306E  
                        u5897 27AA                          _TMR0 000FD6                          _TMR2 000FCC  
                        _TMR3 000FB2                  __CFG_PWRT$ON 000000                          _cont 0043  
                        _main 1212                  ___ftpack@arg 0010                  ___ftpack@exp 0013  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 0050  
                        pclat 000FFA        __size_of_WriteDataXLCD 003E                          prodh 000FF4  
                        prodl 000FF3                          start 0016                 __CFG_IESO$OFF 000000  
                _sprintf$2127 007C                  ___ftmul@cntr 0031                  ___param_bank 000010  
                ___ftmul@sign 0032               __end_of_BusyADC 3094               __end_of_ReadADC 3088  
             __end_of_OpenADC 2C0E                  ___fttol@exp1 006E                  ___fttol@lval 006A  
                _WriteCmdXLCD 2E94                   _Delay1KTCYx 306A                 __CFG_PLLDIV$3 000000  
              ?_InicializaLCD 0001                 ?_SetDDRamAddr 0001                         ?_main 0001  
             __end_of___awdiv 29FA               __end_of___ftadd 1FAC                         STR_10 08BE  
             __end_of___awmod 2AEC               __end_of___ftdiv 2524               __end_of___ftneg 2FE0  
             __end_of___lldiv 2A7C               __end_of___ftmul 243E                         _T0CON 000FD5  
             ___awdiv@divisor 0018               __end_of___llmod 2B52               __end_of___ftsub 2E18  
             __end_of___fttol 20F0                         _T2CON 000FCA                         _T3CON 000FB1  
                       i2l305 25CE                         i2l259 2756                         i2l294 2566  
                       i2l295 257C                         i2l296 2572                  ?_func_timer2 0001  
                ?_func_timer3 0001               ___awdiv@counter 001A                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _TMR3H 000FB3                         _TMR3L 000FB2  
                       _PORTD 000F83                 __CFG_USBDIV$1 000000                         _TRISA 000F92  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0020                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
        _ContCiclosIncremento 00C0                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
               ___awtoft@sign 0027                main@LeituraAN0 00B3               __end_of_dpowers 0829  
                       _scale 1760               __end_of_isdigit 301E                 ___ftpack@sign 0014  
                  _ConvertADC 30A4                         tablat 000FF5                         status 000FD8  
             __end_of_sprintf 1212                __CFG_ICPRT$OFF 000000                __CFG_MCLRE$OFF 000000  
             __initialization 2B52                  __end_of_main 1760         _CiclosIncrementoDesac 00BE  
            __end_of_BusyXLCD 2F0C         __size_of_DelayPORXLCD 0008                ??_SetDDRamAddr 0010  
            __end_of_OpenXLCD 2838                        ??_main 0043                 ___fttol@sign1 0069  
               __activetblptr 000002                 _WriteDataXLCD 2E56                    _SetChanADC 3054  
        __size_of__tdiv_to_l_ 0132            _TempoDesaceleracao 00CC       __size_of_altaPrioridade 2602  
             __CFG_CCP2MX$OFF 000000                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0              ___llmod@dividend 001D                        ?_scale 0033  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0016  
            __end_of___awtoft 2F44              __end_of___ftpack 28E6              __end_of___lltoft 2C6A  
                      _INT0IE 007F94                        _INT0IF 007F91                        _INT1IE 007F83  
                      _INT1IF 007F80                        _INT2IE 007F84                        _INT2IF 007F81  
                      _INT1IP 007F86                        _INT2IP 007F87                    _OpenTimer0 2FE0  
                  _OpenTimer2 301E                    _OpenTimer3 2F44                        i2l3600 275E  
                      i2l4172 25A0                        i2l4184 25BC                        i2l3642 269A  
                      i2l4178 25B2                        i2l3628 2668                        i2l3646 26A2  
                      i2l3592 272E                        i2l3594 2744                        i2l3690 2CFA  
                      i2l3668 2D54                        _INTCON 000FF2                        _OSCCON 000FD3  
                      _TMR0IE 007F95                        _TMR0IF 007F92                        _TMR1IE 007CE8  
                      _TMR2IE 007CE9                        _TMR2IF 007CF1                        _TMR3IE 007D01  
                      _TMR3IF 007D09                        _TMR1IP 007CF8                        _TMR2IP 007CF9  
                      _TMR3IP 007D11                     ??_BusyADC 0010                     ??_ReadADC 0012  
                   ??_OpenADC 0012                  _DelayPORXLCD 309C                __CFG_XINST$OFF 000000  
            __end_of__powers_ 0877     __size_of_func_timer0_acel 00BC                    _TempoAtual 00D0  
                      ___ftge 28E6                        ___wmul 2F96                     ??___awdiv 001A  
                   ??___ftadd 0060                     ??___awmod 0014           _func_timer0_desacel 260A  
                   ??___ftdiv 0039                     ??___ftneg 0013                     ??___lldiv 0018  
                   ??___ftmul 002A                     ??___llmod 0025                     ??___ftsub 0043  
                   ??___fttol 0064              OpenTimer0@config 0010               ??_InicializaLCD 0016  
            OpenTimer2@config 0010                        _fround 1B50                        clear_0 2B90  
                      clear_1 2B9C              ___awdiv@quotient 001C               ___awmod@divisor 0012  
            OpenTimer3@config 0010               ___awmod@counter 0014                ?_WriteDataXLCD 0001  
       ___ftmul@f3_as_product 002E                  __pdataCOMRAM 004E                     ??_isdigit 0010  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                   _CorrenteRMS 00B6              __end_of_putsXLCD 2CC6  
        ?_func_timer0_desacel 0001                     ??_sprintf 0076                   ?_ConvertADC 0001  
                  __accesstop 0060       __end_of__initialization 2BA2               __CFG_PBADEN$OFF 000000  
                  ___ftadd@f1 003D                    ___ftadd@f2 0040                    ___ftge@ff1 0010  
                  ___ftge@ff2 0013       _TempoChaveamentoInicial 00CA                 ___rparam_used 000001  
                  ___ftdiv@f1 0033                    ___ftdiv@f2 0036                    ___ftdiv@f3 003D  
                  ___ftneg@f1 0010                    ___awtoft@c 0024                    ___ftmul@f1 0024  
                  ___ftmul@f2 0027                    ___ftsub@f1 0066                    ___ftsub@f2 0069  
                  ___fttol@f1 0060                __pcstackCOMRAM 0001                  __pidataBANK0 3094  
                  ___lltoft@c 0018                 __end_of_scale 1B50                    __div_to_l_ 2222  
                 ?_SetChanADC 0001          __size_of_func_timer2 005A          __size_of_func_timer3 005A  
       ??_func_timer0_desacel 0001               __div_to_l_@exp1 001B               __div_to_l_@cntr 001A  
                     ??_scale 0036        __size_of_DelayFor18TCY 001A               __div_to_l_@quot 0016  
                  __pbssBANK0 00B6                     ?_BusyXLCD 0001                   ?_OpenTimer0 0001  
                 ?_OpenTimer2 0001                   ?_OpenTimer3 0001               WriteCmdXLCD@cmd 0010  
        __end_of_SetDDRamAddr 2DCC              _auxTriacAcionado 004B                     ?_OpenXLCD 0001  
func_timer2@auxTriac2Acionado 004C                 __div_to_l_@f1 0010                 __div_to_l_@f2 0013  
                     ?___ftge 0010             WriteDataXLCD@data 0010                       ?___wmul 001E  
             _TempoAceleracao 00C8               ??_WriteDataXLCD 0010                  ?_Delay1KTCYx 0001  
                     ?_fround 0033           __size_of_ConvertADC 0004                     ?___awtoft 0024  
                   ?___ftpack 0010                     ?___lltoft 0018                _altaPrioridade 0008  
                  _contTimer0 004E                    _contTimer3 00CE                    ??_BusyXLCD 0010  
             __CFG_VREGEN$OFF 000000                       _BusyADC 3088                       _ReadADC 307A  
                  ??_OpenXLCD 0014                       _OpenADC 2BB0             __end_of__npowers_ 0850  
                     __Hparam 0000           __size_of_SetChanADC 0016                    _scale$2126 0036  
                     __Lparam 0000              _func_timer0_acel 26C8                   _MotorLigado 00C6  
             __size_of___ftge 0090                       ___awdiv 2976                 _DelayFor18TCY 303A  
                     ___ftadd 1D96                       ___awmod 2A7C                       ___ftdiv 243E  
                     ___ftneg 2FBC                       ___lldiv 29FA               __size_of___wmul 0026  
                     ___ftmul 234A                       ___llmod 2AEC                       ___ftsub 2DCC  
                     ___fttol 1FAC                     ?_putsXLCD 0011                  __psmallconst 0800  
             __CFG_STVREN$OFF 000000                       __pcinit 2B52                    ??___awtoft 0027  
                  ??___ftpack 0015               __size_of_fround 0246                       __ramtop 0800  
         __size_of_OpenTimer0 0020           __size_of_OpenTimer2 001C           __size_of_OpenTimer3 002A  
                  ??___lltoft 001C                       __ptext0 1212                       __ptext1 08CA  
                     __ptext2 1760                       __ptext3 3000                       __ptext4 1B50  
                     __ptext5 2F96                       __ptext6 234A                       __ptext7 2A7C  
                     __ptext8 2976                       __ptext9 20F0        __end_of_altaPrioridade 260A  
                   _T0CONbits 000FD5                   ?__div_to_l_ 0010                       _dpowers 0801  
                   _T2CONbits 000FCA                       _isdigit 3000                     _T3CONbits 000FB1  
            ___awmod@dividend 0010                OpenADC@config2 0010                       _sprintf 08CA  
              __pintcode_body 2524          end_of_initialization 2BA2       __size_of_parada_forcada 003E  
               __Lmediumconst 0000                       int_func 2524               main@StringTempo 009D  
             ___lldiv@divisor 0014                  _contCorrente 00C2               ___lldiv@counter 001C  
              ?_DelayFor18TCY 0001                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                    ??_putsXLCD 0013  
              __tdiv_to_l_@f1 0010                __tdiv_to_l_@f2 0013                 ??__tdiv_to_l_ 0016  
                   _PORTAbits 000F80                     _PORTCbits 000F82                     _PORTEbits 000F84  
             ?_altaPrioridade 0001                     _TRISDbits 000F95         __size_of_SetDDRamAddr 0052  
                ??_ConvertADC 0010                   ___ftdiv@exp 0040                     _TXSTAbits 000FAC  
         __size_of__div_to_l_ 0128                   ___ftmul@exp 002D                __end_of___ftge 2976  
              __end_of___wmul 2FBC                 __pidataCOMRAM 30A8         __end_of_InicializaLCD 2F96  
          __end_of_ConvertADC 30A8                __end_of_fround 1D96                  _SetDDRamAddr 2D7A  
        __size_of_Delay1KTCYx 0010                  ??_SetChanADC 0010            SetDDRamAddr@DDaddr 0013  
         start_initialization 2B52           __end_of__tdiv_to_l_ 2222          _CiclosIncrementoAcel 00BC  
                ??_OpenTimer0 0010                  ??_OpenTimer2 0010                  ??_OpenTimer3 0010  
             ___llmod@divisor 0021             __size_of_BusyXLCD 003A               ___llmod@counter 0025  
             ??_DelayFor18TCY 0010            __end_of_SetChanADC 306A             __size_of_OpenXLCD 00B4  
                    ??___ftge 0016                      ??___wmul 0022                 ?_WriteCmdXLCD 0001  
                 __pdataBANK0 00C8              __CFG_LPT1OSC$OFF 000000                      ??_fround 0036  
               sprintf@tmpval 0085            __end_of_OpenTimer0 3000            __end_of_OpenTimer2 303A  
          __end_of_OpenTimer3 2F6E   __end_of_func_timer0_desacel 26C8                 ??_func_timer2 0001  
               ??_func_timer3 0001                    fround@prec 003C             __size_of___awtoft 0038  
           __size_of___ftpack 00AE             __size_of___lltoft 005C                   __pbssCOMRAM 0043  
               __pcstackBANK0 0060      __end_of_func_timer0_acel 2784                  _isdigit$1768 0011  
         _IniciaDesaceleracao 00C5               Delay1KTCYx@unit 0010                _parada_forcada 2E18  
                 sprintf@flag 0081                   sprintf@fval 008F                   sprintf@prec 008D  
                    ?_BusyADC 0001                      ?_ReadADC 0010                     __pnvBANK0 00D0  
           OpenADC@portconfig 0011                      ?_OpenADC 0010  func_timer3@auxTriac3Acionado 004D  
              putsXLCD@buffer 0011            main@StringCorrente 0093                     __pintcode 0008  
              ??_WriteCmdXLCD 0010                      ?___awdiv 0016                      ?___ftadd 003D  
                    ?___awmod 0010                      ?___ftdiv 0033                      ?___ftneg 0010  
                    ?___lldiv 0010                      ?___ftmul 0024                      ?___llmod 001D  
                    ?___ftsub 0066                     __npowers_ 0829                      ?___fttol 0060  
                 __tdiv_to_l_ 20F0             __size_of_putsXLCD 005C         __end_of_WriteDataXLCD 2E94  
                _picoCorrente 00B9                  ??__div_to_l_ 0016                   __smallconst 0800  
                    ?_isdigit 0001        __end_of_parada_forcada 2E56                      ?_sprintf 006F  
         __end_of_func_timer2 2D7A           __end_of_func_timer3 2D20                __size_of_scale 03F0  
              ___wmul@product 0022                 OpenADC@config 0014                      _LATDbits 000F8C  
                    _PIE1bits 000F9D                      _PIE2bits 000FA0                 ?_DelayPORXLCD 0001  
                    i2u342_40 276C                      i2u352_40 2D62                      _PIR1bits 000F9E  
             OpenXLCD@lcdtype 0015            __end_of__div_to_l_ 234A                      i2u347_40 267E  
                    _PIR2bits 000FA1                      i2u348_40 26B0                      i2u356_40 2D08  
            __CFG_WDTPS$32768 000000              ??_altaPrioridade 0002                  _passagemZero 00C7  
                  _ADCON0bits 000FC2             ___wmul@multiplier 001E               ?_parada_forcada 0001  
                 _INTCON2bits 000FF1                     copy_data0 2B66                      _BusyXLCD 2ED2  
            _IniciaAceleracao 00C4                ??_DelayPORXLCD 0011                      _OpenXLCD 2784  
            __size_of_BusyADC 000C              __size_of_ReadADC 000E                      __Hrparam 0000  
            __size_of_OpenADC 005E                      __Lrparam 0000              __size_of___awdiv 0084  
            __size_of___ftadd 0216              __size_of___awmod 0070              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___ftsub 004C              __size_of___fttol 0144  
                    ___awtoft 2F0C                      ___ftpack 2838                   _fround$2124 0039  
                 _fround$2125 0036                      ___lltoft 2C0E                   _func_timer2 2D20  
                 _func_timer3 2CC6                    sprintf@exp 0083                    sprintf@val 0089  
            __size_of_isdigit 001E                      __ptext10 2222                      __ptext11 2C0E  
                    __ptext20 2C6A                      __ptext12 2AEC                      __ptext21 2E56  
                    __ptext13 29FA                      __ptext30 2BB0                      __ptext22 243E  
                    __ptext14 1FAC                      __ptext31 2F6E                      __ptext23 2F0C  
                    __ptext15 2DCC                      __ptext40 3088                      __ptext32 2784  
                    __ptext24 2838                      __ptext16 1D96                      __ptext33 2E94  
                    __ptext25 3054                      __ptext17 2FBC                      __ptext42 2CC6  
                    __ptext34 2D7A                      __ptext26 307A                      __ptext18 28E6  
                    __ptext43 2D20                      __ptext35 309C                      __ptext27 2F44  
                    __ptext19 2E18                      __ptext44 260A                      __ptext36 306A  
                    __ptext28 301E                      __ptext45 26C8                      __ptext37 2ED2  
                    __ptext29 2FE0                      __ptext38 303A                      __ptext39 30A4  
                    __powers_ 0850                      _auxBorda 0049          __end_of_WriteCmdXLCD 2ED2  
                    _auxTimer 004A              __size_of_sprintf 0948                 __size_of_main 054E  
            main@AcelAnterior 00A7                      int$flags 0050                      _putsXLCD 2C6A  
               ??_Delay1KTCYx 0010         __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2  
                    isdigit@c 0012             ?_func_timer0_acel 0001                      scale@scl 0039  
         main@DesacelAnterior 00A9                      intlevel2 0000            ??_func_timer0_acel 0001  
                   sprintf@ap 007F              __tdiv_to_l_@exp1 001E              __tdiv_to_l_@cntr 001D  
                   sprintf@sp 006F              __tdiv_to_l_@quot 0019              ___lldiv@dividend 0010  
      __size_of_InicializaLCD 0028             SetChanADC@channel 0011         __end_of_DelayFor18TCY 3054  
            func_timer2@cont2 0045              func_timer3@cont3 0047                  ?__tdiv_to_l_ 0010  
                    sprintf@c 0092                      sprintf@f 0071           __CFG_FOSC$INTOSC_HS 000000  
        __end_of_DelayPORXLCD 30A4              ___lldiv@quotient 0018           __end_of_Delay1KTCYx 307A  
__size_of_func_timer0_desacel 00BE  
